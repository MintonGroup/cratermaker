{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cratermaker","text":""},{"location":"#simulate-the-evolution-of-a-landscape-dominated-by-impact-bombardment","title":"Simulate the evolution of a landscape dominated by impact bombardment.","text":"<p>Cratermaker is a modernized re-write of the older Cratered Terrain Evolution Model).  Cratermaker is a sophisticated tool designed for simulating and analyzing impact craters, primarily focusing on lunar and other planetary surfaces. Development of Cratermaker is still in its very early stages, and not all features of CTEM have  been implemented yet. </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Comprehensive Crater Simulation: Accurate modeling of impact craters, considering factors like projectile size, impact velocity, and target material.</li> <li>Crater Morphology Analysis: Tools for in-depth analysis of crater dimensions, shapes, and distribution patterns.</li> <li>Robust Production Functions: Advanced algorithms to simulate crater production over time and across different celestial surfaces.</li> <li>Monte Carlo Crater Size Scaling: Projectile to crater size scaling incorporates natural variability capture in emprical models.    </li> <li>Monte Carlo Utilities: Robust statistical methods for populating surfaces with craters.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get started with Cratermaker:</p> <ol> <li>Installation: TBD</li> <li>Basic Tutorials: TBD</li> <li>Advanced Usage: TBD</li> <li>API Reference: Detailed API documentation for a deeper understanding of Cratermaker's capabilities.</li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! </p> <p>Cratermaker is available under the GNU General Public License v3 or later (GPLv3+). See the LICENSE file for more details.</p>"},{"location":"cratermaker_overview/","title":"Introduction to Cratermaker","text":""},{"location":"cratermaker_overview/#overview","title":"Overview","text":"<p>Cratermaker is a sophisticated scientific software tool designed for simulating crater impacts in astronomical contexts. Developed by David A. Minton at Purdue University, this project offers a comprehensive suite of tools for modeling and analyzing the formation and evolution of craters on planetary surfaces. This project is meant to replace CTEM, though it is not quite complete.</p>"},{"location":"cratermaker_overview/#key-features","title":"Key Features","text":"<ul> <li>Comprehensive Crater Simulation: Accurate modeling of impact craters, considering factors like projectile size, impact velocity, and target material.</li> <li>Crater Morphology Analysis: Tools for in-depth analysis of crater dimensions, shapes, and distribution patterns.</li> <li>Robust Production Functions: Advanced algorithms to simulate crater production over time and across different celestial surfaces.</li> <li>Monte Carlo Crater Size Scaling: Projectile to crater size scaling incorporates natural variability capture in emprical models.    </li> <li>Monte Carlo Utilities: Robust statistical methods for populating surfaces with craters.</li> </ul>"},{"location":"cratermaker_overview/#development-status","title":"Development Status","text":"<p>Cratermaker is in Alpha development stage, indicating that it is in the early phases of its development cycle. It's geared towards Science/Research, particularly in the field of Astronomy and Scientific/Engineering applications. The project is licensed under the GNU General Public License v3 or later (GPLv3+).</p>"},{"location":"license/","title":"GNU General Public License","text":"<p>Version 3, 29 June 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"license/#preamble","title":"Preamble","text":"<p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"license/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"license/#0-definitions","title":"0. Definitions","text":"<p>\u201cThis License\u201d refers to version 3 of the GNU General Public License.</p> <p>\u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations.</p> <p>To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work.</p> <p>A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program.</p> <p>To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"license/#1-source-code","title":"1. Source Code","text":"<p>The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work.</p> <p>A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"license/#2-basic-permissions","title":"2. Basic Permissions","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"license/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"license/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"license/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d.</li> <li>c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"license/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"license/#7-additional-terms","title":"7. Additional Terms","text":"<p>\u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"license/#8-termination","title":"8. Termination","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"license/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"license/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"license/#11-patents","title":"11. Patents","text":"<p>A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \u201ccontributor version\u201d.</p> <p>A contributor's \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"license/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"license/#13-use-with-the-gnu-affero-general-public-license","title":"13. Use with the GNU Affero General Public License","text":"<p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p>"},{"location":"license/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"license/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"license/#16-limitation-of-liability","title":"16. Limitation of Liability","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"license/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"license/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\nThis program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type 'show c' for details.\n</code></pre> <p>The hypothetical commands <code>show w</code> and <code>show c</code> should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \u201cabout box\u201d.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see &lt;http://www.gnu.org/licenses/&gt;.</p> <p>The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read &lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.</p>"},{"location":"api/crater/","title":"Crater Module","text":""},{"location":"api/crater/#cratermaker.core.crater.Crater","title":"<code>Crater</code>","text":"<p>Represents a crater formed by an impact in the simulation.</p> <p>This class models the crater resulting from an impact, including its size, shape, depth, and other morphological features.</p>"},{"location":"api/crater/#cratermaker.core.crater.Crater--attributes","title":"Attributes","text":"<p>diameter : float     The diameter of the crater rim in m. radius : float     The radius of the crater rim in m. transient_diameter : float     The diameter of the transient crater in m. transient_radius : float     The radius of the transient crater in m.   location : (2,) float     The lat. and lon. of the impact point in degrees</p> Source code in <code>cratermaker/core/crater.py</code> <pre><code>class Crater:\n    \"\"\"\n    Represents a crater formed by an impact in the simulation.\n\n    This class models the crater resulting from an impact, including its size,\n    shape, depth, and other morphological features.\n\n    Attributes\n    ----------\n    diameter : float\n        The diameter of the crater rim in m.\n    radius : float\n        The radius of the crater rim in m.\n    transient_diameter : float\n        The diameter of the transient crater in m.\n    transient_radius : float\n        The radius of the transient crater in m.    \n    location : (2,) float\n        The lat. and lon. of the impact point in degrees\n    \"\"\"\n\n    def __init__(self, \n                diameter: FloatLike = None,\n                radius: FloatLike = None,\n                transient_diameter: FloatLike = None,\n                transient_radius: FloatLike = None,\n                location: ArrayLike = None,\n                target: Target = None,\n                scale: Scale = None,\n                morphology: Morphology = None, \n                rng: Generator = None,\n                **kwargs):\n\n        if target is None:\n            target = Target(name=\"Moon\")\n        elif not isinstance(target, Target):\n            raise TypeError(\"target must be an instance of Target\")\n\n        if scale is None:\n            self.scale = Scale(target,rng) \n        elif isinstance(scale, Scale):\n            self.scale = scale\n        else:\n            raise TypeError(\"scale must be an instance of Scale\") \n\n        if rng is None:\n            self.rng = np.random.default_rng()\n        elif isinstance(rng, Generator):\n            self.rng = rng\n        else:\n            raise TypeError(\"The 'rng' argument must be a numpy.random.Generator instance or None\")\n\n        #  Evaluate and check diameter/radius values \n        values_set = sum(x is not None for x in [diameter, radius, transient_diameter, transient_radius])\n        if values_set &gt; 1:\n            raise ValueError(\"Only one of diameter, radius, transient_diameter, transient_radius may be set\")\n        elif values_set == 0:\n            raise ValueError(\"A crater must include one of diameter, radius, transient_diameter, or transient_radius!\")\n\n        # Now call the setters to ensure that all related calculations and checks are performed\n        self._diameter = diameter\n        self._radius = radius\n        self._transient_diameter = transient_diameter\n        self._transient_radius = transient_radius    \n        self._location = location\n\n        if diameter is not None:\n            self.diameter = diameter\n        elif radius is not None:\n            self.radius = radius\n        elif transient_diameter is not None:\n            self.transient_diameter = transient_diameter\n        elif transient_radius is not None:  \n            self.transient_radius = transient_radius\n\n        if location is not None:\n            self.location = location              \n        self._initialize_location(self.rng) \n\n        if morphology is None:\n            self.morphology = Morphology(self,target,self.rng) \n        elif isinstance(morphology, Morphology):\n            self.morphology = morphology\n        else:\n            raise TypeError(\"morphology must be an instance of Morphology\")\n\n        return\n\n\n    def __repr__(self):\n        return (f\"Crater(diameter={self.diameter}, radius={self.radius}, \"\n                f\"transient_diameter={self.transient_diameter}, transient_radius={self.transient_radius}, \"\n                f\"morphology_type={self.morphology_type} \"\n                f\"location={self.location}\")\n\n    @property\n    def diameter(self):\n        return self._diameter\n\n    @diameter.setter\n    def diameter(self, value):\n        if value is not None:\n            if value &lt;= 0.0:\n                raise ValueError(\"Diameter of crater rim must be finite and positive!\")\n            self._diameter = value\n            self._radius = value / 2\n            self._transient_diameter, self.morphology_type = self.scale.final_to_transient(value)\n            self._transient_radius = self._transient_diameter / 2\n        return\n\n    @property\n    def radius(self):\n        return self._radius\n\n    @radius.setter\n    def radius(self, value):\n        if value is not None:\n            if value &lt;= 0.0:\n                raise ValueError(\"Radius of crater rim must be finite and positive!\")            \n            self._radius = value\n            self._diameter = value * 2\n            self._transient_diameter, self.morphology_type = self.scale.final_to_transient(value)\n            self._transient_radius = self._transient_diameter / 2\n\n    @property\n    def transient_diameter(self):\n        return self._transient_diameter\n\n    @transient_diameter.setter\n    def transient_diameter(self, value):\n        if value is not None:\n            if value &lt;= 0.0:\n                raise ValueError(\"Diameter of transient crater must be finite and positive!\")\n            self._transient_diameter = value\n            self._transient_radius = value / 2\n            self._diameter,self.morphology_type = self.scale.transient_to_final(value)\n            self._radius = self._diameter / 2\n        return\n\n    @property\n    def transient_radius(self):\n        return self._transient_radius\n\n    @transient_radius.setter\n    def transient_radius(self, value):\n        self._transient_radius = value\n        if value is not None:\n            if value &lt;= 0.0:\n                raise ValueError(\"Radius of transient crater must be finite and positive!\")            \n            self._transient_diameter = value * 2            \n            self._diameter,self.morphology_type = self.scale.transient_to_final(value)\n            self._radius = self._diameter / 2\n\n    @property\n    def location(self):\n        return self._location\n\n    @location.setter\n    def location(self, value):\n        self._location = value\n\n    def _initialize_location(self, rng):\n        if self._location is None:\n            self.location = mc.get_random_location(rng=rng)\n        else:    \n            self.location = validate_and_convert_location(self.location)\n</code></pre>"},{"location":"api/crater/#cratermaker.core.crater.Projectile","title":"<code>Projectile</code>","text":"<p>Represents the self.in the crater simulation.</p> <p>This class defines the properties of the impacting object, such as its size, velocity, material, and angle of impact.</p>"},{"location":"api/crater/#cratermaker.core.crater.Projectile--attributes","title":"Attributes","text":"<p>diameter : float     The diameter of the projectile in m. radius : float     The radius of the projectile in m. density : float     The mass density of the projectile in kg/m**3. mass : float     The mass of the projectile in kg. velocity : float     The velocity of the projectile upon impact, in m/s. vertical_velocity : float     The vertical component of the projectile velocity upon impact, in m/s. angle : float     The angle of impact, in degrees. location : (2,) float     The lat. and lon. of the impact point in degrees</p> Source code in <code>cratermaker/core/crater.py</code> <pre><code>class Projectile:\n    \"\"\"\n    Represents the self.in the crater simulation.\n\n    This class defines the properties of the impacting object, such as its size,\n    velocity, material, and angle of impact.\n\n    Attributes\n    ----------\n    diameter : float\n        The diameter of the projectile in m.\n    radius : float\n        The radius of the projectile in m.\n    density : float\n        The mass density of the projectile in kg/m**3.\n    mass : float\n        The mass of the projectile in kg.\n    velocity : float\n        The velocity of the projectile upon impact, in m/s.\n    vertical_velocity : float\n        The vertical component of the projectile velocity upon impact, in m/s.\n    angle : float\n        The angle of impact, in degrees.\n    location : (2,) float\n        The lat. and lon. of the impact point in degrees\n    \"\"\"\n\n    def __init__(self, \n                diameter: FloatLike = None,\n                radius: FloatLike = None,\n                density: FloatLike = None,\n                mass: FloatLike = None,\n                velocity: FloatLike = None,\n                angle: FloatLike = None,\n                vertical_velocity: FloatLike = None,\n                location: ArrayLike = None,\n                target: Target = None, \n                scale = None,\n                rng: Generator = None,\n                **kwargs):\n        from .scale import Scale \n        if target is None:\n            target = Target(name=\"Moon\")\n        elif not isinstance(target, Target):\n            raise TypeError(\"target must be an instance of Target\")        \n        if rng and not isinstance(rng, Generator):\n            raise TypeError(\"The 'rng' argument must be a numpy.random.Generator instance or None\")\n        if scale is None:\n            self.scale = Scale(target, rng) \n        elif isinstance(scale, Scale):\n            self.scale = scale\n        else:\n            raise TypeError(\"scale must be an instance of Scale\") \n\n        # Evaluate and check diameter/radius inputs\n        values_set = sum(x is not None for x in [diameter, radius])\n        if values_set &gt; 1:\n            raise ValueError(\"Only one of diameter or radius may be set\")\n\n        values_set = sum(x is not None for x in [diameter, radius, mass])\n        if values_set == 0:\n            raise ValueError(\"A projectile must include one of diameter, radius, or mass!\")\n\n        # Evaluate and check mass/density/radius inputs \n        values_set = sum(x is not None for x in [mass, density, radius])\n        if values_set &gt; 2:\n            raise ValueError(\"Only two of mass, density, and radius may be set\")\n\n        # Evaluate and check mass/density/diameter inputs \n        values_set = sum(x is not None for x in [mass, density, diameter])\n        if values_set &gt; 2:\n            raise ValueError(\"Only two of mass, density, and diameter may be set\")\n\n        # Evaluate and check velocity/impact angle inputs\n        values_set = sum(x is not None for x in [velocity, vertical_velocity, angle])\n        if values_set &gt; 2:\n            raise ValueError(\"Only two of velocity, vertical_velocity, angle may be set\")\n\n        # Now call the setters to ensure that all related calculations and checks are performed\n        self._diameter = diameter\n        self._radius = radius\n        self._density = density\n        self._mass = mass    \n        self._velocity = velocity    \n        self._angle = angle    \n        self._vertical_velocity = vertical_velocity\n        self._location = location\n\n        if diameter is not None:\n            self.diameter = diameter\n        elif radius is not None:\n            self.radius = radius\n\n        if mass is not None:\n            self.mass = mass\n\n        if density is not None:\n            self.density = density \n        else:\n            if self.mass is None or self.radius is None: # Default to target density if we are given no way to figure it out\n                self.density = target.material.density \n\n        if location is not None:\n            self.location = location              \n\n        if velocity is not None:\n            self.velocity = velocity\n        if angle is not None:\n            self.angle = angle\n        if vertical_velocity is not None:\n            self.vertical_velocity = vertical_velocity \n\n        self._initialize_velocities(target,rng)\n        self._initialize_location(rng)\n\n        self.scale = scale \n\n        return\n\n    def __repr__(self):\n        return (f\"Projectile(diameter={self.diameter} mm, radius={self.radius} m, \"\n                f\"mass={self.mass} kg, density={self.density} kg/m^3, \"\n                f\"velocity={self.velocity} m/s, angle={self.angle} deg, \"\n                f\"vertical_velocity={self.vertical_velocity} m/s, \"\n                f\"lon: {self.location[0]}, lat {self.location[1]}\")\n\n\n    @property\n    def diameter(self):\n        return self._diameter\n\n    @diameter.setter\n    def diameter(self, value):\n        self._diameter = value\n        if value is not None:\n            if value &lt;= 0.0:\n                raise ValueError(\"Diameter of projectile must be finite and positive!\")\n            self._radius = value / 2\n            self._update_mass()\n        return\n\n    @property\n    def radius(self):\n        return self._radius\n\n    @radius.setter\n    def radius(self, value):\n        self._radius = value\n        if value is not None:\n            if value &lt;= 0.0:\n                raise ValueError(\"Radius of projectile must be finite and positive!\")            \n            self._diameter = value * 2\n            self._update_mass()\n        return\n\n    @property\n    def mass(self):\n        return self._mass\n\n    @mass.setter\n    def mass(self, value):\n        self._mass = value\n        if value is not None and value &lt;= 0.0:\n            raise ValueError(\"Mass of projectile must be finite and positive!\")            \n        self._update_volume_based_properties()\n        return\n\n    @property\n    def density(self):\n        return self._density\n\n    @density.setter\n    def density(self, value):\n        self._density = value\n        if value is not None and value &lt;= 0.0:\n            raise ValueError(\"Density of projectile must be finite and positive!\")                 \n        self._update_mass()\n\n    def _update_mass(self):\n        if self._density is not None and self._radius is not None:\n            self._mass = 4.0/3.0 * np.pi * self._radius**3 * self._density\n\n    def _update_volume_based_properties(self):\n        if self._mass is not None and self._density is not None:\n            volume = self._mass / self._density\n            self._radius = ((3.0 * volume) / (4.0 * np.pi))**(1.0/3.0)\n            self._diameter = self._radius * 2\n\n    @property\n    def velocity(self):\n        if self._velocity is None and self._vertical_velocity is not None and self._angle is not None:\n            self._velocity = self._vertical_velocity / np.sin(np.deg2rad(self._angle))\n        return self._velocity\n\n    @velocity.setter\n    def velocity(self, value):\n        if value is not None and value &lt;= 0.0:\n            raise ValueError(\"Velocity of projectile must be finite and positive!\")        \n        self._velocity = value\n\n        if value is not None and self._angle is not None:\n            self._vertical_velocity = value * np.sin(np.deg2rad(self._angle))\n\n    @property\n    def vertical_velocity(self):\n        if self._vertical_velocity is None and self._velocity is not None and self._angle is not None:\n            self._vertical_velocity = self._velocity * np.sin(np.deg2rad(self._angle))\n        return self._vertical_velocity\n\n    @vertical_velocity.setter\n    def vertical_velocity(self, value):\n        if value is not None and value &lt;= 0.0:\n            raise ValueError(\"Vertical velocity of projectile must be finite and positive!\")        \n        self._vertical_velocity = value\n\n        # Update velocity only if angle is already set\n        if self._angle is not None and value is not None:\n            try:\n                self._velocity = value / np.sin(np.deg2rad(self._angle))\n            except ValueError:\n                raise ValueError(f\"Invalid vertical velocity value {value} for a given angle value {self._angle}!\")\n\n    @property\n    def angle(self):\n        return self._angle\n\n    @angle.setter\n    def angle(self, value):\n        if value is not None:\n            if value &lt; 0.0 or value &gt; 90.0:\n                raise ValueError(\"Impact angle of projectile must be between 0 and 90 degrees\")\n            self._angle = value\n            # Update vertical_velocity only if velocity is already set\n            if self._velocity is not None:\n                self._vertical_velocity = self._velocity * np.sin(np.deg2rad(self._angle))\n\n    def _initialize_velocities(self, target: Target, rng: Generator | None = None):\n        if self._velocity is None:\n            vencounter_mean = np.sqrt(target.mean_impact_velocity**2 - target.escape_velocity**2)\n            vencounter = mc.get_random_velocity(vencounter_mean, rng=rng)\n            self.velocity = np.sqrt(vencounter**2 + target.escape_velocity**2)\n\n        if self._angle is None:\n            if rng:\n                self.angle = mc.get_random_impact_angle(rng=rng)\n            else:\n                self.angle = mc.get_random_impact_angle()\n        return\n\n    @property\n    def location(self):\n        return self._location\n\n    @location.setter\n    def location(self, value):\n        self._location = value\n\n\n    def _initialize_location(self, rng):\n        if self._location is None:\n            self.location = mc.get_random_location(rng=rng)\n        else:    \n            self.location = validate_and_convert_location(self.location)\n</code></pre>"},{"location":"api/crater/#cratermaker.core.crater.Projectile.__init__","title":"<code>__init__(diameter=None, radius=None, density=None, mass=None, velocity=None, angle=None, vertical_velocity=None, location=None, target=None, scale=None, rng=None, **kwargs)</code>","text":"Source code in <code>cratermaker/core/crater.py</code> <pre><code>def __init__(self, \n            diameter: FloatLike = None,\n            radius: FloatLike = None,\n            density: FloatLike = None,\n            mass: FloatLike = None,\n            velocity: FloatLike = None,\n            angle: FloatLike = None,\n            vertical_velocity: FloatLike = None,\n            location: ArrayLike = None,\n            target: Target = None, \n            scale = None,\n            rng: Generator = None,\n            **kwargs):\n    from .scale import Scale \n    if target is None:\n        target = Target(name=\"Moon\")\n    elif not isinstance(target, Target):\n        raise TypeError(\"target must be an instance of Target\")        \n    if rng and not isinstance(rng, Generator):\n        raise TypeError(\"The 'rng' argument must be a numpy.random.Generator instance or None\")\n    if scale is None:\n        self.scale = Scale(target, rng) \n    elif isinstance(scale, Scale):\n        self.scale = scale\n    else:\n        raise TypeError(\"scale must be an instance of Scale\") \n\n    # Evaluate and check diameter/radius inputs\n    values_set = sum(x is not None for x in [diameter, radius])\n    if values_set &gt; 1:\n        raise ValueError(\"Only one of diameter or radius may be set\")\n\n    values_set = sum(x is not None for x in [diameter, radius, mass])\n    if values_set == 0:\n        raise ValueError(\"A projectile must include one of diameter, radius, or mass!\")\n\n    # Evaluate and check mass/density/radius inputs \n    values_set = sum(x is not None for x in [mass, density, radius])\n    if values_set &gt; 2:\n        raise ValueError(\"Only two of mass, density, and radius may be set\")\n\n    # Evaluate and check mass/density/diameter inputs \n    values_set = sum(x is not None for x in [mass, density, diameter])\n    if values_set &gt; 2:\n        raise ValueError(\"Only two of mass, density, and diameter may be set\")\n\n    # Evaluate and check velocity/impact angle inputs\n    values_set = sum(x is not None for x in [velocity, vertical_velocity, angle])\n    if values_set &gt; 2:\n        raise ValueError(\"Only two of velocity, vertical_velocity, angle may be set\")\n\n    # Now call the setters to ensure that all related calculations and checks are performed\n    self._diameter = diameter\n    self._radius = radius\n    self._density = density\n    self._mass = mass    \n    self._velocity = velocity    \n    self._angle = angle    \n    self._vertical_velocity = vertical_velocity\n    self._location = location\n\n    if diameter is not None:\n        self.diameter = diameter\n    elif radius is not None:\n        self.radius = radius\n\n    if mass is not None:\n        self.mass = mass\n\n    if density is not None:\n        self.density = density \n    else:\n        if self.mass is None or self.radius is None: # Default to target density if we are given no way to figure it out\n            self.density = target.material.density \n\n    if location is not None:\n        self.location = location              \n\n    if velocity is not None:\n        self.velocity = velocity\n    if angle is not None:\n        self.angle = angle\n    if vertical_velocity is not None:\n        self.vertical_velocity = vertical_velocity \n\n    self._initialize_velocities(target,rng)\n    self._initialize_location(rng)\n\n    self.scale = scale \n\n    return\n</code></pre>"},{"location":"api/general_utils/","title":"General Utilities Module","text":""},{"location":"api/general_utils/#cratermaker.utils.general_utils.create_catalogue","title":"<code>create_catalogue(header, values)</code>","text":"<p>Create and return a catalogue of properties or items based on the given inputs.</p> <p>This function generates a catalogue, which could be a collection of properties, configurations, or any other set of items, based on the provided arguments.</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.create_catalogue--parameters","title":"Parameters","text":"<p>args : various     The arguments that determine the contents of the catalogue. The type and number of arguments     can vary based on the intended use of the catalogue.</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.create_catalogue--returns","title":"Returns","text":"<p>catalogue_type     A catalogue of items or properties. The exact type of this catalogue (e.g., dict, list, custom object)     depends on the implementation.</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.create_catalogue--notes","title":"Notes","text":"<p>The catalogues built by this function are the built-in catalogues for material properties and target bodie</p> Source code in <code>cratermaker/utils/general_utils.py</code> <pre><code>def create_catalogue(header,values):\n    \"\"\"\n    Create and return a catalogue of properties or items based on the given inputs.\n\n    This function generates a catalogue, which could be a collection of properties, configurations,\n    or any other set of items, based on the provided arguments.\n\n    Parameters\n    ----------\n    args : various\n        The arguments that determine the contents of the catalogue. The type and number of arguments\n        can vary based on the intended use of the catalogue.\n\n    Returns\n    -------\n    catalogue_type\n        A catalogue of items or properties. The exact type of this catalogue (e.g., dict, list, custom object)\n        depends on the implementation.\n\n    Notes\n    -----\n    The catalogues built by this function are the built-in catalogues for material properties and target bodie\n    \"\"\"   \n    # Create the catalogue dictionary using the class variables\n    catalogue = {\n        tab[0]: dict(zip(header, tab))\n        for tab in values\n    }\n\n    # Remove the first key from each dictionary in the catalogue\n    for k in list(catalogue):\n        del catalogue[k][header[0]]\n\n    return catalogue \n</code></pre>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.normalize_coords","title":"<code>normalize_coords(loc)</code>","text":"<p>Normalize geographic coordinates to ensure longitude is within [-180, 180) degrees  and latitude within [-90, 90] degrees.</p> <p>This function takes a tuple of longitude and latitude values in degrees, normalizes  them to the specified ranges, and handles cases where latitude values exceed the  polar extremes, adjusting both latitude and longitude accordingly.</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.normalize_coords--parameters","title":"Parameters","text":"<p>loc : tuple     A tuple containing two elements: (longitude, latitude) in degrees.      Longitude and latitude can be any float values.</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.normalize_coords--returns","title":"Returns","text":"<p>tuple     A tuple of two elements: (normalized_longitude, normalized_latitude).      The normalized longitude is in the range [-180, 180) degrees, and the      normalized latitude is in the range [-90, 90] degrees.</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.normalize_coords--notes","title":"Notes","text":"<ul> <li>The longitude is normalized using a modulo operation with 360 degrees and then adjusted to the range [-180, 180).</li> <li>Latitude values beyond 90 or below -90 degrees are adjusted by reflecting them within the range and flipping the longitude by 180 degrees, then re-normalizing it to the [-180, 180) range.</li> </ul>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.normalize_coords--examples","title":"Examples","text":"<p>normalize_coords((370, 95)) (10.0, 85.0)</p> <p>normalize_coords((-185, -100)) (-5.0, 80.0)</p> Source code in <code>cratermaker/utils/general_utils.py</code> <pre><code>def normalize_coords(loc):\n    \"\"\"\n    Normalize geographic coordinates to ensure longitude is within [-180, 180) degrees \n    and latitude within [-90, 90] degrees.\n\n    This function takes a tuple of longitude and latitude values in degrees, normalizes \n    them to the specified ranges, and handles cases where latitude values exceed the \n    polar extremes, adjusting both latitude and longitude accordingly.\n\n    Parameters\n    ----------\n    loc : tuple\n        A tuple containing two elements: (longitude, latitude) in degrees. \n        Longitude and latitude can be any float values.\n\n    Returns\n    -------\n    tuple\n        A tuple of two elements: (normalized_longitude, normalized_latitude). \n        The normalized longitude is in the range [-180, 180) degrees, and the \n        normalized latitude is in the range [-90, 90] degrees.\n\n    Notes\n    -----\n    - The longitude is normalized using a modulo operation with 360 degrees and then adjusted to the range [-180, 180).\n    - Latitude values beyond 90 or below -90 degrees are adjusted by reflecting them within the range and flipping the longitude by 180 degrees, then re-normalizing it to the [-180, 180) range.\n\n    Examples\n    --------\n    &gt;&gt;&gt; normalize_coords((370, 95))\n    (10.0, 85.0)\n\n    &gt;&gt;&gt; normalize_coords((-185, -100))\n    (-5.0, 80.0)\n    \"\"\"\n    lon, lat = loc\n\n    # Normalize longitude to be within [-180, 180)\n    normalized_lon = ((lon + 180) % 360) - 180\n\n    # Normalize latitude\n    if lat &gt; 90:\n        normalized_lat = 180 - lat \n        normalized_lon = lon - 180 # Flip the longitude \n    elif lat &lt; -90:\n        normalized_lat = -180 - lat \n        normalized_lon = lon - 180 # Flip the longitude\n    else:\n        normalized_lat = lat\n\n    # Ensure latitude is within the range [-90, 90] after adjustments\n    normalized_lat = np.clip(normalized_lat, -90, 90)\n\n    return normalized_lon, normalized_lat\n</code></pre>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.set_properties","title":"<code>set_properties(obj, **kwargs)</code>","text":"<p>Set properties of a simulation object from various sources.</p> <p>This function sets the properties of a simulation object based on the provided arguments. Properties can be read from a JSON file, a pre-defined catalogue, or directly passed as keyword arguments.</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.set_properties--parameters","title":"Parameters","text":"<p>obj : object     The simulation object whose properties are to be set. **kwargs : dict     Keyword arguments that can include 'filename', 'catalogue', and other direct property settings.</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.set_properties--notes","title":"Notes","text":"<p>The order of property precedence is:  1. Direct keyword arguments (kwargs). 2. Pre-defined catalogue (specified by 'catalogue' key in kwargs). 3. JSON file (specified by 'filename' key in kwargs). Properties set by kwargs override those set by 'catalogue' or 'filename'.</p> Source code in <code>cratermaker/utils/general_utils.py</code> <pre><code>def set_properties(obj,**kwargs):\n    \"\"\"\n    Set properties of a simulation object from various sources.\n\n    This function sets the properties of a simulation object based on the provided arguments.\n    Properties can be read from a JSON file, a pre-defined catalogue, or directly passed as keyword arguments.\n\n    Parameters\n    ----------\n    obj : object\n        The simulation object whose properties are to be set.\n    **kwargs : dict\n        Keyword arguments that can include 'filename', 'catalogue', and other direct property settings.\n\n    Notes\n    -----\n    The order of property precedence is: \n    1. Direct keyword arguments (kwargs).\n    2. Pre-defined catalogue (specified by 'catalogue' key in kwargs).\n    3. JSON file (specified by 'filename' key in kwargs).\n    Properties set by kwargs override those set by 'catalogue' or 'filename'.\n    \"\"\"\n\n    def set_properties_from_arguments(obj, **kwargs):\n        for key, value in kwargs.items():\n            if hasattr(obj, key) and value is not None:\n                setattr(obj, key, value)   \n\n    def set_properties_from_catalogue(obj, catalogue, name=None, **kwargs):\n        # Check to make sure that the catalogue argument is in the valid nested dict format\n        if not isinstance(catalogue, dict):\n            raise ValueError(\"Catalogue must be a dictionary\")\n\n        for key, value in catalogue.items():\n            if not isinstance(value, dict):\n                raise ValueError(f\"Value for key '{key}' in catalogue must be a dictionary\")\n\n        # Look up material in the catalogue\n        if name is None:\n            if len(catalogue) == 1:\n                name = next(iter(catalogue)) \n            else:\n                raise ValueError(\"A name argument must be passed if there is more than one item in the catalogue!\")\n\n        properties = catalogue.get(name) \n        if properties: # A match was found to the catalogue \n            set_properties_from_arguments(obj, **properties)\n        else:\n            set_properties_from_arguments(obj, name=name, **kwargs)\n\n    def set_properties_from_file(obj, filename, name=None, **kwargs):\n        with open(filename, 'r') as f:\n            catalogue = json.load(f)\n\n        set_properties_from_catalogue(obj,catalogue=catalogue,name=name)\n        set_properties_from_arguments(obj,name=name)\n\n    if 'filename' in kwargs:\n        set_properties_from_file(obj,**kwargs)\n\n    if 'catalogue' in kwargs: \n        set_properties_from_catalogue(obj,**kwargs)\n\n    set_properties_from_arguments(obj,**kwargs)\n\n    if not hasattr(obj,\"name\"):\n        raise ValueError(\"The object must be given a name\")\n\n    return\n</code></pre>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.to_config","title":"<code>to_config(obj)</code>","text":"<p>Serialize the attributes of an object into a dictionary.</p> <p>This function generates a dictionary of serializable attributes of the given object, excluding those specified in the object's 'config_ignore' attribute.</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.to_config--parameters","title":"Parameters","text":"<p>obj : object     The object whose attributes are to be serialized.</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.to_config--returns","title":"Returns","text":"<p>dict     A dictionary containing the serializable attributes of the object.</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.to_config--notes","title":"Notes","text":"<p>Only attributes that are instances of basic data types (int, float, str, list, dict, bool, None) are included. Attributes listed in 'config_ignore' of the object are excluded from serialization.</p> Source code in <code>cratermaker/utils/general_utils.py</code> <pre><code>def to_config(obj):\n    \"\"\"\n    Serialize the attributes of an object into a dictionary.\n\n    This function generates a dictionary of serializable attributes of the given object,\n    excluding those specified in the object's 'config_ignore' attribute.\n\n    Parameters\n    ----------\n    obj : object\n        The object whose attributes are to be serialized.\n\n    Returns\n    -------\n    dict\n        A dictionary containing the serializable attributes of the object.\n\n    Notes\n    -----\n    Only attributes that are instances of basic data types (int, float, str, list, dict, bool, None) are included.\n    Attributes listed in 'config_ignore' of the object are excluded from serialization.\n    \"\"\"   \n    # Check if the object has the attribute 'config_ignore'\n    ignores = getattr(obj, 'config_ignore', [])\n\n    # Generate a dictionary of serializable attributes, excluding those in 'ignores'\n    return {\n        k: v for k, v in obj.__dict__.items()\n        if isinstance(v, (int, float, str, list, dict, bool, type(None))) and k not in ignores\n    }\n</code></pre>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.validate_and_convert_location","title":"<code>validate_and_convert_location(location)</code>","text":"<p>Validate and convert a given location into a standard structured format.</p> <p>This function checks the input location data and converts it into a  consistent structured array format if it is a valid location representation. Valid formats for location include a tuple, a dictionary, or a structured  array with latitude ('lat') and longitude ('lon').</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.validate_and_convert_location--parameters","title":"Parameters","text":"<p>location : tuple, dict, ArrayLike     The input location data. It can be:     - A tuple with two elements (latitude, longitude).     - A dictionary with keys 'lat' and 'lon'.     - A structured numpy array with 'lat' and 'lon' fields.     - A list or an unstructured numpy array with two elements.</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.validate_and_convert_location--returns","title":"Returns","text":"<p>ArrayLike     A structured numpy array with the location data in the format      [('lat', 'f8'), ('lon', 'f8')].</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.validate_and_convert_location--raises","title":"Raises","text":"<p>ValueError     If the input does not conform to one of the expected formats for location data.</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.validate_and_convert_location--examples","title":"Examples","text":"<p>validate_and_convert_location((45.0, -120.0)) array([(45., -120.)], dtype=[('lat', '&lt;f8'), ('lon', '&lt;f8')])</p> <p>validate_and_convert_location({'lat': 45.0, 'lon': -120.0}) array([(45., -120.)], dtype=[('lat', '&lt;f8'), ('lon', '&lt;f8')])</p> <p>validate_and_convert_location(np.array([(45.0, -120.0)], dtype=[('lat', 'f8'), ('lon', 'f8')])) array([(45., -120.)], dtype=[('lat', '&lt;f8'), ('lon', '&lt;f8')])</p>"},{"location":"api/general_utils/#cratermaker.utils.general_utils.validate_and_convert_location--notes","title":"Notes","text":"<p>The function ensures that the output is always a structured numpy array with  'lat' and 'lon' fields for consistent handling of location data across different input formats.</p> Source code in <code>cratermaker/utils/general_utils.py</code> <pre><code>def validate_and_convert_location(location):\n    \"\"\"\n    Validate and convert a given location into a standard structured format.\n\n    This function checks the input location data and converts it into a \n    consistent structured array format if it is a valid location representation.\n    Valid formats for location include a tuple, a dictionary, or a structured \n    array with latitude ('lat') and longitude ('lon').\n\n    Parameters\n    ----------\n    location : tuple, dict, ArrayLike\n        The input location data. It can be:\n        - A tuple with two elements (latitude, longitude).\n        - A dictionary with keys 'lat' and 'lon'.\n        - A structured numpy array with 'lat' and 'lon' fields.\n        - A list or an unstructured numpy array with two elements.\n\n    Returns\n    -------\n    ArrayLike\n        A structured numpy array with the location data in the format \n        [('lat', 'f8'), ('lon', 'f8')].\n\n    Raises\n    ------\n    ValueError\n        If the input does not conform to one of the expected formats for location data.\n\n    Examples\n    --------\n    &gt;&gt;&gt; validate_and_convert_location((45.0, -120.0))\n    array([(45., -120.)], dtype=[('lat', '&lt;f8'), ('lon', '&lt;f8')])\n\n    &gt;&gt;&gt; validate_and_convert_location({'lat': 45.0, 'lon': -120.0})\n    array([(45., -120.)], dtype=[('lat', '&lt;f8'), ('lon', '&lt;f8')])\n\n    &gt;&gt;&gt; validate_and_convert_location(np.array([(45.0, -120.0)], dtype=[('lat', 'f8'), ('lon', 'f8')]))\n    array([(45., -120.)], dtype=[('lat', '&lt;f8'), ('lon', '&lt;f8')])\n\n    Notes\n    -----\n    The function ensures that the output is always a structured numpy array with \n    'lat' and 'lon' fields for consistent handling of location data across different\n    input formats.\n    \"\"\"    \n    # Check if it's already a tuple\n    if isinstance(location, tuple) and len(location) == 2:\n        return location\n\n    # Check if it's already a structured array with 'lat' and 'lon'\n    if isinstance(location, ArrayLike) and location.dtype.names == ('lat', 'lon'):\n        return location\n\n    # Check if it's a dictionary with 'lat' and 'lon' keys\n    if isinstance(location, dict):\n        if \"lat\" in location and \"lon\" in location:\n            return np.array([(location['lat'], location['lon'])], dtype=[('lat', 'f8'), ('lon', 'f8')])\n\n    # Check if it's a tuple, list, or array of the correct shape\n    if isinstance(location, (tuple, list, ArrayLike)):\n        if len(location) == 2:\n            return np.array([(location[0], location[1])], dtype=[('lat', 'f8'), ('lon', 'f8')])\n\n    raise ValueError(\"location must be a dict with 'lat' and 'lon', a 2-element tuple/list, or a structured array with 'lat' and 'lon'\")\n</code></pre>"},{"location":"api/montecarlo/","title":"Monte Carlo Utility Module","text":""},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.bounded_norm","title":"<code>bounded_norm(loc, scale, size=1)</code>","text":"<p>Sample from a truncated normal distribution that is bounded by 1-sigma stdev</p>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.bounded_norm--parameters","title":"Parameters","text":"<p>loc : float    mean of the distribution scale : float    standard deviation and bounds of the distribution</p>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.bounded_norm--returns","title":"Returns","text":"<p>float    Truncated norm bounded by loc-scale, loc+scale</p> Source code in <code>cratermaker/utils/montecarlo.py</code> <pre><code>def bounded_norm(loc: np.float64,scale: np.float64,size: Optional[Union[int, Tuple[int, ...]]]=1):\n    \"\"\"\n    Sample from a truncated normal distribution that is bounded by 1-sigma stdev\n\n    Parameters \n    ----------\n    loc : float\n       mean of the distribution\n    scale : float\n       standard deviation and bounds of the distribution\n\n    Returns\n    ----------\n    float\n       Truncated norm bounded by loc-scale, loc+scale\n    \"\"\"    \n\n    lower_bound = loc - scale\n    upper_bound = loc + scale\n    truncated_normal = truncnorm(\n          (lower_bound - loc) / scale,\n            (upper_bound - loc) / scale,\n            loc=loc, scale=scale\n        )\n\n    if size == 1:\n        return truncated_normal.rvs(1)[0]\n    else:\n        return truncated_normal.rvs(size)\n</code></pre>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_impact_angle","title":"<code>get_random_impact_angle(size=1, rng=None)</code>","text":"<p>Sample impact angles from a distribution centered on 45deg.</p> <p>For the theory, see Shoemaker (1962) \"Interpretation of lunar craters.\"</p>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_impact_angle--parameters","title":"Parameters","text":"<p>size : int or tuple of ints, optional     The number of samples to generate. If the shape is (m, n, k), then m * n * k samples are drawn. If size is None (the default), a single value is returned if <code>diameters</code> is a scalar, otherwise an array of samples is returned with the same size as <code>diameters</code>. rng : numpy.random.Generator, optional     An instance of a random number generator compatible with numpy's random generators. If not provided, <code>default_rng</code> is used to create a new instance.     </p>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_impact_angle--returns","title":"Returns","text":"<p>np.float64 or ndarray of np.float 64      A scalar or array of impact angles (in degrees).</p> Source code in <code>cratermaker/utils/montecarlo.py</code> <pre><code>def get_random_impact_angle(\n                            size: int | Tuple[int, ...]=1, \n                            rng: Generator | None=None\n                            ) -&gt; Union[np.float64,NDArray[np.float64]]:\n    \"\"\"\n    Sample impact angles from a distribution centered on 45deg.\n\n    For the theory, see Shoemaker (1962) \"Interpretation of lunar craters.\"\n\n    Parameters \n    ----------\n    size : int or tuple of ints, optional\n        The number of samples to generate. If the shape is (m, n, k), then m * n * k samples are drawn. If size is None (the default), a single value is returned if `diameters` is a scalar, otherwise an array of samples is returned with the same size as `diameters`.\n    rng : numpy.random.Generator, optional\n        An instance of a random number generator compatible with numpy's random generators. If not provided, `default_rng` is used to create a new instance.     \n\n    Returns\n    ----------\n    np.float64 or ndarray of np.float 64 \n        A scalar or array of impact angles (in degrees).\n    \"\"\"    \n\n    if rng and not isinstance(rng, Generator):\n        raise TypeError(\"The 'rng' argument must be a numpy.random.Generator instance or None\")\n    if rng is None:\n        rng = np.random.default_rng() \n\n    u = np.sqrt(rng.uniform(size=size))\n    impact_angle = np.arcsin(u)\n    if size == 1:\n        return np.rad2deg(impact_angle[0])\n    else:\n        return np.rad2deg(impact_angle)\n</code></pre>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_location","title":"<code>get_random_location(size=1, rng=None)</code>","text":"<p>Computes random longitude and latitude values.</p> <p>Generates a set of latitude and longitude values that are uniformly distributed on the surface of a sphere.</p>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_location--parameters","title":"Parameters","text":"<p>size : int or tuple of ints, optional     The number of samples to generate. If the shape is (m, n, k), then m * n * k samples are drawn. If size is None (the default), a single value is returned if <code>diameters</code> is a scalar, otherwise an array of samples is returned with the same size as <code>diameters</code>. rng : numpy.random.Generator, optional     An instance of a random number generator compatible with numpy's random generators. If not provided, <code>default_rng</code> is used to create a new instance.</p>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_location--returns","title":"Returns","text":"<p>(lon,lat) or ndarray[(lon,lat)] of given size     A pair or array of pairs of longitude and latitude values in degrees.</p> Source code in <code>cratermaker/utils/montecarlo.py</code> <pre><code>def get_random_location(\n                        size: int | Tuple[int, ...]=1, \n                        rng: Generator | None=None\n                        ) -&gt; Union[np.float64, Tuple[np.float64, np.float64], ArrayLike]:\n    \"\"\"\n    Computes random longitude and latitude values.\n\n    Generates a set of latitude and longitude values that are uniformly distributed on the surface of a sphere.\n\n    Parameters\n    ----------\n    size : int or tuple of ints, optional\n        The number of samples to generate. If the shape is (m, n, k), then m * n * k samples are drawn. If size is None (the default), a single value is returned if `diameters` is a scalar, otherwise an array of samples is returned with the same size as `diameters`.\n    rng : numpy.random.Generator, optional\n        An instance of a random number generator compatible with numpy's random generators. If not provided, `default_rng` is used to create a new instance.\n\n    Returns\n    -------\n    (lon,lat) or ndarray[(lon,lat)] of given size\n        A pair or array of pairs of longitude and latitude values in degrees.\n    \"\"\"\n\n    if rng and not isinstance(rng, Generator):\n        raise TypeError(\"The 'rng' argument must be a numpy.random.Generator instance or None\")\n    if rng is None:\n        rng = np.random.default_rng() \n\n    u = rng.uniform(size=size)\n    v = rng.uniform(size=size)\n\n    # Compute the angles theta and phi\n    theta = 2 * np.pi * u\n    phi = np.arccos(2 * v - 1)\n\n    # Convert to lon/lat\n    lon = np.rad2deg(theta - np.pi) # Use the convention that longitude is in the range [-180, 180]\n    lat = np.rad2deg(phi - np.pi / 2.0)\n\n    if size == 1: \n        return (np.float64(lon.item()),np.float64(lat.item()))\n    else:\n        # Reshape lat and lon to the original size if necessary\n        lon = lon.reshape(size)\n        lat = lat.reshape(size)\n\n        # Combine lat and lon into a structured array\n        lonlat_arr = np.empty(size, dtype=[('lon', 'float'), ('lat', 'float')])\n        lonlat_arr['lon'] = lon\n        lonlat_arr['lat'] = lat\n\n    return lonlat_arr\n</code></pre>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_size","title":"<code>get_random_size(diameters, cdf, size=None, mu=None, rng=None)</code>","text":"<p>Sample diameters from a cumulative size-frequency distribution (SFD).</p> <p>Given an array of diameters and optionally a cumulative distribution function (CDF), this function generates new diameter values that follow the specified distribution. The SFD is treated as a continuous function that interpolates between the provided diameters, which are assumed to represent a power-law distribution.</p>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_size--parameters","title":"Parameters","text":"<p>diameters : array_like     An array of diameters from which the SFD is constructed. Must be 1-dimensional. cdf : array_like     The cumulative distribution function corresponding to <code>diameters</code>. Must be the same size as <code>diameters</code> and must be monotonically increasing with decreasing diameter value. size : int or tuple of ints, optional     The number of samples to generate. If the shape is (m, n, k), then m * n * k samples are drawn. If size is None and mu is None then a single value is returned. Note: mu and size are mutually exclusive.  mu : int or tuple of ints, optional     The expected number of samples to generate using a Poisson random number genertor. If the shape is (m, n, k), then m * n * k samples are drawn. Note: mu and size are mutually exclusive.  rng : numpy.random.Generator, optional     An instance of a random number generator compatible with numpy's random generators. If not provided, <code>default_rng</code> is used to create a new instance.</p>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_size--returns","title":"Returns","text":"<p>np.float64 or ndarray of np.float 64      A scalar or array of sampled diameter values from the SFD. </p>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_size--notes","title":"Notes","text":"<p>The SFD is assumed to be a continuous distribution that follows a power-law between the provided discrete diameter values. Linear interpolation in log-space is used to sample new values between the known diameters. A small amount of random noise (of the order 1e-3 the diameter value) is added to the final diameter value to ensure that diameter values are unlikely to be identical, even when an input CDF could lead to identical diameter values.</p>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_size--examples","title":"Examples","text":"<p>diameters = np.array([100.,  56.,  32.,  18.,  10.]) ncumul = np.array([1.  , 0.51, 0.21, 0.06, 0.01]) sample_from_sfd(diameters, cdf=ncumul, size=4) array([14.80803668, 44.95292261, 29.80797715, 23.11082091])</p>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_size--see-also","title":"See Also","text":"<p>numpy.random.Generator : The numpy random generator class used for random sampling.</p> Source code in <code>cratermaker/utils/montecarlo.py</code> <pre><code>def get_random_size(diameters: NDArray[np.float64], \n                    cdf: NDArray[np.float64], \n                    size: int | Tuple[int, ...] | None = None, \n                    mu: int | Tuple[int, ...] | None = None,\n                    rng: Generator | None=None\n                    ) -&gt; Union[np.float64,NDArray[np.float64]]:\n    \"\"\"\n    Sample diameters from a cumulative size-frequency distribution (SFD).\n\n    Given an array of diameters and optionally a cumulative distribution function (CDF), this function generates new diameter values that follow the specified distribution. The SFD is treated as a continuous function that interpolates between the provided diameters, which are assumed to represent a power-law distribution.\n\n    Parameters\n    ----------\n    diameters : array_like\n        An array of diameters from which the SFD is constructed. Must be 1-dimensional.\n    cdf : array_like\n        The cumulative distribution function corresponding to `diameters`. Must be the same size as `diameters` and must be monotonically increasing with decreasing diameter value.\n    size : int or tuple of ints, optional\n        The number of samples to generate. If the shape is (m, n, k), then m * n * k samples are drawn. If size is None and mu is None then a single value is returned. Note: mu and size are mutually exclusive. \n    mu : int or tuple of ints, optional\n        The expected number of samples to generate using a Poisson random number genertor. If the shape is (m, n, k), then m * n * k samples are drawn. Note: mu and size are mutually exclusive. \n    rng : numpy.random.Generator, optional\n        An instance of a random number generator compatible with numpy's random generators. If not provided, `default_rng` is used to create a new instance.\n\n    Returns\n    -------\n    np.float64 or ndarray of np.float 64 \n        A scalar or array of sampled diameter values from the SFD. \n\n    Notes\n    -----\n    The SFD is assumed to be a continuous distribution that follows a power-law between the provided discrete diameter values. Linear interpolation in log-space is used to sample new values between the known diameters.\n    A small amount of random noise (of the order 1e-3 the diameter value) is added to the final diameter value to ensure that diameter values are unlikely to be identical, even when an input CDF could lead to identical diameter values.\n\n    Examples\n    --------\n    &gt;&gt;&gt; diameters = np.array([100.,  56.,  32.,  18.,  10.])\n    &gt;&gt;&gt; ncumul = np.array([1.  , 0.51, 0.21, 0.06, 0.01])\n    &gt;&gt;&gt; sample_from_sfd(diameters, cdf=ncumul, size=4)\n    array([14.80803668, 44.95292261, 29.80797715, 23.11082091])\n\n    See Also\n    --------\n    numpy.random.Generator : The numpy random generator class used for random sampling.\n\n    \"\"\"\n\n    # Check if rng has 'uniform' method which is a characteristic of numpy's random generator objects and use that to generate our values\n    if rng and not isinstance(rng, Generator):\n        raise TypeError(\"The 'rng' argument must be a numpy.random.Generator instance or None\")\n    if rng is None:\n        rng = np.random.default_rng() \n\n    # Check that the shapes and sizes of diameters and cdf are compatible\n    if np.isscalar(diameters) or np.isscalar(cdf):\n        raise ValueError(\"The 'diameters' and 'cdf' arguments must be arrays\")\n    if diameters.ndim != 1:\n        raise ValueError(\"The 'diameters' argument must be a 1-dimensional array\")\n    if diameters.shape != cdf.shape:\n        raise ValueError(\"The 'diameters' and 'cdf' arguments must have the same shape\")\n    if diameters.size != cdf.size:\n        raise ValueError(\"The 'diameters' and 'cdf' arguments must have the same size\")\n    if diameters.size &lt; 2:\n        raise ValueError(\"The 'diameters' and 'cdf' arguments must have at least two elements\")\n    if np.any(diameters &lt;= 0.0):\n        raise ValueError(\"All values in the 'diameters' argument must be positive\")\n    if np.any(cdf &lt;= 0.0):\n        raise ValueError(\"All values in the 'cdf' argument must be positive\")\n    if size is None and mu is None:\n        size = 1\n    elif size is not None and mu is not None:\n        raise ValueError(\"The 'size' and 'mu' arguments are mutually exclusive\")\n    elif size is None and mu is not None:\n        size = rng.poisson(mu) \n\n    # Sort the diameters in descending order and get the cumulative distribution if it was not supplied\n    sorted_indices = np.argsort(diameters)[::-1]\n    sorted_diameters = diameters[sorted_indices]\n    sorted_cdf = cdf[sorted_indices]\n\n    # Check to make sure that the CDF is correctly specified so that as diameter is decreasing it is monotonically increasing\n    is_monotonic_increasing = np.all(np.diff(sorted_cdf) &gt;= 0)\n    if not is_monotonic_increasing:\n        raise ValueError(\"The CDF must be monotonically increasing with decreasing diameter.\")\n\n    # Normalize the cdf and put it in logspace\n    sorted_cdf /= sorted_cdf[-1]\n    log_sorted_cdf = np.log(sorted_cdf)\n\n    # Generate uniform random numbers for the entire sample size\n    u = rng.uniform(low=sorted_cdf[0], high=sorted_cdf[-1], size=size)\n    u = np.log(u)\n\n    # Handle the situation where u is a scalar (size is None and diameters is a scalar)\n    if np.isscalar(u):\n        u = np.array([u])\n\n    # Flatten u to work with it as a 1D array\n    original_shape = u.shape\n    u = u.flatten()     \n\n    # Find the indices where the random numbers would be inserted to maintain order\n    # Use the right side of the interval to avoid edge effects for when u == sorted_cdf[0]\n    # Because rng.uniform returns values in the half-open interval [sorted_cdf[0], sorted_cdf[-1]), u will never be exactly equal to sorted_cdf[-1]\n    indices = np.searchsorted(log_sorted_cdf, u, side=\"right\")\n\n    # Initialize the new_diameters array\n    new_diameters = np.empty(u.shape)\n\n    log_diam_low = np.log(sorted_diameters[indices-1])\n    log_diam_high = np.log(sorted_diameters[indices])\n    log_nval_low = log_sorted_cdf[indices-1]\n    log_nval_high = log_sorted_cdf[indices]\n\n    fractions = (u - log_nval_low) / (log_nval_high - log_nval_low)\n    log_diam_interp = log_diam_low + fractions * (log_diam_high - log_diam_low)\n    new_diameters = np.exp(log_diam_interp)\n\n    # Reshape new_diameters to the original shape of u\n    new_diameters = new_diameters.reshape(original_shape)\n\n    # Add a small random noise to the diameters\n    noise = 1e-8 * rng.uniform(size=new_diameters.shape)\n    new_diameters *= (1 + noise)\n    if size == 1:\n        return new_diameters[0]\n    else:\n        return new_diameters\n</code></pre>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_velocity","title":"<code>get_random_velocity(vmean, size=1, rng=None)</code>","text":"<p>Sample impact velocities from a Maxwell-Boltzmann distribution given a mean velocity.</p>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_velocity--parameters","title":"Parameters","text":"<p>vmean : np.float64     The mean velocity of the distribution. size : int or tuple of ints, optional     The number of samples to generate. If the shape is (m, n, k), then m * n * k samples are drawn. If size is None (the default), a single value is returned if <code>diameters</code> is a scalar, otherwise an array of samples is returned with the same size as <code>diameters</code>. rng : numpy.random.Generator, optional     An instance of a random number generator compatible with numpy's random generators. If not provided, <code>default_rng</code> is used to create a new instance.    </p>"},{"location":"api/montecarlo/#cratermaker.utils.montecarlo.get_random_velocity--returns","title":"Returns","text":"<p>ndarray      An array of impact velocities (in m/s).</p> Source code in <code>cratermaker/utils/montecarlo.py</code> <pre><code>def get_random_velocity(\n                        vmean: np.float64, \n                        size: int | Tuple[int, ...]=1, \n                        rng: Generator | None=None\n                        ) -&gt; Union[np.float64,NDArray[np.float64]]:\n    \"\"\"\n    Sample impact velocities from a Maxwell-Boltzmann distribution given a mean velocity.\n\n    Parameters \n    ----------\n    vmean : np.float64\n        The mean velocity of the distribution.\n    size : int or tuple of ints, optional\n        The number of samples to generate. If the shape is (m, n, k), then m * n * k samples are drawn. If size is None (the default), a single value is returned if `diameters` is a scalar, otherwise an array of samples is returned with the same size as `diameters`.\n    rng : numpy.random.Generator, optional\n        An instance of a random number generator compatible with numpy's random generators. If not provided, `default_rng` is used to create a new instance.    \n\n    Returns\n    ----------\n    ndarray \n        An array of impact velocities (in m/s).\n    \"\"\"\n\n    # Check if rng has 'uniform' method which is a characteristic of numpy's random generator objects and use that to generate our values\n    if rng and hasattr(rng, 'normal'):\n        pass\n    elif rng is None:  # Just use the basic normal random number generator\n        rng = np.random.default_rng()\n    else:\n        raise TypeError(\"The 'rng' argument must be a compatible with numpy random generator or None\")\n\n    sigma = vmean / np.sqrt(8/np.pi)\n\n    vx = rng.normal(0, sigma, size=size)\n    vy = rng.normal(0, sigma, size=size)\n    vz = rng.normal(0, sigma, size=size)\n    velocities = np.sqrt(vx**2 + vy**2 + vz**2)\n\n    if size == 1:\n        return velocities[0]\n    else:\n        return velocities\n</code></pre>"},{"location":"api/morphology/","title":"Morphology Module","text":""},{"location":"api/morphology/#cratermaker.core.morphology.Morphology","title":"<code>Morphology</code>","text":"<p>An operations class for computing the morphology of a crater based on its size and target properties.</p> <p>This class encapsulates the logic for altering the topography of the surface based on the crater properties.</p>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology--parameters","title":"Parameters","text":"<p>crater : Crater     The crater to be created. target : Target     The target body for the impact simulation. surf : Surface     The surface to be altered. rng : Generator, optional     A random number generator instance. If not provided, the default numpy RNG will be used.</p> Source code in <code>cratermaker/core/morphology.py</code> <pre><code>class Morphology:\n    \"\"\"\n    An operations class for computing the morphology of a crater based on its size and target properties.\n\n    This class encapsulates the logic for altering the topography of the surface based on the crater properties.\n\n    Parameters\n    ----------\n    crater : Crater\n        The crater to be created.\n    target : Target\n        The target body for the impact simulation.\n    surf : Surface\n        The surface to be altered.\n    rng : Generator, optional\n        A random number generator instance. If not provided, the default numpy RNG will be used.\n    \"\"\"\n\n    def __init__(self, crater, target=None, rng=None) -&gt; None:\n        from .crater import Crater\n\n        if isinstance(crater, Crater):\n            self.crater = crater\n        else:\n            raise TypeError(\"crater must be an instance of Crater\")\n\n        if target is None:\n            target = Target(name=\"Moon\")\n        elif isinstance(target, Target):\n            self.target = target\n        elif isinstance(target, str):\n            self.target = Target(name=target)\n        else:\n            raise TypeError(\"target must be an instance of Target or a name of a known target body\") \n\n        if rng is None:\n            rng = np.random.default_rng()\n        elif not isinstance(rng, Generator):\n            raise TypeError(\"The 'rng' argument must be a numpy.random.Generator instance or None\")\n\n        self.rimheight = None\n        self.rimwidth = None\n        self.floordepth = None\n        self.floordiam = None\n\n        # Set the morphology based on crater type\n        self.set_morphology_parameters()        \n\n    def __repr__(self):\n        return (f\"Morphology(morphology_type={self.morphology_type}, diameter={self.diameter}, \"\n                f\"rimheight: {self.rimheight}, rimwidth: {self.rimwidth}, floordepth: {self.floordepth}, floordiam: {self.floordiam})\") \n\n    def set_morphology_parameters(self):\n        \"\"\"\n        Sets the morphology parameters based on the crater type.\n        \"\"\"\n        diameter_km = self.diameter * 1e-3  # Convert to km for these models\n\n        if self.morphology_type in [\"simple\", \"transition\"]:\n            # A hybrid model between Pike (1977) and Fassett &amp; Thomson (2014)\n            self.rimheight = 0.043 * diameter_km**1.014 * 1e3  # Closer to Fassett &amp; Thomson\n            self.rimwidth = 0.257 * diameter_km**1.011 * 1e3   # Pike model\n            self.floordepth = 0.224 * diameter_km**1.010 * 1e3 # Closer to Fassett &amp; Thomson\n            self.floordiam = 0.200 * diameter_km**1.143 * 1e3  # Fassett &amp; Thomson for D~1km, Pike for D~20km\n\n        elif self.morphology_type in [\"complex\", \"peakring\", \"multiring\"]:\n            # Following Pike (1977)\n            self.rimheight = 0.236 * diameter_km**0.399 * 1e3  # Pike model\n            self.rimwidth = 0.467 * diameter_km**0.836 * 1e3   # Pike model\n            self.floordepth = 1.044 * diameter_km**0.301 * 1e3 # Pike model\n            # Fassett &amp; Thomson for D~1km, Pike for D~20km, but limited to 90% of diameter\n            self.floordiam = min(0.187 * diameter_km**1.249 * 1e3, 0.9 * self.diameter)\n            self.peakheight = 0.032 * diameter_km**0.900 * 1e3  # Pike model\n\n        self.ejrim = 0.14 * (self.diameter * 0.5)**(0.74) # McGetchin et al. (1973) Thickness of ejecta at rim\n\n\n    def crater_profile(self, r: FloatLike) -&gt; np.float64:\n        \"\"\"\n        Calculate the elevation of a crater as a function of distance from the center.\n\n        Parameters:\n        ----------\n        r : float-like\n            Radial distance from the crater center in meters.\n        crater: Crater\n            The crater to be created.\n\n        Returns:\n        ----------\n        np.float64\n            Elevation of the crater relative to a reference surface.\n        \"\"\"\n\n        # Constants\n        A = 4.0 / 11.0\n        B = -32.0 / 187.0\n\n        # Calculate the floor radius relative to the final crater radius\n        flrad = self.floordiam / self.diameter\n\n        # Use polynomial crater profile similar to that of Fassett et al. (2014), but the parameters are set by the crater dimensions\n        c1 = (-self.floordepth - self.rimheight) / (flrad - 1.0 + A * (flrad**2 - 1.0) + B * (flrad**3 - 1.0))\n        c0 = self.rimheight - c1 * (1.0 + A + B)\n        c2 = A * c1\n        c3 = B * c1\n\n        r = np.abs(r) / self.radius\n\n        # Compute the height based on the relative radial distance\n        if r &lt; flrad:\n            h = -self.floordepth\n        elif r &gt;= 1.0:\n            h = (self.rimheight - self.ejrim) * (r**(-RIMDROP))\n        else:\n            h = c0 + c1 * r + c2 * r**2 + c3 * r**3\n\n        return h        \n\n\n    def ejecta_profile(self, r: FloatLike) -&gt; np.float64:\n        \"\"\"\n        Calculate the thickness of ejecat as a function of distance from the center of the crater.\n\n        Parameters:\n        ----------\n        r : float-like\n            Radial distance from the crater center in meters.\n        crater: Crater\n            The crater to be created.\n\n        Returns:\n        ----------\n        np.float64\n            Elevation of the crater relative to a reference surface.\n        \"\"\"\n\n        ejprofile = 3.0\n        r = np.abs(r) / self.radius\n        thick = self.ejrim * (r)**(-ejprofile)\n        return thick\n\n    def form_crater(self, surf: Surface) -&gt; None:\n        \"\"\"\n        Form the interior of the crater.\n\n        This method forms the interior of the crater by altering the elevation variable of the surface mesh.\n        \"\"\"\n\n        def _crater_profile(r):\n            h = self.crater_profile(r) \n            if r &gt; self.crater.radius:\n                h += self.ejecta_profile(r)\n            if h &gt; self.floordepth:\n                h = self.floordepth\n            return h\n\n        surf['elevation'] += np.vectorize(_crater_profile)(surf['crater_distance']) \n\n        return  \n\n    @property\n    def diameter(self) -&gt; float:\n        \"\"\"\n        Return the diameter of the crater in meters.\n        \"\"\"\n        return self.crater.diameter\n\n    @property\n    def radius(self) -&gt; float:\n        \"\"\"\n        Return the radius of the crater in meters.\n        \"\"\"\n        return self.crater.radius\n\n    @property \n    def morphology_type(self) -&gt; str:\n        \"\"\"\n        Return the morphology type of the crater.\n        \"\"\"\n        return self.crater.morphology_type \n\n    @property\n    def rimheight(self) -&gt; float:\n        \"\"\"\n        Return the height of the crater rim in meters.\n        \"\"\"\n        return self.crater.rimheight\n\n    @rimheight.setter\n    def rimheight(self, value: FloatLike) -&gt; None:\n        \"\"\"\n        Set the height of the crater rim in meters.\n        \"\"\"\n        self.crater.rimheight = value\n\n    @property\n    def rimwidth(self) -&gt; float:\n        \"\"\"\n        Return the width of the crater rim in meters.\n        \"\"\"\n        return self.crater.rimwidth\n\n    @rimwidth.setter\n    def rimwidth(self, value: FloatLike) -&gt; None:\n        \"\"\"\n        Set the width of the crater rim in meters.\n        \"\"\"\n        self.crater.rimwidth = value\n\n    @property\n    def peakheight(self) -&gt; float:\n        \"\"\"\n        Return the height of the central peak in meters.\n        \"\"\"\n        return self.crater.peakheight\n\n    @peakheight.setter\n    def peakheight(self, value: FloatLike) -&gt; None:\n        \"\"\"\n        Set the height of the central peak in meters.\n        \"\"\"\n        self.crater.peakheight = value\n\n    @property\n    def floordiam(self) -&gt; float:\n        \"\"\"\n        Return the diameter of the crater floor in meters.\n        \"\"\"\n        return self.crater.floordiam\n\n    @floordiam.setter\n    def floordiam(self, value: FloatLike) -&gt; None:\n        \"\"\"\n        Set the diameter of the crater floor in meters.\n        \"\"\"\n        self.crater.floordiam = value\n\n    @property\n    def floordepth(self) -&gt; float:\n        \"\"\"\n        Return the depth of the crater floor in meters.\n        \"\"\"\n        return self.crater.floordepth\n\n    @floordepth.setter\n    def floordepth(self, value: FloatLike) -&gt; None:\n        \"\"\"\n        Set the depth of the crater floor in meters.\n        \"\"\"\n        self.crater.floordepth = value \n\n    @property\n    def ejrim(self) -&gt; float:\n        \"\"\"\n        Return the thickness of ejecta at the rim in meters.\n        \"\"\"\n        return self.crater.ejrim\n\n    @ejrim.setter\n    def ejrim(self, value: FloatLike) -&gt; None:\n        \"\"\"\n        Set the thickness of ejecta at the rim in meters.\n        \"\"\"\n        self.crater.ejrim = value\n</code></pre>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.diameter","title":"<code>diameter: float</code>  <code>property</code>","text":"<p>Return the diameter of the crater in meters.</p>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.ejrim","title":"<code>ejrim: float</code>  <code>property</code> <code>writable</code>","text":"<p>Return the thickness of ejecta at the rim in meters.</p>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.floordepth","title":"<code>floordepth: float</code>  <code>property</code> <code>writable</code>","text":"<p>Return the depth of the crater floor in meters.</p>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.floordiam","title":"<code>floordiam: float</code>  <code>property</code> <code>writable</code>","text":"<p>Return the diameter of the crater floor in meters.</p>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.morphology_type","title":"<code>morphology_type: str</code>  <code>property</code>","text":"<p>Return the morphology type of the crater.</p>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.peakheight","title":"<code>peakheight: float</code>  <code>property</code> <code>writable</code>","text":"<p>Return the height of the central peak in meters.</p>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.radius","title":"<code>radius: float</code>  <code>property</code>","text":"<p>Return the radius of the crater in meters.</p>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.rimheight","title":"<code>rimheight: float</code>  <code>property</code> <code>writable</code>","text":"<p>Return the height of the crater rim in meters.</p>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.rimwidth","title":"<code>rimwidth: float</code>  <code>property</code> <code>writable</code>","text":"<p>Return the width of the crater rim in meters.</p>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.__init__","title":"<code>__init__(crater, target=None, rng=None)</code>","text":"Source code in <code>cratermaker/core/morphology.py</code> <pre><code>def __init__(self, crater, target=None, rng=None) -&gt; None:\n    from .crater import Crater\n\n    if isinstance(crater, Crater):\n        self.crater = crater\n    else:\n        raise TypeError(\"crater must be an instance of Crater\")\n\n    if target is None:\n        target = Target(name=\"Moon\")\n    elif isinstance(target, Target):\n        self.target = target\n    elif isinstance(target, str):\n        self.target = Target(name=target)\n    else:\n        raise TypeError(\"target must be an instance of Target or a name of a known target body\") \n\n    if rng is None:\n        rng = np.random.default_rng()\n    elif not isinstance(rng, Generator):\n        raise TypeError(\"The 'rng' argument must be a numpy.random.Generator instance or None\")\n\n    self.rimheight = None\n    self.rimwidth = None\n    self.floordepth = None\n    self.floordiam = None\n\n    # Set the morphology based on crater type\n    self.set_morphology_parameters()        \n</code></pre>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.crater_profile","title":"<code>crater_profile(r)</code>","text":"<p>Calculate the elevation of a crater as a function of distance from the center.</p>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.crater_profile--parameters","title":"Parameters:","text":"<p>r : float-like     Radial distance from the crater center in meters. crater: Crater     The crater to be created.</p>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.crater_profile--returns","title":"Returns:","text":"<p>np.float64     Elevation of the crater relative to a reference surface.</p> Source code in <code>cratermaker/core/morphology.py</code> <pre><code>def crater_profile(self, r: FloatLike) -&gt; np.float64:\n    \"\"\"\n    Calculate the elevation of a crater as a function of distance from the center.\n\n    Parameters:\n    ----------\n    r : float-like\n        Radial distance from the crater center in meters.\n    crater: Crater\n        The crater to be created.\n\n    Returns:\n    ----------\n    np.float64\n        Elevation of the crater relative to a reference surface.\n    \"\"\"\n\n    # Constants\n    A = 4.0 / 11.0\n    B = -32.0 / 187.0\n\n    # Calculate the floor radius relative to the final crater radius\n    flrad = self.floordiam / self.diameter\n\n    # Use polynomial crater profile similar to that of Fassett et al. (2014), but the parameters are set by the crater dimensions\n    c1 = (-self.floordepth - self.rimheight) / (flrad - 1.0 + A * (flrad**2 - 1.0) + B * (flrad**3 - 1.0))\n    c0 = self.rimheight - c1 * (1.0 + A + B)\n    c2 = A * c1\n    c3 = B * c1\n\n    r = np.abs(r) / self.radius\n\n    # Compute the height based on the relative radial distance\n    if r &lt; flrad:\n        h = -self.floordepth\n    elif r &gt;= 1.0:\n        h = (self.rimheight - self.ejrim) * (r**(-RIMDROP))\n    else:\n        h = c0 + c1 * r + c2 * r**2 + c3 * r**3\n\n    return h        \n</code></pre>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.ejecta_profile","title":"<code>ejecta_profile(r)</code>","text":"<p>Calculate the thickness of ejecat as a function of distance from the center of the crater.</p>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.ejecta_profile--parameters","title":"Parameters:","text":"<p>r : float-like     Radial distance from the crater center in meters. crater: Crater     The crater to be created.</p>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.ejecta_profile--returns","title":"Returns:","text":"<p>np.float64     Elevation of the crater relative to a reference surface.</p> Source code in <code>cratermaker/core/morphology.py</code> <pre><code>def ejecta_profile(self, r: FloatLike) -&gt; np.float64:\n    \"\"\"\n    Calculate the thickness of ejecat as a function of distance from the center of the crater.\n\n    Parameters:\n    ----------\n    r : float-like\n        Radial distance from the crater center in meters.\n    crater: Crater\n        The crater to be created.\n\n    Returns:\n    ----------\n    np.float64\n        Elevation of the crater relative to a reference surface.\n    \"\"\"\n\n    ejprofile = 3.0\n    r = np.abs(r) / self.radius\n    thick = self.ejrim * (r)**(-ejprofile)\n    return thick\n</code></pre>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.form_crater","title":"<code>form_crater(surf)</code>","text":"<p>Form the interior of the crater.</p> <p>This method forms the interior of the crater by altering the elevation variable of the surface mesh.</p> Source code in <code>cratermaker/core/morphology.py</code> <pre><code>def form_crater(self, surf: Surface) -&gt; None:\n    \"\"\"\n    Form the interior of the crater.\n\n    This method forms the interior of the crater by altering the elevation variable of the surface mesh.\n    \"\"\"\n\n    def _crater_profile(r):\n        h = self.crater_profile(r) \n        if r &gt; self.crater.radius:\n            h += self.ejecta_profile(r)\n        if h &gt; self.floordepth:\n            h = self.floordepth\n        return h\n\n    surf['elevation'] += np.vectorize(_crater_profile)(surf['crater_distance']) \n\n    return  \n</code></pre>"},{"location":"api/morphology/#cratermaker.core.morphology.Morphology.set_morphology_parameters","title":"<code>set_morphology_parameters()</code>","text":"<p>Sets the morphology parameters based on the crater type.</p> Source code in <code>cratermaker/core/morphology.py</code> <pre><code>def set_morphology_parameters(self):\n    \"\"\"\n    Sets the morphology parameters based on the crater type.\n    \"\"\"\n    diameter_km = self.diameter * 1e-3  # Convert to km for these models\n\n    if self.morphology_type in [\"simple\", \"transition\"]:\n        # A hybrid model between Pike (1977) and Fassett &amp; Thomson (2014)\n        self.rimheight = 0.043 * diameter_km**1.014 * 1e3  # Closer to Fassett &amp; Thomson\n        self.rimwidth = 0.257 * diameter_km**1.011 * 1e3   # Pike model\n        self.floordepth = 0.224 * diameter_km**1.010 * 1e3 # Closer to Fassett &amp; Thomson\n        self.floordiam = 0.200 * diameter_km**1.143 * 1e3  # Fassett &amp; Thomson for D~1km, Pike for D~20km\n\n    elif self.morphology_type in [\"complex\", \"peakring\", \"multiring\"]:\n        # Following Pike (1977)\n        self.rimheight = 0.236 * diameter_km**0.399 * 1e3  # Pike model\n        self.rimwidth = 0.467 * diameter_km**0.836 * 1e3   # Pike model\n        self.floordepth = 1.044 * diameter_km**0.301 * 1e3 # Pike model\n        # Fassett &amp; Thomson for D~1km, Pike for D~20km, but limited to 90% of diameter\n        self.floordiam = min(0.187 * diameter_km**1.249 * 1e3, 0.9 * self.diameter)\n        self.peakheight = 0.032 * diameter_km**0.900 * 1e3  # Pike model\n\n    self.ejrim = 0.14 * (self.diameter * 0.5)**(0.74) # McGetchin et al. (1973) Thickness of ejecta at rim\n</code></pre>"},{"location":"api/production/","title":"Production Module","text":""},{"location":"api/production/#cratermaker.core.production.NeukumProduction","title":"<code>NeukumProduction</code>","text":"<p>             Bases: <code>Production</code></p> <p>An operations class for computing the the Neukum production function for the Moon and Mars.</p>"},{"location":"api/production/#cratermaker.core.production.NeukumProduction--parameters","title":"Parameters","text":"<p>model : {\"Moon\", \"Mars\", \"Projectile\"}, optional     The specific model to use for the production function. \"Moon\" and \"Mars\" are both crater production functions, and     \"Projectile\" is a projectile function. Defaults to \"Moon\". rng : Generator, optional     A random number generator instance. If not provided, the default numpy RNG will be used. **kwargs : Any     Includes arguments that were called from the parent class. These are not used in this class.</p>"},{"location":"api/production/#cratermaker.core.production.NeukumProduction--notes","title":"Notes","text":"<p>The CSFD is computed using the model of Ivanov, Neukum, and Hartmann (2001) SSR v. 96 pp. 55-86 for the Moon and Mars, with  minor changes. Notably, there is a typo in the chronology function (Eq. 5) of the original paper. The linear term in the paper is given as 8.38e-4. The value should be 10^(a0), and therefore the number given in the paper is based on the \"Old\" coefficients from Neukum (1983). The correct value is 10^(-3.0876) = 8.17e-4. We compute the value from the coefficients  in our implementation of the chronology function.       </p>"},{"location":"api/production/#cratermaker.core.production.NeukumProduction--references","title":"References","text":"<p>Lunar PF from: Neukum, G., Ivanov, B.A., Hartmann, W.K., 2001. Cratering Records in the Inner Solar System in Relation to      the Lunar Reference System. Space Science Reviews 96, 55\u201386. https://doi.org/10.1023/A:1011989004263 Mars PF from: Ivanov, B.A., 2001. Mars/Moon Cratering Rate Ratio Estimates. Space Science Reviews 96, 87\u2013104.     https://doi.org/10.1023/A:1011941121102 Projectile PF from: Ivanov, B.A., Neukum, G., Wagner, R., 2001. Size-Frequency Distributions of Planetary Impact Craters      and Asteroids, in: Collisional Processes in the Solar System. Springer Netherlands, Dordrecht, pp. 1\u201334.      https://doi.org/10.1007/978-94-010-0712-2_1</p> Source code in <code>cratermaker/core/production.py</code> <pre><code>class NeukumProduction(Production):\n    \"\"\"\n    An operations class for computing the the Neukum production function for the Moon and Mars.\n\n    Parameters\n    ----------\n    model : {\"Moon\", \"Mars\", \"Projectile\"}, optional\n        The specific model to use for the production function. \"Moon\" and \"Mars\" are both crater production functions, and\n        \"Projectile\" is a projectile function. Defaults to \"Moon\".\n    rng : Generator, optional\n        A random number generator instance. If not provided, the default numpy RNG will be used.\n    **kwargs : Any\n        Includes arguments that were called from the parent class. These are not used in this class.\n\n    Notes\n    ----- \n    The CSFD is computed using the model of Ivanov, Neukum, and Hartmann (2001) SSR v. 96 pp. 55-86 for the Moon and Mars, with \n    minor changes. Notably, there is a typo in the chronology function (Eq. 5) of the original paper. The linear term in the paper\n    is given as 8.38e-4. The value should be 10^(a0), and therefore the number given in the paper is based on the \"Old\"\n    coefficients from Neukum (1983). The correct value is 10^(-3.0876) = 8.17e-4. We compute the value from the coefficients \n    in our implementation of the chronology function.       \n\n    References\n    ---------- \n    Lunar PF from: Neukum, G., Ivanov, B.A., Hartmann, W.K., 2001. Cratering Records in the Inner Solar System in Relation to \n        the Lunar Reference System. Space Science Reviews 96, 55\u201386. https://doi.org/10.1023/A:1011989004263\n    Mars PF from: Ivanov, B.A., 2001. Mars/Moon Cratering Rate Ratio Estimates. Space Science Reviews 96, 87\u2013104.\n        https://doi.org/10.1023/A:1011941121102\n    Projectile PF from: Ivanov, B.A., Neukum, G., Wagner, R., 2001. Size-Frequency Distributions of Planetary Impact Craters \n        and Asteroids, in: Collisional Processes in the Solar System. Springer Netherlands, Dordrecht, pp. 1\u201334. \n        https://doi.org/10.1007/978-94-010-0712-2_1\n    \"\"\"\n\n    def set_model_parameters(self, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Set the parameters for Neukum production. This will set the following attributes based on the value of the keyword argument\n        `model`, which is either \"Moon\", \"Mars\", or \"Projectile\".\n\n        - sfd_coef : the coefficients for the size-frequency distribution function (See Table 1 of Neukum et al. 2001)\n        - sfd_range : the range of diameters over which the size-frequency distribution function is valid \n        - valid_time : the range of ages over which the chronology function is valid\n        - tau : the time constant for the chronology function (See Eq. 5 of Neukum et al. 2001)\n        - Cexp : the coefficient for the exponential componenbt of the chronology function (See Eq. 5 of Neukum et al. 2001)\n        - Clin : the coefficient for the linear component of the chronology function (See Eq. 5 of Neukum et al. 2001, but our implementation corrects the typo in that expression)\n\n        Parameters\n        ----------\n        **kwargs : Any\n            This function accepts the following keyword arguments:\n\n            model : str, {\"Moon\", \"Mars\", \"Projectile\"}\n                The specific model to use for the production function. Defaults to \"Moon\" \n        \"\"\"\n        # Set the generator type. For the default generator, it can be either \"crater\" or \"projectile\" \n        if not hasattr(self, \"valid_models\"):\n            self.valid_models = [\"Moon\", \"Mars\", \"Projectile\"]\n        model = kwargs.get(\"model\", \"Moon\")\n        self.model = self._validate_model(model)   \n\n        if self.model == \"Projectile\":\n            self.generator_type = \"projectile\"\n        else:\n            self.generator_type = \"crater\"\n\n        sfd_coef = {\n                \"Moon\" : np.array(\n                    [\n                        -3.0876,\n                        -3.557528,\n                        +0.781027,\n                        +1.021521,\n                        -0.156012,\n                        -0.444058,\n                        +0.019977,\n                        +0.086850,\n                        -0.005874,\n                        -0.006809,\n                        +8.25e-4, \n                        +5.54e-5\n                    ]),\n                \"Mars\" : np.array(\n                    [\n                        -3.384, \n                        -3.197,\n                        +1.257,\n                        +0.7915,\n                        -0.4861,\n                        -0.3630,\n                        +0.1016,\n                        +6.756e-2,\n                        -1.181e-2,\n                        -4.753e-3,\n                        +6.233e-4,\n                        +5.805e-5\n                    ]),\n                \"Projectile\" : np.array(\n                    [\n                        0,\n                        +1.375458,\n                        +1.272521e-1,\n                        -1.282166,\n                        -3.074558e-1,\n                        +4.149280e-1,\n                        +1.910668e-1,\n                        -4.260980e-2,\n                        -3.976305e-2,\n                        -3.180179e-3,\n                        +2.799369e-3,\n                        +6.892223e-4,\n                        +2.614385e-6,\n                        -1.416178e-5,\n                        -1.191124e-6\n                    ]\n                )\n            }\n        self.sfd_coef = sfd_coef[self.model]\n        sfd_range = {\n                \"Moon\" : np.array([0.01,1000]),\n                \"Mars\" : np.array([0.015,362]),\n                \"Projectile\" : np.array([0.0001, 200.0]) # Estimated based on Fig. 16 of Ivanov et al. (2001)\n            }\n        self.sfd_range = sfd_range[self.model]\n\n        # Chronology function parameters\n        self.valid_time = (0,4500)  # Range over which the production function is valid\n        self.tau = 1.0 / 6.93\n        Cexp_moon = 5.44e-14\n        Clin = {\n                \"Moon\" : 10**(sfd_coef.get(\"Moon\")[0]),\n                \"Mars\" : 10**(sfd_coef.get(\"Mars\")[0]),\n                \"Projectile\": 10**(sfd_coef.get(\"Projectile\")[0]),\n        }\n        Cexp = {\n                \"Moon\" : Cexp_moon,\n                \"Mars\" : Cexp_moon * Clin[\"Mars\"] / Clin[\"Moon\"],\n                \"Projectile\": Cexp_moon * Clin[\"Projectile\"] / Clin[\"Moon\"],\n            }   \n        self.Cexp = Cexp[self.model]\n        self.Clin = Clin[self.model]\n\n\n    def function(self,\n             diameter: FloatLike | Sequence[FloatLike] | ArrayLike = 1.0,\n             age: FloatLike | Sequence[FloatLike] | ArrayLike = 1.0,\n             reference_age: FloatLike | Sequence[FloatLike] | ArrayLike | None = None,\n             check_valid_time: bool=True,\n             **kwargs: Any,\n             ) -&gt; Union[FloatLike, ArrayLike]:\n        \"\"\"\n        Return the cumulative size-frequency distribution of craters over a given age range and crater diameter.\n\n        Parameters\n        ----------\n        diameter : FloatLike or numpy array\n            Crater diameter(s) in units of meters to compute corresponding cumulative number density value.\n        age : FloatLike or ArrayLike, default=1.0\n            Age in the past relative to the reference age to compute cumulative SFD in units of My. \n        reference_age, FloatLike or ArrayLike, optional\n            The reference used when computing age in My. The default is 0 (present day). If a non-zero value is passed, the `age` is \n            interpreted as a delta on the reference age. So for instance, if `age=500` and `reference_age=3500`, then this means \n            \"4.0 Gy to 3.5 Gy ago\". \n        check_valid_time : bool, optional (default=True)\n            If True, return NaN for age values outside the valid age range\n\n        Returns\n        -------\n        FloatLike or numpy array of FloatLike\n            The cumulative number of craters per square meter greater than the input diameter that would be expected to form on a \n            surface over the given age range.\n        \"\"\"\n        age, reference_age = self._validate_age(age, reference_age) \n        diameter, _ = self._validate_csfd(diameter=diameter)\n\n        return self._size_frequency_distribution(diameter) * (self._chronology(reference_age + age,check_valid_time) - self._chronology(reference_age,check_valid_time))\n\n\n    def _chronology(self,\n             age: FloatLike | Sequence[FloatLike] | ArrayLike = 1.0,\n             check_valid_time: bool=True\n             ) -&gt; Union[FloatLike, ArrayLike]:\n        \"\"\"\n        Returns the relative number of craters produced over a given age range. This implements the chronology function given in\n        Eq. 5 of Ivanov, Neukum, and Hartmann (2001) SSR v. 96 pp. 55-86, but takes in the age argument in the Cratermaker unit \n        system of My instead of Gy. The returned value is normalized to the number of craters greater than 1 km in diameter at the\n        reference time of 1 Gy. \n\n        Parameters\n        ----------\n        age : FloatLike or ArrayLike, default=1.0\n            Age in the past relative to the present day to compute cumulative SFD in units of My. \n        check_valid_time : bool, optional (default=True)\n            If True, return NaN for age values outside the valid age range\n\n        Returns\n        -------\n        FloatLike or numpy array of FloatLike\n            The cumulative number of craters per square meter greater than the input diameter that would be expected to form on a \n            surface over the given age range.\n\n        \"\"\"     \n        time_Gy = np.array(age) * 1e-3  # Convert age range from My to Gy ago for internal functions\n\n        def _N1(age: FloatLike | Sequence[FloatLike] | ArrayLike,\n                check_valid_time:bool=True\n                ) -&gt; Union[FloatLike, ArrayLike]:\n            \"\"\"\n            Return the cumulative number of 1 km craters as a function of age in Gy. This is a direct implementation of Eq. 5 in\n            Ivanov, Neukum, and Hartmann (2001) SSR v. 96 pp. 55-86 (with corrected coefficient for the linear term).  \n\n            Parameters\n            ----------\n            age : FloatLike or numpy array\n                Time ago in units of Gy\n            check_valid_time : bool, optional (default=True)\n                If True, return NaN for age values outside the valid age range        \n\n            Returns\n            -------\n            FloatLike or numpy array\n                The number of craters per square kilometer greater than 1 km in diameter\n            \"\"\"\n            N1 = self.Cexp * (np.exp(age/self.tau) - 1.0) + self.Clin * age\n            if check_valid_time:\n                if self.valid_time[0] is not None:\n                    min_time = self.valid_time[0] * 1e-3\n                    N1 = np.where(age &gt;= min_time, N1, np.nan)\n                if self.valid_time[1] is not None:\n                    max_time = self.valid_time[1] * 1e-3\n                    N1 = np.where(age &lt;= max_time, N1, np.nan) \n            return N1.item() if np.isscalar(age) else N1\n\n        N1_reference = _N1(1.0) \n        N1_values = _N1(time_Gy,check_valid_time)\n        N1_values /= N1_reference\n\n        return  N1_values \n\n\n    def _size_frequency_distribution(self,diameter: FloatLike | ArrayLike,) -&gt; Union[FloatLike, ArrayLike]:\n        \"\"\"\n        Return the cumulative size frequency distribution of craters at a given age relative to age = 1 Gy ago per m^2.\n\n        Parameters\n        ----------\n        diameter : FloatLike or ArrayLike\n            Time in units of meter \n\n        Returns\n        -------\n        FloatLike or numpy array\n           Cumulative number density of craters per square meter greater than the input diameter.\n        \"\"\"        \n        def _extrapolate_sfd(side: str = \"lo\") -&gt; Union[FloatLike, ArrayLike]:\n            \"\"\"\n            Return the exponent, p, and and proportionality constant, A, for  the extrapolated \n            CSFD in the form N(D) = A * D**-p. \n\n            Parameters\n            ----------\n            side : str\n                The side of the range to extrapolate. Valid values are \"lo\" and \"hi\"\n\n            Returns\n            -------\n            A, p\n            \"\"\"    \n            if side == \"lo\":\n                idx = 0\n            elif side == \"hi\":\n                idx = 1\n            else:\n                raise ValueError(\"side must be 'lo' or 'hi'\")\n            p = _dNdD(self.sfd_range[idx])\n            A = _CSFD(self.sfd_range[idx])\n            return A, p\n\n\n        def _dNdD(Dkm: FloatLike | Sequence[FloatLike] | ArrayLike) -&gt; Union[FloatLike, ArrayLike]:\n            \"\"\"\n            Return the derivative of the cumulative size-frequency distribution as a function of diameter. For diameter values outside \n            the range of the NPF, the derivative is extrapolated using a power law.\n\n            Parameters\n            ----------\n            Dkm : FloatLike or numpy array\n                diameter in units of km\n\n            Returns\n            -------\n            FloatLike or numpy array\n                The differential number of craters (dN/dD) per square kilometer greater than Dkm in diameter at age = 1 Gy ago.\n            \"\"\"        \n            def _dNdD_scalar(Dkm): \n                dcoef = self.sfd_coef[1:]\n                if Dkm &lt; self.sfd_range[0]:\n                    _extrapolate_sfd(side=\"lo\")\n                    return A * (p / Dkm) * (Dkm / self.sfd_range[0]) ** p \n                elif Dkm &gt; self.sfd_range[1]:\n                    _extrapolate_sfd(side=\"hi\")\n                    return A * (p / Dkm) * (Dkm / self.sfd_range[0]) ** p \n                else:\n                    return sum(co * np.log10(Dkm) ** i for i, co in enumerate(dcoef))\n\n            return _dNdD_scalar(Dkm) if np.isscalar(Dkm) else np.vectorize(_dNdD_scalar)(Dkm)\n\n\n        def _CSFD(Dkm: FloatLike | Sequence[FloatLike] | ArrayLike) -&gt; Union[FloatLike, ArrayLike]:\n            \"\"\"\n            Return the cumulative size-frequency distribution at the reference age of 1 Gy ago. For diameter values outside \n            the range of the NPF, the CSFD is extrapolated using a power law.\n\n            Parameters\n            ----------\n            Dkm : FloatLike or numpy array\n                diameter in units of km\n\n            Returns\n            -------\n            FloatLike or numpy array\n                The number of craters per square kilometer greater than Dkm in diameter at age=1 Gy ago.\n            \"\"\"\n            def _CSFD_scalar(Dkm):\n                if Dkm &lt; self.sfd_range[0]:\n                    A, p = _extrapolate_sfd(side=\"lo\")\n                    return A * (Dkm / self.sfd_range[0]) ** p\n                elif Dkm &gt; self.sfd_range[1]:\n                    A, p = _extrapolate_sfd(side=\"hi\")\n                    p -= 2.0 # Steepen the upper branch of the SFD to prevent anomolously large craters from forming\n                    return A * (Dkm / self.sfd_range[1]) ** p\n                else:\n                    logCSFD = sum(co * np.log10(Dkm) ** i for i, co in enumerate(self.sfd_coef))\n                    return 10 ** logCSFD\n\n            return _CSFD_scalar(Dkm) if np.isscalar(Dkm) else np.vectorize(_CSFD_scalar)(Dkm)\n\n\n        if np.any(diameter &lt; 0.0):\n            raise ValueError(\"diameter must be greater than or equal to 0.0\")\n\n        Dkm = diameter * 1e-3 # Convert m to km for internal functions\n\n        if self.model == \"Projectile\":\n            Ncumulative = R_to_CSFD(R=_CSFD, D=Dkm) * 2.94e-5 # This is a multiplication factor that gets the projectile CSFD to approximately match the lunar crater CSFD \n        else:\n            Ncumulative = _CSFD(Dkm) \n\n        return Ncumulative * 1e-6 # convert from km^-2 to m^-2    \n</code></pre>"},{"location":"api/production/#cratermaker.core.production.NeukumProduction.function","title":"<code>function(diameter=1.0, age=1.0, reference_age=None, check_valid_time=True, **kwargs)</code>","text":"<p>Return the cumulative size-frequency distribution of craters over a given age range and crater diameter.</p>"},{"location":"api/production/#cratermaker.core.production.NeukumProduction.function--parameters","title":"Parameters","text":"<p>diameter : FloatLike or numpy array     Crater diameter(s) in units of meters to compute corresponding cumulative number density value. age : FloatLike or ArrayLike, default=1.0     Age in the past relative to the reference age to compute cumulative SFD in units of My.  reference_age, FloatLike or ArrayLike, optional     The reference used when computing age in My. The default is 0 (present day). If a non-zero value is passed, the <code>age</code> is      interpreted as a delta on the reference age. So for instance, if <code>age=500</code> and <code>reference_age=3500</code>, then this means      \"4.0 Gy to 3.5 Gy ago\".  check_valid_time : bool, optional (default=True)     If True, return NaN for age values outside the valid age range</p>"},{"location":"api/production/#cratermaker.core.production.NeukumProduction.function--returns","title":"Returns","text":"<p>FloatLike or numpy array of FloatLike     The cumulative number of craters per square meter greater than the input diameter that would be expected to form on a      surface over the given age range.</p> Source code in <code>cratermaker/core/production.py</code> <pre><code>def function(self,\n         diameter: FloatLike | Sequence[FloatLike] | ArrayLike = 1.0,\n         age: FloatLike | Sequence[FloatLike] | ArrayLike = 1.0,\n         reference_age: FloatLike | Sequence[FloatLike] | ArrayLike | None = None,\n         check_valid_time: bool=True,\n         **kwargs: Any,\n         ) -&gt; Union[FloatLike, ArrayLike]:\n    \"\"\"\n    Return the cumulative size-frequency distribution of craters over a given age range and crater diameter.\n\n    Parameters\n    ----------\n    diameter : FloatLike or numpy array\n        Crater diameter(s) in units of meters to compute corresponding cumulative number density value.\n    age : FloatLike or ArrayLike, default=1.0\n        Age in the past relative to the reference age to compute cumulative SFD in units of My. \n    reference_age, FloatLike or ArrayLike, optional\n        The reference used when computing age in My. The default is 0 (present day). If a non-zero value is passed, the `age` is \n        interpreted as a delta on the reference age. So for instance, if `age=500` and `reference_age=3500`, then this means \n        \"4.0 Gy to 3.5 Gy ago\". \n    check_valid_time : bool, optional (default=True)\n        If True, return NaN for age values outside the valid age range\n\n    Returns\n    -------\n    FloatLike or numpy array of FloatLike\n        The cumulative number of craters per square meter greater than the input diameter that would be expected to form on a \n        surface over the given age range.\n    \"\"\"\n    age, reference_age = self._validate_age(age, reference_age) \n    diameter, _ = self._validate_csfd(diameter=diameter)\n\n    return self._size_frequency_distribution(diameter) * (self._chronology(reference_age + age,check_valid_time) - self._chronology(reference_age,check_valid_time))\n</code></pre>"},{"location":"api/production/#cratermaker.core.production.NeukumProduction.set_model_parameters","title":"<code>set_model_parameters(**kwargs)</code>","text":"<p>Set the parameters for Neukum production. This will set the following attributes based on the value of the keyword argument <code>model</code>, which is either \"Moon\", \"Mars\", or \"Projectile\".</p> <ul> <li>sfd_coef : the coefficients for the size-frequency distribution function (See Table 1 of Neukum et al. 2001)</li> <li>sfd_range : the range of diameters over which the size-frequency distribution function is valid </li> <li>valid_time : the range of ages over which the chronology function is valid</li> <li>tau : the time constant for the chronology function (See Eq. 5 of Neukum et al. 2001)</li> <li>Cexp : the coefficient for the exponential componenbt of the chronology function (See Eq. 5 of Neukum et al. 2001)</li> <li>Clin : the coefficient for the linear component of the chronology function (See Eq. 5 of Neukum et al. 2001, but our implementation corrects the typo in that expression)</li> </ul>"},{"location":"api/production/#cratermaker.core.production.NeukumProduction.set_model_parameters--parameters","title":"Parameters","text":"<p>**kwargs : Any     This function accepts the following keyword arguments:</p> <pre><code>model : str, {\"Moon\", \"Mars\", \"Projectile\"}\n    The specific model to use for the production function. Defaults to \"Moon\"\n</code></pre> Source code in <code>cratermaker/core/production.py</code> <pre><code>def set_model_parameters(self, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Set the parameters for Neukum production. This will set the following attributes based on the value of the keyword argument\n    `model`, which is either \"Moon\", \"Mars\", or \"Projectile\".\n\n    - sfd_coef : the coefficients for the size-frequency distribution function (See Table 1 of Neukum et al. 2001)\n    - sfd_range : the range of diameters over which the size-frequency distribution function is valid \n    - valid_time : the range of ages over which the chronology function is valid\n    - tau : the time constant for the chronology function (See Eq. 5 of Neukum et al. 2001)\n    - Cexp : the coefficient for the exponential componenbt of the chronology function (See Eq. 5 of Neukum et al. 2001)\n    - Clin : the coefficient for the linear component of the chronology function (See Eq. 5 of Neukum et al. 2001, but our implementation corrects the typo in that expression)\n\n    Parameters\n    ----------\n    **kwargs : Any\n        This function accepts the following keyword arguments:\n\n        model : str, {\"Moon\", \"Mars\", \"Projectile\"}\n            The specific model to use for the production function. Defaults to \"Moon\" \n    \"\"\"\n    # Set the generator type. For the default generator, it can be either \"crater\" or \"projectile\" \n    if not hasattr(self, \"valid_models\"):\n        self.valid_models = [\"Moon\", \"Mars\", \"Projectile\"]\n    model = kwargs.get(\"model\", \"Moon\")\n    self.model = self._validate_model(model)   \n\n    if self.model == \"Projectile\":\n        self.generator_type = \"projectile\"\n    else:\n        self.generator_type = \"crater\"\n\n    sfd_coef = {\n            \"Moon\" : np.array(\n                [\n                    -3.0876,\n                    -3.557528,\n                    +0.781027,\n                    +1.021521,\n                    -0.156012,\n                    -0.444058,\n                    +0.019977,\n                    +0.086850,\n                    -0.005874,\n                    -0.006809,\n                    +8.25e-4, \n                    +5.54e-5\n                ]),\n            \"Mars\" : np.array(\n                [\n                    -3.384, \n                    -3.197,\n                    +1.257,\n                    +0.7915,\n                    -0.4861,\n                    -0.3630,\n                    +0.1016,\n                    +6.756e-2,\n                    -1.181e-2,\n                    -4.753e-3,\n                    +6.233e-4,\n                    +5.805e-5\n                ]),\n            \"Projectile\" : np.array(\n                [\n                    0,\n                    +1.375458,\n                    +1.272521e-1,\n                    -1.282166,\n                    -3.074558e-1,\n                    +4.149280e-1,\n                    +1.910668e-1,\n                    -4.260980e-2,\n                    -3.976305e-2,\n                    -3.180179e-3,\n                    +2.799369e-3,\n                    +6.892223e-4,\n                    +2.614385e-6,\n                    -1.416178e-5,\n                    -1.191124e-6\n                ]\n            )\n        }\n    self.sfd_coef = sfd_coef[self.model]\n    sfd_range = {\n            \"Moon\" : np.array([0.01,1000]),\n            \"Mars\" : np.array([0.015,362]),\n            \"Projectile\" : np.array([0.0001, 200.0]) # Estimated based on Fig. 16 of Ivanov et al. (2001)\n        }\n    self.sfd_range = sfd_range[self.model]\n\n    # Chronology function parameters\n    self.valid_time = (0,4500)  # Range over which the production function is valid\n    self.tau = 1.0 / 6.93\n    Cexp_moon = 5.44e-14\n    Clin = {\n            \"Moon\" : 10**(sfd_coef.get(\"Moon\")[0]),\n            \"Mars\" : 10**(sfd_coef.get(\"Mars\")[0]),\n            \"Projectile\": 10**(sfd_coef.get(\"Projectile\")[0]),\n    }\n    Cexp = {\n            \"Moon\" : Cexp_moon,\n            \"Mars\" : Cexp_moon * Clin[\"Mars\"] / Clin[\"Moon\"],\n            \"Projectile\": Cexp_moon * Clin[\"Projectile\"] / Clin[\"Moon\"],\n        }   \n    self.Cexp = Cexp[self.model]\n    self.Clin = Clin[self.model]\n</code></pre>"},{"location":"api/production/#cratermaker.core.production.Production","title":"<code>Production</code>","text":"<p>An operations class for computing the production function for craters and impactors.</p>"},{"location":"api/production/#cratermaker.core.production.Production--parameters","title":"Parameters","text":"<p>model : str     The specific model to use for the production function. Defaults to \"Powerlaw\". rng : Generator, optional     A random number generator instance. If not provided, the default numpy RNG will be used. **kwargs : Any     Additional keyword arguments to pass to the Production class. These are used to pass optional arguments     to set the parameters of the power law production function using the set_model_parameters method.</p> Source code in <code>cratermaker/core/production.py</code> <pre><code>class Production():\n    \"\"\"\n    An operations class for computing the production function for craters and impactors.\n\n\n    Parameters\n    ----------\n    model : str\n        The specific model to use for the production function. Defaults to \"Powerlaw\".\n    rng : Generator, optional\n        A random number generator instance. If not provided, the default numpy RNG will be used.\n    **kwargs : Any\n        Additional keyword arguments to pass to the Production class. These are used to pass optional arguments\n        to set the parameters of the power law production function using the set_model_parameters method.\n    \"\"\"\n    def __init__(self, \n                rng: Generator | None = None,\n                **kwargs: Any):\n\n        if rng is None:\n            self.rng = np.random.default_rng()\n        elif isinstance(rng, Generator):\n            self.rng = rng\n        else:\n            raise TypeError(\"The 'rng' argument must be a numpy.random.Generator instance or None\")\n\n        self.set_model_parameters(**kwargs)\n\n        return\n\n\n    def set_model_parameters(self, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Set the parameters for the power law production function.\n\n        Parameters\n        ----------\n        **kwargs : Any\n            This function accepts the following keyword arguments:\n\n            model : str\n                The specific model to use for the production function. Defaults to \"Powerlaw\". \n            generator_type : str\n                The type of generator to use. This can be either \"crater\" or \"projectile\". Defaults to \"crater\". \n            N1_coef : float\n                The coefficient for the power law production function at 1 m diameter per 1 My. \n                Defaults to 7.9.e-3 (lunar craters) or 2.2e-8 (lunar impactors) based on fits to the NPF on the Moon.\n            slope : float\n                The slope of the power law production function. \n                Defaults to -3.33 (lunar craters) or -2.26 (lunar impactors) based on fits to the NPF on the Moon.\n        \"\"\"\n        if not hasattr(self, \"valid_models\"):\n            self.valid_models = [\"Powerlaw\"] \n        model = kwargs.get(\"model\", \"Powerlaw\")\n        self.model = self._validate_model(model)          \n\n        # Set the generator type. For the default generator, it can be either \"crater\" or \"projectile\" \n        self.valid_generator_types = [\"crater\", \"projectile\"]\n        generator_type = kwargs.get(\"generator_type\", \"crater\")\n        self.generator_type = self._validate_generator_type(generator_type)        \n        self.valid_time = (0,None)  # Range over which the production function is valid       \n\n        # Default values that are approximately equal to the NPF for the Moon\n        default_N1_coef = {\n            \"crater\" : 7.883e-3, \n            \"projectile\" : 7.989e-7\n            }\n\n        default_slope = {\n            \"crater\" : -3.328, \n            \"projectile\" : -2.634\n            } \n        # Set the power law parameters for the production function along with defaults \n        N1_coef = kwargs.get(\"N1_coef\",default_N1_coef[self.generator_type] )\n\n        if not isinstance(N1_coef, FloatLike):\n            raise ValueError(\"N1_coef must be a float\")\n        if N1_coef &lt; 0.0:\n            raise ValueError(\"N1_coef must be positive\")\n        self.N1_coef = N1_coef\n\n        # Set the power law exponent for the production function along with defaults \n        slope = kwargs.get(\"slope\", default_slope[self.generator_type])\n        if not isinstance(slope, FloatLike):\n            raise ValueError(\"slope must be a float\")   \n        elif slope &gt; 0.0: # Slope must be negative, but convention in the field is mixed. So we flip the sign if it is positive.\n            slope *= -1\n        self.slope = slope \n\n\n    def function(self,\n             diameter: FloatLike | Sequence[FloatLike] | ArrayLike = 1.0,\n             age: FloatLike | Sequence[FloatLike] | ArrayLike = 1.0,\n             reference_age: FloatLike | Sequence[FloatLike] | ArrayLike | None = None,\n             **kwargs: Any,\n             ) -&gt; Union[FloatLike, ArrayLike]:\n        \"\"\"\n        Return the cumulative size-frequency distribution of craters over a given age range and crater diameter for a simple power\n        law model.\n\n        Parameters\n        ----------\n        diameter : FloatLike or ArrayLike\n            Crater diameter(s) in units of meters to compute corresponding cumulative number density value.\n        age : FloatLike or ArrayLike, default=1.0\n            Age in the past relative to the reference age to compute cumulative SFD in units of My. \n        reference_age, FloatLike or ArrayLike, optional\n            The reference used when computing age in My. The default is 0 (present day). If a non-zero value is passed, the `age` is \n            interpreted as a delta on the reference age. So for instance, if `age=500` and `reference_age=3500`, then this means \n            \"4.0 Gy to 3.5 Gy ago\". \n        **kwargs : Any\n            Any additional keywords. These are not used in this base class, but included here so that any extended class can share\n            the same function signature.\n\n        Returns\n        -------\n        FloatLike or numpy array of FloatLike\n            The cumulative number of craters per square meter greater than the input diameter that would be expected to form on a \n            surface over the given age range.\n        \"\"\"         \n        diameter, _ = self._validate_csfd(diameter=diameter)   \n        age, reference_age = self._validate_age(age, reference_age)\n        return self.N1_coef * diameter**self.slope * age # reference_age has no meaning in a constant production function, so we ignore it here.\n\n\n    def function_inverse(self,\n             diameter: FloatLike | Sequence[FloatLike] | ArrayLike,\n             cumulative_number: FloatLike | Sequence[FloatLike] | ArrayLike,\n             **kwargs: Any,\n             ) -&gt; Union[FloatLike, ArrayLike]:\n\n        \"\"\"\n        Return the age in My for a given number density of craters and diameter \n\n        Parameters\n        ----------\n        diameter : float-lik or  array-like\n            diameter of the crater in m\n        cumulative_number : float-like or array-like\n            number density of craters per m^2 surface area greater than the input diameter\n        **kwargs: Any\n            Any additional keywords that are passed to the function method.\n\n        Returns\n        -------\n        float_like or numpy array\n            The age in My for the given relative number density of craters. \n        \"\"\"\n\n        diameter, cumulative_number = self._validate_csfd(diameter=diameter, cumulative_number=cumulative_number) \n\n        def _root_func(t,D,N):\n            retval = self.function(diameter=D,age=t,check_valid_time=False,**kwargs) - N\n            return retval\n\n        xtol = 1e-10\n        x0 = 4400.0\n        retval = []\n        darr = np.array(diameter)\n        converged = []\n        flag = []\n        for i,d in np.ndenumerate(darr):\n            sol = root_scalar(lambda x: _root_func(x,d,cumulative_number[i]), x0=x0, xtol=xtol, method='brentq', bracket=[0,10000]) \n            retval.append(sol.root)\n            converged.append(sol.converged)\n            flag.append(sol.flag)\n        retval = np.array(retval)\n        converged = np.array(converged)\n        flag = np.array(flag)\n        if np.all(converged):\n            return retval.item() if np.isscalar(diameter) else retval\n        else:\n            raise ValueError(f\"The root finding algorithm did not converge for all values of diameter and cumulative_number. Flag {flag}\")\n\n\n    def sample(self,\n               age: FloatLike | None = None,\n               reference_age: FloatLike | None = None,\n               cumulative_number_at_diameter: PairOfFloats | None = None,\n               reference_cumulative_number_at_diameter: PairOfFloats | None = None,\n               diameter_range: PairOfFloats | None = None,\n               area: FloatLike | None = None, \n               ) -&gt; np.ndarray:\n\n        \"\"\"\n        Sample crater diameters and ages from the production function. This function can either sample from a given age range or\n        from a given cumulative number/diameter pair (but not both). \n\n        Parameters\n        ----------\n        age : FloatLike or ArrayLike, optional\n            Age in the past relative to the reference age to compute cumulative SFD in units of My. \n        reference_age, FloatLike or ArrayLike, optional\n            The reference used when computing age in My. The default is 0 (present day). If a non-zero value is passed, the `age` is \n            interpreted as a delta on the reference age. So for instance, if `age=500` and `reference_age=3500`, then this means \n            \"4.0 Gy to 3.5 Gy ago\". \n        cumulative_number_at_diameter : PairOfFloats, optional\n            A pair of cumulative number and diameter values, in the form of a (N, D). If provided, the function convert this value\n            to a corresponding age and use the production function for a given age.\n        reference_cumulative_number_at_diameter : PairOfFloats, optional\n            A pair of cumulative number and diameter values, in the form of a (N, D). If provided, the function will convert this\n            value to a corresponding reference age and use the production function for a given age.\n        diameter_range : PairOfFloats\n            The minimum and maximum crater diameter to sample from in meters. \n        area : FloatLike, optional\n            The area in m^2 over which the production function is evaluated to generate the expected number, which is the production\n            function over the input age/cumulative number range at the minimum diameter.\n\n        Returns\n        -------\n        numpy array\n            The sampled diameter values\n\n        Raises\n        ------\n        ValueError\n            If any of the following conditions are met:\n            - Both the age and cumulative_number_at_diameter arguments are provided\n            - The diameter_range is not provided.\n            - If diameter_range is not a pair of values.\n            - If the minimum diameter is less than or equal to 0.\n            - If the maximum diameter is less than or equal the minimum.\n            - If the cumulative_number_at_diameter argument is not a pair of values, or any of them are less than 0\n            - If the reference_cumulative_number_at_diameter argument is not a pair of values, or any of them are less than 0\n            - If if the area argument is less than 1. \n\n        \"\"\"\n        # Validate all the input arguments\n        if age is None and cumulative_number_at_diameter is None:\n            raise ValueError(\"Either the 'age' or 'cumulative_number_at_diameter' must be provided\")\n        elif age is not None and cumulative_number_at_diameter is not None:\n            raise ValueError(\"Only one of the 'age' or 'cumulative_number_at_diameter' arguments can be provided\")\n        if reference_age is not None and reference_cumulative_number_at_diameter is not None: \n            raise ValueError(\"Only one of the 'reference_age' or 'reference_cumulative_number_at_diameter' arguments can be provided\") \n\n        if age is not None and not np.isscalar(age):\n            raise ValueError(\"The 'age' must be a scalar\")\n\n        if diameter_range is None:\n            raise ValueError(\"The 'diameter_range' must be provided\")\n        if len(diameter_range) != 2:\n            raise ValueError(\"The 'diameter_range' must be a pair of values\")\n        if diameter_range[0] &lt;= 0:\n            raise ValueError(f\"Diameter range invalid: {diameter_range}. The minimum diameter must be greater than 0\")\n        if diameter_range[1] &lt; diameter_range[0]:\n            raise ValueError(f\"Diameter range invalid: {diameter_range}. The maximum diameter must be greater than or equal to the minimum diameter\")\n\n        if area is not None:\n            if not np.isscalar(area):\n                raise ValueError(\"The 'area' must be a scalar\")\n            if area &lt; 0.0:\n                raise ValueError(\"The 'area' must be greater than 0\")\n\n        if reference_cumulative_number_at_diameter is not None:\n            if len(reference_cumulative_number_at_diameter) != 2:\n                raise ValueError(\"The 'reference_cumulative_number_at_diameter' must be a pair of values\")\n            reference_cumulative_number_at_diameter = self._validate_csfd(*reference_cumulative_number_at_diameter)\n            reference_age = self.function_inverse(diameter=reference_cumulative_number_at_diameter[1], cumulative_number=reference_cumulative_number_at_diameter[0])\n            # Check to be sure that the diameter in the reference_cumulative_number_at_diameter is the same as cumulative_number_at_diameter. \n            # If not, we need to adjust it so that they match \n            if cumulative_number_at_diameter is not None:\n                if len(cumulative_number_at_diameter) != 2:\n                    raise ValueError(\"The 'cumulative_number_at_diameter' must be a pair of values\")\n                if reference_cumulative_number_at_diameter[1] != cumulative_number_at_diameter[1]:\n                    reference_cumulative_number_at_diameter[0] = self.function(diameter=cumulative_number_at_diameter[1], age=reference_age)\n                    reference_cumulative_number_at_diameter[1] = cumulative_number_at_diameter[1]\n                # Now adjust the N value so that when we convert it to age, we get the age value relative to the present\n                cumulative_number_at_diameter[0] += reference_cumulative_number_at_diameter[0] \n\n            cumulative_number_at_diameter = self._validate_csfd(*cumulative_number_at_diameter)\n            age = self.function_inverse(diameter=cumulative_number_at_diameter[1], cumulative_number=cumulative_number_at_diameter[0])\n            # Convert the absolute age to a relative age\n            age -= reference_age\n\n        age, reference_age = self._validate_age(age, reference_age)\n\n        # Build the cumulative distribution function from which we will sample \n        input_diameters = np.logspace(np.log10(diameter_range[0]), np.log10(diameter_range[1]))\n        cdf = self.function(diameter=input_diameters, age=age, reference_age=reference_age)\n        expected_num = cdf[0] * area if area is not None else None\n        diameters = get_random_size(diameters=input_diameters, cdf=cdf, mu=expected_num, rng=self.rng)\n\n        return diameters    \n\n\n    def _validate_model(self, model: str | None) -&gt; str:\n        \"\"\"\n        Validates the given model string against the list of valid models.\n\n        Parameters\n        ----------\n        model : str | None\n            The model name to validate. If None, the first model in the valid models list is returned.\n\n        Returns\n        -------\n        str\n            The validated model name. If the input model is None, returns the first model in the valid models list.\n\n        Raises\n        ------\n        ValueError\n            If the model is not a string or if the model is not in the list of valid models.\n        \"\"\"       \n        if not model:\n            return self.valid_models[0]\n        if not isinstance(model, str):\n            raise ValueError(\"model must be a string\")\n        if model not in self.valid_models:\n            raise ValueError(f\"Invalid model {model}. Must be one of {self.valid_models}\")\n        return model\n\n\n    def _validate_generator_type(self, generator_type: str | None) -&gt; str:\n        \"\"\"\n        Validates the given generator type against the list of valid generator types.\n\n        Parameters\n        ----------\n        generator_type : str | None\n            The generator type to validate. If None, the first type in the valid generator types list is returned.\n\n        Returns\n        -------\n        str\n            The validated generator type. If the input generator type is None, returns the first type in the valid generator types list.\n\n        Raises\n        ------\n        ValueError\n            If the generator type is not a string or if the generator type is not in the list of valid generator types.\n        \"\"\"        \n        if not generator_type:\n            return self.valid_generator_types[0]\n        if not isinstance(generator_type, str):\n            raise ValueError(\"generator_type must be a string\")\n        if generator_type not in self.valid_generator_types:\n            raise ValueError(f\"Invalid generator_type {generator_type}. Must be one of {self.valid_generator_types}\")\n        return generator_type\n\n\n    def _validate_age(self, \n                       age: FloatLike | Sequence[FloatLike] | ArrayLike = 1.0,\n                       reference_age: FloatLike | Sequence[FloatLike] | ArrayLike | None = None,\n                       ) -&gt; Union[FloatLike, ArrayLike]:\n        \"\"\"\n        Processes the age argument and reference_age arguments. Checks that they are valid and returns a tuple of age and reference_age.\n\n        Parameters\n        ----------        \n        age : FloatLike or ArrayLike, default=1.0\n            Age in the past relative to the reference age to compute cumulative SFD in units of My. \n        reference_age, FloatLike or ArrayLike, optional\n            The reference used when computing age in My. If none is passed, it will be set either 0 or an array of zeros, depending on \n            the size of age.  If a non-zero value is passed, the `age` is interpreted as a delta on the reference age. So for instance, \n            if `age=500` and `reference_age=3500`, then this means \"4.0 Gy to 3.5 Gy ago\". \n\n        Returns\n        ------- \n        Tuple of np.float64\n            The start and end ages in units of My.\n\n        Raises\n        ------\n        ValueError\n            If the the start age is greater than the end age or the age variable is not a scalar or a sequence of 2 values.\n        \"\"\"\n\n        if np.isscalar(age):\n            age = np.float64(age)\n            if reference_age is None:\n                reference_age = np.float64(0.0)\n            else:\n                if not np.isscalar(reference_age):\n                    raise ValueError(\"If age is a scalar, reference_age must be a scalar\")\n            if age &lt; 0:\n                raise ValueError(\"Age must be positive\")\n        elif isinstance(age, (list, tuple, np.ndarray)):\n            age = np.array(age)\n            if reference_age is None:  \n                reference_age = np.zeros_like(age)\n            elif isinstance(reference_age, (list, tuple, np.ndarray)):\n                reference_age = np.array(reference_age)\n            else:\n                raise ValueError(\"If age is a sequence, reference_age must be a sequence\")\n            if age.size != reference_age.size:\n                raise ValueError(\"If age is a sequence, reference_age must be a sequence of the same size\")\n            if np.any(age &lt; 0):\n                raise ValueError(\"All values in the 'age' argument must be greater than or equal to 0.0\")\n        else:\n            raise ValueError(\"age must be a scalar or a sequence\")\n\n        return age, reference_age \n\n\n    def _validate_csfd(self,\n                        diameter: FloatLike | Sequence[FloatLike] | ArrayLike | None = None,\n                        cumulative_number: FloatLike | Sequence[FloatLike] | ArrayLike | None = None,\n                       ) -&gt; Tuple[Union[FloatLike, ArrayLike], Union[FloatLike, ArrayLike]]:\n        \"\"\"\n        Validates the diameter and cumulative_number arguments. Both arguments can be either\n        scalar or array-like, but they must be both scalars or both arrays of the same length.\n        Values must be non-negative.\n\n        Parameters\n        ----------\n        diameter : float-like or array-like, optional\n            Diameter of the crater in meters.\n        cumulative_number : float-like or array-like, optional\n            Number density of craters per square meter surface area greater than the input diameter.\n\n        Raises\n        ------\n        ValueError\n            If any of the conditions on the CSFD are not met.\n        \"\"\"\n\n        if diameter is None and cumulative_number is None:\n            raise ValueError(\"Either the 'diameter' or 'cumulative_number' must be provided\")\n\n        # Convert inputs to numpy arrays for uniform processing\n        if diameter is not None:\n            diameter_array = np.atleast_1d(diameter)\n        else:\n            diameter_array = None\n        if cumulative_number is not None:\n            cumulative_number_array = np.atleast_1d(cumulative_number)   \n        else:\n            cumulative_number_array = None\n\n        # Check if both are provided, they should be of the same length\n        if diameter_array is not None and cumulative_number_array is not None:\n            # Check for length consistency\n            if (len(diameter_array) != len(cumulative_number_array)):\n                raise ValueError(\"The 'diameter' and 'cumulative_number' must have the same length when both are provided\")\n\n        # Validate non-negative values\n        if diameter_array is not None and np.any(diameter_array &lt; 0):\n            raise ValueError(\"All values in 'diameter' must be non-negative\")\n        if cumulative_number_array is not None and np.any(cumulative_number_array &lt; 0):\n            raise ValueError(\"All values in 'cumulative_number' must be non-negative\")\n\n        if diameter is not None and not np.isscalar(diameter):\n            diameter = diameter_array\n        if cumulative_number is not None and not np.isscalar(cumulative_number):\n            cumulative_number = cumulative_number_array\n        return diameter, cumulative_number\n</code></pre>"},{"location":"api/production/#cratermaker.core.production.Production.function","title":"<code>function(diameter=1.0, age=1.0, reference_age=None, **kwargs)</code>","text":"<p>Return the cumulative size-frequency distribution of craters over a given age range and crater diameter for a simple power law model.</p>"},{"location":"api/production/#cratermaker.core.production.Production.function--parameters","title":"Parameters","text":"<p>diameter : FloatLike or ArrayLike     Crater diameter(s) in units of meters to compute corresponding cumulative number density value. age : FloatLike or ArrayLike, default=1.0     Age in the past relative to the reference age to compute cumulative SFD in units of My.  reference_age, FloatLike or ArrayLike, optional     The reference used when computing age in My. The default is 0 (present day). If a non-zero value is passed, the <code>age</code> is      interpreted as a delta on the reference age. So for instance, if <code>age=500</code> and <code>reference_age=3500</code>, then this means      \"4.0 Gy to 3.5 Gy ago\".  **kwargs : Any     Any additional keywords. These are not used in this base class, but included here so that any extended class can share     the same function signature.</p>"},{"location":"api/production/#cratermaker.core.production.Production.function--returns","title":"Returns","text":"<p>FloatLike or numpy array of FloatLike     The cumulative number of craters per square meter greater than the input diameter that would be expected to form on a      surface over the given age range.</p> Source code in <code>cratermaker/core/production.py</code> <pre><code>def function(self,\n         diameter: FloatLike | Sequence[FloatLike] | ArrayLike = 1.0,\n         age: FloatLike | Sequence[FloatLike] | ArrayLike = 1.0,\n         reference_age: FloatLike | Sequence[FloatLike] | ArrayLike | None = None,\n         **kwargs: Any,\n         ) -&gt; Union[FloatLike, ArrayLike]:\n    \"\"\"\n    Return the cumulative size-frequency distribution of craters over a given age range and crater diameter for a simple power\n    law model.\n\n    Parameters\n    ----------\n    diameter : FloatLike or ArrayLike\n        Crater diameter(s) in units of meters to compute corresponding cumulative number density value.\n    age : FloatLike or ArrayLike, default=1.0\n        Age in the past relative to the reference age to compute cumulative SFD in units of My. \n    reference_age, FloatLike or ArrayLike, optional\n        The reference used when computing age in My. The default is 0 (present day). If a non-zero value is passed, the `age` is \n        interpreted as a delta on the reference age. So for instance, if `age=500` and `reference_age=3500`, then this means \n        \"4.0 Gy to 3.5 Gy ago\". \n    **kwargs : Any\n        Any additional keywords. These are not used in this base class, but included here so that any extended class can share\n        the same function signature.\n\n    Returns\n    -------\n    FloatLike or numpy array of FloatLike\n        The cumulative number of craters per square meter greater than the input diameter that would be expected to form on a \n        surface over the given age range.\n    \"\"\"         \n    diameter, _ = self._validate_csfd(diameter=diameter)   \n    age, reference_age = self._validate_age(age, reference_age)\n    return self.N1_coef * diameter**self.slope * age # reference_age has no meaning in a constant production function, so we ignore it here.\n</code></pre>"},{"location":"api/production/#cratermaker.core.production.Production.function_inverse","title":"<code>function_inverse(diameter, cumulative_number, **kwargs)</code>","text":"<p>Return the age in My for a given number density of craters and diameter </p>"},{"location":"api/production/#cratermaker.core.production.Production.function_inverse--parameters","title":"Parameters","text":"<p>diameter : float-lik or  array-like     diameter of the crater in m cumulative_number : float-like or array-like     number density of craters per m^2 surface area greater than the input diameter **kwargs: Any     Any additional keywords that are passed to the function method.</p>"},{"location":"api/production/#cratermaker.core.production.Production.function_inverse--returns","title":"Returns","text":"<p>float_like or numpy array     The age in My for the given relative number density of craters.</p> Source code in <code>cratermaker/core/production.py</code> <pre><code>def function_inverse(self,\n         diameter: FloatLike | Sequence[FloatLike] | ArrayLike,\n         cumulative_number: FloatLike | Sequence[FloatLike] | ArrayLike,\n         **kwargs: Any,\n         ) -&gt; Union[FloatLike, ArrayLike]:\n\n    \"\"\"\n    Return the age in My for a given number density of craters and diameter \n\n    Parameters\n    ----------\n    diameter : float-lik or  array-like\n        diameter of the crater in m\n    cumulative_number : float-like or array-like\n        number density of craters per m^2 surface area greater than the input diameter\n    **kwargs: Any\n        Any additional keywords that are passed to the function method.\n\n    Returns\n    -------\n    float_like or numpy array\n        The age in My for the given relative number density of craters. \n    \"\"\"\n\n    diameter, cumulative_number = self._validate_csfd(diameter=diameter, cumulative_number=cumulative_number) \n\n    def _root_func(t,D,N):\n        retval = self.function(diameter=D,age=t,check_valid_time=False,**kwargs) - N\n        return retval\n\n    xtol = 1e-10\n    x0 = 4400.0\n    retval = []\n    darr = np.array(diameter)\n    converged = []\n    flag = []\n    for i,d in np.ndenumerate(darr):\n        sol = root_scalar(lambda x: _root_func(x,d,cumulative_number[i]), x0=x0, xtol=xtol, method='brentq', bracket=[0,10000]) \n        retval.append(sol.root)\n        converged.append(sol.converged)\n        flag.append(sol.flag)\n    retval = np.array(retval)\n    converged = np.array(converged)\n    flag = np.array(flag)\n    if np.all(converged):\n        return retval.item() if np.isscalar(diameter) else retval\n    else:\n        raise ValueError(f\"The root finding algorithm did not converge for all values of diameter and cumulative_number. Flag {flag}\")\n</code></pre>"},{"location":"api/production/#cratermaker.core.production.Production.sample","title":"<code>sample(age=None, reference_age=None, cumulative_number_at_diameter=None, reference_cumulative_number_at_diameter=None, diameter_range=None, area=None)</code>","text":"<p>Sample crater diameters and ages from the production function. This function can either sample from a given age range or from a given cumulative number/diameter pair (but not both). </p>"},{"location":"api/production/#cratermaker.core.production.Production.sample--parameters","title":"Parameters","text":"<p>age : FloatLike or ArrayLike, optional     Age in the past relative to the reference age to compute cumulative SFD in units of My.  reference_age, FloatLike or ArrayLike, optional     The reference used when computing age in My. The default is 0 (present day). If a non-zero value is passed, the <code>age</code> is      interpreted as a delta on the reference age. So for instance, if <code>age=500</code> and <code>reference_age=3500</code>, then this means      \"4.0 Gy to 3.5 Gy ago\".  cumulative_number_at_diameter : PairOfFloats, optional     A pair of cumulative number and diameter values, in the form of a (N, D). If provided, the function convert this value     to a corresponding age and use the production function for a given age. reference_cumulative_number_at_diameter : PairOfFloats, optional     A pair of cumulative number and diameter values, in the form of a (N, D). If provided, the function will convert this     value to a corresponding reference age and use the production function for a given age. diameter_range : PairOfFloats     The minimum and maximum crater diameter to sample from in meters.  area : FloatLike, optional     The area in m^2 over which the production function is evaluated to generate the expected number, which is the production     function over the input age/cumulative number range at the minimum diameter.</p>"},{"location":"api/production/#cratermaker.core.production.Production.sample--returns","title":"Returns","text":"<p>numpy array     The sampled diameter values</p>"},{"location":"api/production/#cratermaker.core.production.Production.sample--raises","title":"Raises","text":"<p>ValueError     If any of the following conditions are met:     - Both the age and cumulative_number_at_diameter arguments are provided     - The diameter_range is not provided.     - If diameter_range is not a pair of values.     - If the minimum diameter is less than or equal to 0.     - If the maximum diameter is less than or equal the minimum.     - If the cumulative_number_at_diameter argument is not a pair of values, or any of them are less than 0     - If the reference_cumulative_number_at_diameter argument is not a pair of values, or any of them are less than 0     - If if the area argument is less than 1.</p> Source code in <code>cratermaker/core/production.py</code> <pre><code>def sample(self,\n           age: FloatLike | None = None,\n           reference_age: FloatLike | None = None,\n           cumulative_number_at_diameter: PairOfFloats | None = None,\n           reference_cumulative_number_at_diameter: PairOfFloats | None = None,\n           diameter_range: PairOfFloats | None = None,\n           area: FloatLike | None = None, \n           ) -&gt; np.ndarray:\n\n    \"\"\"\n    Sample crater diameters and ages from the production function. This function can either sample from a given age range or\n    from a given cumulative number/diameter pair (but not both). \n\n    Parameters\n    ----------\n    age : FloatLike or ArrayLike, optional\n        Age in the past relative to the reference age to compute cumulative SFD in units of My. \n    reference_age, FloatLike or ArrayLike, optional\n        The reference used when computing age in My. The default is 0 (present day). If a non-zero value is passed, the `age` is \n        interpreted as a delta on the reference age. So for instance, if `age=500` and `reference_age=3500`, then this means \n        \"4.0 Gy to 3.5 Gy ago\". \n    cumulative_number_at_diameter : PairOfFloats, optional\n        A pair of cumulative number and diameter values, in the form of a (N, D). If provided, the function convert this value\n        to a corresponding age and use the production function for a given age.\n    reference_cumulative_number_at_diameter : PairOfFloats, optional\n        A pair of cumulative number and diameter values, in the form of a (N, D). If provided, the function will convert this\n        value to a corresponding reference age and use the production function for a given age.\n    diameter_range : PairOfFloats\n        The minimum and maximum crater diameter to sample from in meters. \n    area : FloatLike, optional\n        The area in m^2 over which the production function is evaluated to generate the expected number, which is the production\n        function over the input age/cumulative number range at the minimum diameter.\n\n    Returns\n    -------\n    numpy array\n        The sampled diameter values\n\n    Raises\n    ------\n    ValueError\n        If any of the following conditions are met:\n        - Both the age and cumulative_number_at_diameter arguments are provided\n        - The diameter_range is not provided.\n        - If diameter_range is not a pair of values.\n        - If the minimum diameter is less than or equal to 0.\n        - If the maximum diameter is less than or equal the minimum.\n        - If the cumulative_number_at_diameter argument is not a pair of values, or any of them are less than 0\n        - If the reference_cumulative_number_at_diameter argument is not a pair of values, or any of them are less than 0\n        - If if the area argument is less than 1. \n\n    \"\"\"\n    # Validate all the input arguments\n    if age is None and cumulative_number_at_diameter is None:\n        raise ValueError(\"Either the 'age' or 'cumulative_number_at_diameter' must be provided\")\n    elif age is not None and cumulative_number_at_diameter is not None:\n        raise ValueError(\"Only one of the 'age' or 'cumulative_number_at_diameter' arguments can be provided\")\n    if reference_age is not None and reference_cumulative_number_at_diameter is not None: \n        raise ValueError(\"Only one of the 'reference_age' or 'reference_cumulative_number_at_diameter' arguments can be provided\") \n\n    if age is not None and not np.isscalar(age):\n        raise ValueError(\"The 'age' must be a scalar\")\n\n    if diameter_range is None:\n        raise ValueError(\"The 'diameter_range' must be provided\")\n    if len(diameter_range) != 2:\n        raise ValueError(\"The 'diameter_range' must be a pair of values\")\n    if diameter_range[0] &lt;= 0:\n        raise ValueError(f\"Diameter range invalid: {diameter_range}. The minimum diameter must be greater than 0\")\n    if diameter_range[1] &lt; diameter_range[0]:\n        raise ValueError(f\"Diameter range invalid: {diameter_range}. The maximum diameter must be greater than or equal to the minimum diameter\")\n\n    if area is not None:\n        if not np.isscalar(area):\n            raise ValueError(\"The 'area' must be a scalar\")\n        if area &lt; 0.0:\n            raise ValueError(\"The 'area' must be greater than 0\")\n\n    if reference_cumulative_number_at_diameter is not None:\n        if len(reference_cumulative_number_at_diameter) != 2:\n            raise ValueError(\"The 'reference_cumulative_number_at_diameter' must be a pair of values\")\n        reference_cumulative_number_at_diameter = self._validate_csfd(*reference_cumulative_number_at_diameter)\n        reference_age = self.function_inverse(diameter=reference_cumulative_number_at_diameter[1], cumulative_number=reference_cumulative_number_at_diameter[0])\n        # Check to be sure that the diameter in the reference_cumulative_number_at_diameter is the same as cumulative_number_at_diameter. \n        # If not, we need to adjust it so that they match \n        if cumulative_number_at_diameter is not None:\n            if len(cumulative_number_at_diameter) != 2:\n                raise ValueError(\"The 'cumulative_number_at_diameter' must be a pair of values\")\n            if reference_cumulative_number_at_diameter[1] != cumulative_number_at_diameter[1]:\n                reference_cumulative_number_at_diameter[0] = self.function(diameter=cumulative_number_at_diameter[1], age=reference_age)\n                reference_cumulative_number_at_diameter[1] = cumulative_number_at_diameter[1]\n            # Now adjust the N value so that when we convert it to age, we get the age value relative to the present\n            cumulative_number_at_diameter[0] += reference_cumulative_number_at_diameter[0] \n\n        cumulative_number_at_diameter = self._validate_csfd(*cumulative_number_at_diameter)\n        age = self.function_inverse(diameter=cumulative_number_at_diameter[1], cumulative_number=cumulative_number_at_diameter[0])\n        # Convert the absolute age to a relative age\n        age -= reference_age\n\n    age, reference_age = self._validate_age(age, reference_age)\n\n    # Build the cumulative distribution function from which we will sample \n    input_diameters = np.logspace(np.log10(diameter_range[0]), np.log10(diameter_range[1]))\n    cdf = self.function(diameter=input_diameters, age=age, reference_age=reference_age)\n    expected_num = cdf[0] * area if area is not None else None\n    diameters = get_random_size(diameters=input_diameters, cdf=cdf, mu=expected_num, rng=self.rng)\n\n    return diameters    \n</code></pre>"},{"location":"api/production/#cratermaker.core.production.Production.set_model_parameters","title":"<code>set_model_parameters(**kwargs)</code>","text":"<p>Set the parameters for the power law production function.</p>"},{"location":"api/production/#cratermaker.core.production.Production.set_model_parameters--parameters","title":"Parameters","text":"<p>**kwargs : Any     This function accepts the following keyword arguments:</p> <pre><code>model : str\n    The specific model to use for the production function. Defaults to \"Powerlaw\". \ngenerator_type : str\n    The type of generator to use. This can be either \"crater\" or \"projectile\". Defaults to \"crater\". \nN1_coef : float\n    The coefficient for the power law production function at 1 m diameter per 1 My. \n    Defaults to 7.9.e-3 (lunar craters) or 2.2e-8 (lunar impactors) based on fits to the NPF on the Moon.\nslope : float\n    The slope of the power law production function. \n    Defaults to -3.33 (lunar craters) or -2.26 (lunar impactors) based on fits to the NPF on the Moon.\n</code></pre> Source code in <code>cratermaker/core/production.py</code> <pre><code>def set_model_parameters(self, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Set the parameters for the power law production function.\n\n    Parameters\n    ----------\n    **kwargs : Any\n        This function accepts the following keyword arguments:\n\n        model : str\n            The specific model to use for the production function. Defaults to \"Powerlaw\". \n        generator_type : str\n            The type of generator to use. This can be either \"crater\" or \"projectile\". Defaults to \"crater\". \n        N1_coef : float\n            The coefficient for the power law production function at 1 m diameter per 1 My. \n            Defaults to 7.9.e-3 (lunar craters) or 2.2e-8 (lunar impactors) based on fits to the NPF on the Moon.\n        slope : float\n            The slope of the power law production function. \n            Defaults to -3.33 (lunar craters) or -2.26 (lunar impactors) based on fits to the NPF on the Moon.\n    \"\"\"\n    if not hasattr(self, \"valid_models\"):\n        self.valid_models = [\"Powerlaw\"] \n    model = kwargs.get(\"model\", \"Powerlaw\")\n    self.model = self._validate_model(model)          \n\n    # Set the generator type. For the default generator, it can be either \"crater\" or \"projectile\" \n    self.valid_generator_types = [\"crater\", \"projectile\"]\n    generator_type = kwargs.get(\"generator_type\", \"crater\")\n    self.generator_type = self._validate_generator_type(generator_type)        \n    self.valid_time = (0,None)  # Range over which the production function is valid       \n\n    # Default values that are approximately equal to the NPF for the Moon\n    default_N1_coef = {\n        \"crater\" : 7.883e-3, \n        \"projectile\" : 7.989e-7\n        }\n\n    default_slope = {\n        \"crater\" : -3.328, \n        \"projectile\" : -2.634\n        } \n    # Set the power law parameters for the production function along with defaults \n    N1_coef = kwargs.get(\"N1_coef\",default_N1_coef[self.generator_type] )\n\n    if not isinstance(N1_coef, FloatLike):\n        raise ValueError(\"N1_coef must be a float\")\n    if N1_coef &lt; 0.0:\n        raise ValueError(\"N1_coef must be positive\")\n    self.N1_coef = N1_coef\n\n    # Set the power law exponent for the production function along with defaults \n    slope = kwargs.get(\"slope\", default_slope[self.generator_type])\n    if not isinstance(slope, FloatLike):\n        raise ValueError(\"slope must be a float\")   \n    elif slope &gt; 0.0: # Slope must be negative, but convention in the field is mixed. So we flip the sign if it is positive.\n        slope *= -1\n    self.slope = slope \n</code></pre>"},{"location":"api/production/#cratermaker.core.production.R_to_CSFD","title":"<code>R_to_CSFD(R, D, Dlim=1000000.0, *args)</code>","text":"<p>Convert R values to cumulative N values for a given D using the R-plot function.</p>"},{"location":"api/production/#cratermaker.core.production.R_to_CSFD--parameters","title":"Parameters","text":"<p>R : R = f(D)      A function that computes R given D. D : FloatLike or ArrayLike     diameter in units of km. Dlim : FloatLike     Upper limit on the diameter over which to evaluate the integral *args : Any     Additional arguments to pass to the R function</p>"},{"location":"api/production/#cratermaker.core.production.R_to_CSFD--returns","title":"Returns","text":"<p>float or ArrayLike     The cumulative number of craters greater than D in diameter.</p> Source code in <code>cratermaker/core/production.py</code> <pre><code>def R_to_CSFD(\n              R: Callable[[Union[FloatLike, ArrayLike]], Union[FloatLike, ArrayLike]], \n              D: Union[FloatLike, ArrayLike],\n              Dlim: FloatLike = 1e6,\n              *args: Any,\n            ) -&gt; Union[FloatLike, ArrayLike]:\n    \"\"\"\n    Convert R values to cumulative N values for a given D using the R-plot function.\n\n    Parameters\n    ----------\n    R : R = f(D) \n        A function that computes R given D.\n    D : FloatLike or ArrayLike\n        diameter in units of km.\n    Dlim : FloatLike\n        Upper limit on the diameter over which to evaluate the integral\n    *args : Any\n        Additional arguments to pass to the R function\n\n    Returns\n    -------\n    float or ArrayLike\n        The cumulative number of craters greater than D in diameter.\n    \"\"\"\n\n    def _R_to_CSFD_scalar(R, D, Dlim, *args):\n        # Helper function to integrate the R function\n        def integrand(D):\n            return R(D,*args) / D**3  # This is dN/dD\n\n        N = 0.0\n        D_i = D\n        while D_i &lt; Dlim:\n            D_next = D_i * np.sqrt(2.0) \n            D_mid = (D_i + D_next) / 2  # Mid-point of the bin\n            bin_width = D_next - D_i\n            R_value = integrand(D_mid)\n            N += R_value * bin_width\n            D_i = D_next  # Move to the next bin\n\n        return N\n\n    return _R_to_CSFD_scalar(R, D, Dlim, *args) if np.isscalar(D) else np.vectorize(_R_to_CSFD_scalar)(R, D, Dlim, *args)\n</code></pre>"},{"location":"api/scale/","title":"Scale Module","text":""},{"location":"api/scale/#cratermaker.core.scale.Scale","title":"<code>Scale</code>","text":"<p>An operations class for computing the scaling relationships between impactors and craters.</p> <p>This class encapsulates the logic for converting between projectile properties and crater properties,  as well as determining crater morphology based on size and target properties.</p>"},{"location":"api/scale/#cratermaker.core.scale.Scale--parameters","title":"Parameters","text":"<p>target : Target     The target body for the impact simulation. rng : Generator, optional     A random number generator instance. If not provided, the default numpy RNG will be used.</p> Source code in <code>cratermaker/core/scale.py</code> <pre><code>class Scale():\n    \"\"\"\n    An operations class for computing the scaling relationships between impactors and craters.\n\n    This class encapsulates the logic for converting between projectile properties and crater properties, \n    as well as determining crater morphology based on size and target properties.\n\n    Parameters\n    ----------\n    target : Target\n        The target body for the impact simulation.\n    rng : Generator, optional\n        A random number generator instance. If not provided, the default numpy RNG will be used.\n    \"\"\"\n\n    def __init__(self, target, rng: Generator | None = None):\n        if not isinstance(target, Target):\n            raise TypeError(\"target must be an instance of Target\")\n        if rng is None:\n            self.rng = np.random.default_rng()\n        elif isinstance(rng, Generator):\n            self.rng = rng\n        else:\n            raise TypeError(\"The 'rng' argument must be a numpy.random.Generator instance or None\")\n        self.target = target\n\n        # Initialize additional attributes for simple-&gt;complex transition scale factors. These are set to None here just for clarity\n        self.transition_diameter = None\n        self.transition_nominal = None\n        self.simple_enlargement_factor = None\n        self.complex_enlargement_factor = None\n        self.final_exp = None\n\n        # Initialize transition factors\n        self._compute_simple_to_complex_transition_factors() \n        return\n\n\n    def _compute_simple_to_complex_transition_factors(self):\n        \"\"\"\n        Computes and sets the internal attributes for transition factors between simple and complex craters.\n        \"\"\"    \n        # These terms are used to compute the ratio of the transient crater to simple crater size       \n        simple_enlargement_mean = 0.84 # See Melosh (1989) pg. 129 just following eq. 8.2.1\n        simple_enlargement_std = 0.04 # Just using Pike (1980) fig. 9 the crater depth varies by about the same amount on either side of the transition so this is a reasonable assumption\n\n        # These terms are used in the exponent in the final rim radius/ simple crater radius vs  final radius / transition radius relationship\n        # See Holsapple (1993) eq. 28\n        final_exp_mean = 0.079    \n        final_exp_std = 0.0001 # We add noise because this is nature and nature messy\n        complex_enlargement_factor = 1.02\n\n        # These terms are used to compute the transition diameter as a function of gravity\n        # The transition values come from CTEM and are a synthesis of Pike (1980), Croft (1985), Schenk et al. (2004).\n        if self.target.transition_scale_type == \"silicate\":\n            simple_complex_exp = -1.0303 \n            simple_complex_mean = 2*16533.8 \n            simple_complex_std = 0.04\n        elif self.target.transition_scale_type == \"ice\":\n            simple_complex_exp = -1.22486\n            simple_complex_mean = 2*3081.39\n            simple_complex_std = 0.04\n\n        # The nominal value will be used for determining the range of the \"transitional\" morphology type\n        transition_nominal= simple_complex_mean * self.target.gravity**simple_complex_exp\n\n        # Draw from a truncated normal distribution for each component of the model\n        simple_enlargement_factor = 1.0 / mc.bounded_norm(simple_enlargement_mean, simple_enlargement_std)\n        final_exp = mc.bounded_norm(final_exp_mean, final_exp_std)\n        simple_complex_fac = simple_complex_mean * np.exp(self.rng.normal(loc=0.0,scale=simple_complex_std))\n        transition_diameter = simple_complex_fac * self.target.gravity**simple_complex_exp\n        self.transition_diameter = transition_diameter\n        self.transition_nominal=transition_nominal\n        self.simple_enlargement_factor = simple_enlargement_factor\n        self.complex_enlargement_factor = complex_enlargement_factor\n        self.final_exp = final_exp\n        return \n\n\n    def get_morphology_type(self, final_diameter: FloatLike) -&gt; str:\n        \"\"\"\n        Computes and the morphology type of a crater and returns a string corresponding to its type.\n\n        Parameters\n        ----------\n        final_diameter : float\n            The diameter of the crater to compute\n\n        Returns\n        ----------\n        str\n            The type of crater \"simple\", \"complex\", or \"transitional\" \n        \"\"\"\n\n        # Use the 1/2x to 2x the nominal value of the simple-&gt;complex transition diameter to get the range of the \"transitional\" morphology type. This is supported by: Schenk et al. (2004) and Pike (1980) in particular  \n        transition_range = (0.5*self.transition_nominal,2*self.transition_nominal)\n\n        if final_diameter &lt; transition_range[0]:\n            morphology_type = \"simple\" \n        elif final_diameter &gt; transition_range[1]:\n            morphology_type = \"complex\"\n        else:\n            # We'll uses the distance from the nominal transition diameter to set a probability of being either simple, complex, or transitional.\n            if final_diameter &lt; self.transition_nominal:\n                p = (self.transition_nominal - final_diameter)/(self.transition_nominal - transition_range[0])\n                categories = [\"simple\",\"transitional\"]\n                prob = [p, 1.0-p] \n                morphology_type = self.rng.choice(categories,p=prob)\n            else:\n                p = (final_diameter - self.transition_nominal)/(transition_range[1] - self.transition_nominal)\n                categories = [\"complex\",\"transitional\"]\n                prob = [p, 1.0-p] \n                morphology_type = self.rng.choice(categories,p=prob)                \n\n        return morphology_type\n\n\n    def f2t_simple(self, Df):\n        return Df / self.simple_enlargement_factor\n\n\n    def f2t_complex(self, Df):\n        return Df / (self.simple_enlargement_factor * self.complex_enlargement_factor) * (Df / self.transition_diameter)**-self.final_exp\n\n\n    def final_to_transient(self, final_diameter: FloatLike, morphology_type: str | None = None) -&gt; np.float64:\n        \"\"\"\n        Computes the transient diameter of a crater based on its final diameter and morphology type.\n\n        This method first ensures that the morphology type of the crater is computed. It then calculates\n        the transient crater diameter based on the final diameter using scaling factors for simple or complex\n        crater morphologies.\n\n        Parameters\n        ----------\n        final_diameter : float-like\n            The final crater diameter in meters for which to compute the transient diameter.\n        morphology_type : str, optional\n            The morphology type of the crater (\"simple\", \"complex\", \"transitional\")\n\n        Returns\n        -------\n        np.float64\n            Returns the crater transient diameter in meters\n        \"\"\"        \n        if not morphology_type:\n            morphology_type = self.get_morphology_type(final_diameter) \n\n        if morphology_type == \"simple\": \n            transient_diameter = self.f2t_simple(final_diameter)\n        else:\n            transient_diameter = self.f2t_complex(final_diameter)\n\n        transient_diameter = np.float64(transient_diameter)\n        return transient_diameter, morphology_type\n\n\n    def transient_to_final(self, transient_diameter: FloatLike) -&gt; Tuple[np.float64, str]:\n        \"\"\"\n        Computes the final diameter of a crater based on its transient diameter and morphology type.\n\n        This method first ensures that the morphology type of the crater is computed. It then calculates\n        the final crater diameter based on the transient diameter using scaling factors for simple or complex\n        crater morphologies. This is a bit more complicated than the final-&gt;transient calculation  because In \n        the transition region, a particular transient crater diameter could be associate with simple, complex, \n        or transitional crater morphologies. Therefore we need to monte carlo our way into a solution to avoid \n        biasing in favor of one or another in the transient-&gt;final computation\n\n        Parameters\n        ----------\n        transient_diameter : float-like\n            The transient diameter in meters of the crater to convert to final\n\n        Returns\n        -------\n        np.float64\n            The final crater diameter\n        str\n            The morphology type of the crater\n        \"\"\" \n\n        # Invert the final -&gt; transient functions for  each crater type\n        final_diameter_simple = transient_diameter * self.simple_enlargement_factor\n        def root_func(final_diameter,Dt,scale):\n            return scale.f2t_complex(final_diameter) - Dt\n\n        sol = root_scalar(lambda x, *args: root_func(x, *args),bracket=(0.1*final_diameter_simple,10*final_diameter_simple), args=(transient_diameter, self))\n        final_diameter_complex = sol.root\n\n        # Evaluate the potential morphology that this transient crater could be consistent with. If both potential diameter values are unambigusously is unambiguosuly simple or complex, go with that.\n        # If there is disagreement, then we'll draw the answer from a hat and just check to make sure that final_diameter &gt; transient_diameter \n        morphology_options = [self.get_morphology_type(final_diameter_simple),self.get_morphology_type(final_diameter_complex)]\n\n        if len(set(morphology_options)) == 1: # We have agreement!\n            morphology_type = morphology_options[0]\n            if morphology_type == \"simple\":\n                final_diameter = final_diameter_simple\n            else:\n                final_diameter = final_diameter_complex # this includes transitional types as well\n        else: \n            if \"simple\" in morphology_options: # The disagreement is between simple/complex or simple/transitional\n                if morphology_options[0] == \"simple\":\n                    sind = 0\n                    cind = 1 \n                else:\n                    sind = 1\n                    cind = 0\n\n                # Randomly draw a morphology based on weighting by whichever option is closest to the transition \n                is_simple = self.rng.random() &lt; np.abs(final_diameter_complex - self.transition_diameter) / np.abs(final_diameter_simple - final_diameter_complex)\n                if is_simple:\n                    final_diameter = final_diameter_simple\n                    morphology_type = morphology_options[sind] \n                else:\n                    final_diameter = final_diameter_complex\n                    morphology_type = morphology_options[cind]\n            else:\n                final_diameter = final_diameter_complex\n                morphology_type = self.rng.choice(morphology_options)\n\n        final_diameter = np.float64(final_diameter)\n        morphology_type = morphology_type\n        return final_diameter, morphology_type\n\n\n    def projectile_to_crater(self, projectile, **kwargs):\n        \"\"\"\n        Convert a projectile to its corresponding crater.\n\n        Parameters\n        ----------\n        projectile : Projectile\n            The projectile to be converted.\n        target : Target\n            The target body being impacted\n        Returns\n        -------\n        Crater\n            The crater resulting from the impact of the projectile.\n        \"\"\"\n        from .crater import Crater\n        transient_diameter = self.projectile_to_transient(projectile, target=self.target, rng=self.rng)\n        crater = Crater(transient_diameter=transient_diameter, target=self.target, rng=self.rng, **kwargs)\n\n        return crater\n\n\n    def crater_to_projectile(self, crater, **kwargs):\n        \"\"\"\n        Convert a crater back to its corresponding projectile.\n        This operation is more hypothetical and approximates the possible projectile that created the crater.\n\n        Parameters\n        ----------\n        crater : Crater\n            The crater to be converted.\n\n        Returns\n        -------\n        Projectile\n            The estimated projectile that could have caused the crater.\n        \"\"\"\n        projectile = self.transient_to_projectile(crater, target=self.target, rng=self.rng)\n\n        return projectile\n\n    @staticmethod\n    def projectile_to_transient(projectile, target, rng: Generator) -&gt; np.float64:\n        from .crater import Projectile\n        if not isinstance(projectile, Projectile):\n            raise TypeError(\"target must be an instance of Projectile\")\n        if not isinstance(target, Target):\n            raise TypeError(\"target must be an instance of Target\")\n\n        # Compute some auxiliary quantites\n        projectile.mass = 4.0/3.0 * np.pi * projectile.density * (projectile.radius)**3\n        mu = target.material.mu\n        kv = target.material.K1\n        c1 = 1.0 + 0.5 * mu\n        c2 = (-3 * mu)/(2.0 + mu)\n\n        # Find dimensionless quantities\n        pitwo = (target.gravity * projectile.radius)/(projectile.vertical_velocity**2)\n        pithree = target.material.Ybar / (target.material.density * (projectile.vertical_velocity**2))\n        pifour = target.material.density / projectile.density\n        pivol = kv * ((pitwo * (pifour**(-1.0/3.0))) + (pithree**c1))**c2\n        pivolg = kv * (pitwo * (pifour**(-1.0/3.0)))**c2\n\n        # find transient crater volume and radii (depth = 1/3 diameter)\n        cvol = pivol * (projectile.mass / target.material.density)\n        cvolg = pivolg * (projectile.mass / target.material.density)\n        transient_radius = (3 * cvol / np.pi)**(1.0/3.0)\n        transient_radius_gravscale = (3 * cvolg / np.pi)**(1.0/3.0)\n\n        transient_diameter = transient_radius * 2\n\n        if transient_diameter &lt; projectile.diameter:\n            transient_diameter = projectile.diameter\n\n        return transient_diameter\n\n\n    def transient_to_projectile(self, crater, target, rng: Generator = None):\n        from .crater import Crater, Projectile\n        if not isinstance(crater, Crater):\n            raise TypeError(\"crater must be an instance of Crater\")\n        if not isinstance(target, Target):\n            raise TypeError(\"target must be an instance of Target\")\n        if rng and not isinstance(rng, Generator):\n            raise TypeError(\"The 'rng' argument must be a numpy.random.Generator instance or None\")\n\n        # We'll create a Projectile object that will allow us to set velocity\n        projectile = Projectile(diameter=crater.transient_diameter, target=target, location=crater.location, rng=rng)\n\n        def root_func(projectile_diameter: FloatLike, \n                      projectile: Projectile, \n                      crater: Crater,\n                      target: Target,\n                      rng: Generator) -&gt; np.float64:\n\n            projectile.diameter = projectile_diameter\n            transient_diameter = self.projectile_to_transient(projectile, target, rng)\n            return transient_diameter - crater.transient_diameter \n\n        sol = root_scalar(lambda x, *args: root_func(x, *args),bracket=(1e-5*crater.transient_diameter,crater.transient_diameter), args=(projectile, crater, target, self.rng))\n\n        # Regenerate the projectile with the new diameter value\n        projectile = Projectile(diameter=sol.root, target=target, location=projectile.location, velocity=projectile.velocity, angle=projectile.angle, rng=rng)\n\n        return projectile\n</code></pre>"},{"location":"api/scale/#cratermaker.core.scale.Scale.crater_to_projectile","title":"<code>crater_to_projectile(crater, **kwargs)</code>","text":"<p>Convert a crater back to its corresponding projectile. This operation is more hypothetical and approximates the possible projectile that created the crater.</p>"},{"location":"api/scale/#cratermaker.core.scale.Scale.crater_to_projectile--parameters","title":"Parameters","text":"<p>crater : Crater     The crater to be converted.</p>"},{"location":"api/scale/#cratermaker.core.scale.Scale.crater_to_projectile--returns","title":"Returns","text":"<p>Projectile     The estimated projectile that could have caused the crater.</p> Source code in <code>cratermaker/core/scale.py</code> <pre><code>def crater_to_projectile(self, crater, **kwargs):\n    \"\"\"\n    Convert a crater back to its corresponding projectile.\n    This operation is more hypothetical and approximates the possible projectile that created the crater.\n\n    Parameters\n    ----------\n    crater : Crater\n        The crater to be converted.\n\n    Returns\n    -------\n    Projectile\n        The estimated projectile that could have caused the crater.\n    \"\"\"\n    projectile = self.transient_to_projectile(crater, target=self.target, rng=self.rng)\n\n    return projectile\n</code></pre>"},{"location":"api/scale/#cratermaker.core.scale.Scale.final_to_transient","title":"<code>final_to_transient(final_diameter, morphology_type=None)</code>","text":"<p>Computes the transient diameter of a crater based on its final diameter and morphology type.</p> <p>This method first ensures that the morphology type of the crater is computed. It then calculates the transient crater diameter based on the final diameter using scaling factors for simple or complex crater morphologies.</p>"},{"location":"api/scale/#cratermaker.core.scale.Scale.final_to_transient--parameters","title":"Parameters","text":"<p>final_diameter : float-like     The final crater diameter in meters for which to compute the transient diameter. morphology_type : str, optional     The morphology type of the crater (\"simple\", \"complex\", \"transitional\")</p>"},{"location":"api/scale/#cratermaker.core.scale.Scale.final_to_transient--returns","title":"Returns","text":"<p>np.float64     Returns the crater transient diameter in meters</p> Source code in <code>cratermaker/core/scale.py</code> <pre><code>def final_to_transient(self, final_diameter: FloatLike, morphology_type: str | None = None) -&gt; np.float64:\n    \"\"\"\n    Computes the transient diameter of a crater based on its final diameter and morphology type.\n\n    This method first ensures that the morphology type of the crater is computed. It then calculates\n    the transient crater diameter based on the final diameter using scaling factors for simple or complex\n    crater morphologies.\n\n    Parameters\n    ----------\n    final_diameter : float-like\n        The final crater diameter in meters for which to compute the transient diameter.\n    morphology_type : str, optional\n        The morphology type of the crater (\"simple\", \"complex\", \"transitional\")\n\n    Returns\n    -------\n    np.float64\n        Returns the crater transient diameter in meters\n    \"\"\"        \n    if not morphology_type:\n        morphology_type = self.get_morphology_type(final_diameter) \n\n    if morphology_type == \"simple\": \n        transient_diameter = self.f2t_simple(final_diameter)\n    else:\n        transient_diameter = self.f2t_complex(final_diameter)\n\n    transient_diameter = np.float64(transient_diameter)\n    return transient_diameter, morphology_type\n</code></pre>"},{"location":"api/scale/#cratermaker.core.scale.Scale.get_morphology_type","title":"<code>get_morphology_type(final_diameter)</code>","text":"<p>Computes and the morphology type of a crater and returns a string corresponding to its type.</p>"},{"location":"api/scale/#cratermaker.core.scale.Scale.get_morphology_type--parameters","title":"Parameters","text":"<p>final_diameter : float     The diameter of the crater to compute</p>"},{"location":"api/scale/#cratermaker.core.scale.Scale.get_morphology_type--returns","title":"Returns","text":"<p>str     The type of crater \"simple\", \"complex\", or \"transitional\"</p> Source code in <code>cratermaker/core/scale.py</code> <pre><code>def get_morphology_type(self, final_diameter: FloatLike) -&gt; str:\n    \"\"\"\n    Computes and the morphology type of a crater and returns a string corresponding to its type.\n\n    Parameters\n    ----------\n    final_diameter : float\n        The diameter of the crater to compute\n\n    Returns\n    ----------\n    str\n        The type of crater \"simple\", \"complex\", or \"transitional\" \n    \"\"\"\n\n    # Use the 1/2x to 2x the nominal value of the simple-&gt;complex transition diameter to get the range of the \"transitional\" morphology type. This is supported by: Schenk et al. (2004) and Pike (1980) in particular  \n    transition_range = (0.5*self.transition_nominal,2*self.transition_nominal)\n\n    if final_diameter &lt; transition_range[0]:\n        morphology_type = \"simple\" \n    elif final_diameter &gt; transition_range[1]:\n        morphology_type = \"complex\"\n    else:\n        # We'll uses the distance from the nominal transition diameter to set a probability of being either simple, complex, or transitional.\n        if final_diameter &lt; self.transition_nominal:\n            p = (self.transition_nominal - final_diameter)/(self.transition_nominal - transition_range[0])\n            categories = [\"simple\",\"transitional\"]\n            prob = [p, 1.0-p] \n            morphology_type = self.rng.choice(categories,p=prob)\n        else:\n            p = (final_diameter - self.transition_nominal)/(transition_range[1] - self.transition_nominal)\n            categories = [\"complex\",\"transitional\"]\n            prob = [p, 1.0-p] \n            morphology_type = self.rng.choice(categories,p=prob)                \n\n    return morphology_type\n</code></pre>"},{"location":"api/scale/#cratermaker.core.scale.Scale.projectile_to_crater","title":"<code>projectile_to_crater(projectile, **kwargs)</code>","text":"<p>Convert a projectile to its corresponding crater.</p>"},{"location":"api/scale/#cratermaker.core.scale.Scale.projectile_to_crater--parameters","title":"Parameters","text":"<p>projectile : Projectile     The projectile to be converted. target : Target     The target body being impacted Returns</p> <p>Crater     The crater resulting from the impact of the projectile.</p> Source code in <code>cratermaker/core/scale.py</code> <pre><code>def projectile_to_crater(self, projectile, **kwargs):\n    \"\"\"\n    Convert a projectile to its corresponding crater.\n\n    Parameters\n    ----------\n    projectile : Projectile\n        The projectile to be converted.\n    target : Target\n        The target body being impacted\n    Returns\n    -------\n    Crater\n        The crater resulting from the impact of the projectile.\n    \"\"\"\n    from .crater import Crater\n    transient_diameter = self.projectile_to_transient(projectile, target=self.target, rng=self.rng)\n    crater = Crater(transient_diameter=transient_diameter, target=self.target, rng=self.rng, **kwargs)\n\n    return crater\n</code></pre>"},{"location":"api/scale/#cratermaker.core.scale.Scale.transient_to_final","title":"<code>transient_to_final(transient_diameter)</code>","text":"<p>Computes the final diameter of a crater based on its transient diameter and morphology type.</p> <p>This method first ensures that the morphology type of the crater is computed. It then calculates the final crater diameter based on the transient diameter using scaling factors for simple or complex crater morphologies. This is a bit more complicated than the final-&gt;transient calculation  because In  the transition region, a particular transient crater diameter could be associate with simple, complex,  or transitional crater morphologies. Therefore we need to monte carlo our way into a solution to avoid  biasing in favor of one or another in the transient-&gt;final computation</p>"},{"location":"api/scale/#cratermaker.core.scale.Scale.transient_to_final--parameters","title":"Parameters","text":"<p>transient_diameter : float-like     The transient diameter in meters of the crater to convert to final</p>"},{"location":"api/scale/#cratermaker.core.scale.Scale.transient_to_final--returns","title":"Returns","text":"<p>np.float64     The final crater diameter str     The morphology type of the crater</p> Source code in <code>cratermaker/core/scale.py</code> <pre><code>def transient_to_final(self, transient_diameter: FloatLike) -&gt; Tuple[np.float64, str]:\n    \"\"\"\n    Computes the final diameter of a crater based on its transient diameter and morphology type.\n\n    This method first ensures that the morphology type of the crater is computed. It then calculates\n    the final crater diameter based on the transient diameter using scaling factors for simple or complex\n    crater morphologies. This is a bit more complicated than the final-&gt;transient calculation  because In \n    the transition region, a particular transient crater diameter could be associate with simple, complex, \n    or transitional crater morphologies. Therefore we need to monte carlo our way into a solution to avoid \n    biasing in favor of one or another in the transient-&gt;final computation\n\n    Parameters\n    ----------\n    transient_diameter : float-like\n        The transient diameter in meters of the crater to convert to final\n\n    Returns\n    -------\n    np.float64\n        The final crater diameter\n    str\n        The morphology type of the crater\n    \"\"\" \n\n    # Invert the final -&gt; transient functions for  each crater type\n    final_diameter_simple = transient_diameter * self.simple_enlargement_factor\n    def root_func(final_diameter,Dt,scale):\n        return scale.f2t_complex(final_diameter) - Dt\n\n    sol = root_scalar(lambda x, *args: root_func(x, *args),bracket=(0.1*final_diameter_simple,10*final_diameter_simple), args=(transient_diameter, self))\n    final_diameter_complex = sol.root\n\n    # Evaluate the potential morphology that this transient crater could be consistent with. If both potential diameter values are unambigusously is unambiguosuly simple or complex, go with that.\n    # If there is disagreement, then we'll draw the answer from a hat and just check to make sure that final_diameter &gt; transient_diameter \n    morphology_options = [self.get_morphology_type(final_diameter_simple),self.get_morphology_type(final_diameter_complex)]\n\n    if len(set(morphology_options)) == 1: # We have agreement!\n        morphology_type = morphology_options[0]\n        if morphology_type == \"simple\":\n            final_diameter = final_diameter_simple\n        else:\n            final_diameter = final_diameter_complex # this includes transitional types as well\n    else: \n        if \"simple\" in morphology_options: # The disagreement is between simple/complex or simple/transitional\n            if morphology_options[0] == \"simple\":\n                sind = 0\n                cind = 1 \n            else:\n                sind = 1\n                cind = 0\n\n            # Randomly draw a morphology based on weighting by whichever option is closest to the transition \n            is_simple = self.rng.random() &lt; np.abs(final_diameter_complex - self.transition_diameter) / np.abs(final_diameter_simple - final_diameter_complex)\n            if is_simple:\n                final_diameter = final_diameter_simple\n                morphology_type = morphology_options[sind] \n            else:\n                final_diameter = final_diameter_complex\n                morphology_type = morphology_options[cind]\n        else:\n            final_diameter = final_diameter_complex\n            morphology_type = self.rng.choice(morphology_options)\n\n    final_diameter = np.float64(final_diameter)\n    morphology_type = morphology_type\n    return final_diameter, morphology_type\n</code></pre>"},{"location":"api/simulation/","title":"Simulation Module","text":""},{"location":"api/simulation/#cratermaker.core.simulation.Simulation","title":"<code>Simulation</code>","text":"<p>This class orchestrates the processes involved in running a crater simulation.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation--attributes","title":"Attributes","text":"<p>pix : float     Pixel resolution for the mesh. target : Target     The target body for the impact simulation. rng : numpy.random.Generator     Random number generator instance.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation--methods","title":"Methods","text":"<p>set_properties(kwargs):     Set properties of the current object based on the provided keyword arguments. to_json(filename):     Export the current simulation configuration to a JSON file. generate_crater(kwargs):     Create a new Crater object and its corresponding Projectile. generate_projectile(kwargs):     Create a new Projectile object and its corresponding Crater. emplace_crater(from_projectile=False, kwargs):     Emplace a crater in the simulation, optionally based on a projectile.</p> Source code in <code>cratermaker/core/simulation.py</code> <pre><code>class Simulation():\n    \"\"\"\n    This class orchestrates the processes involved in running a crater simulation.\n\n    Attributes\n    ----------\n    pix : float\n        Pixel resolution for the mesh.\n    target : Target\n        The target body for the impact simulation.\n    rng : numpy.random.Generator\n        Random number generator instance.\n\n    Methods\n    -------\n    set_properties(**kwargs):\n        Set properties of the current object based on the provided keyword arguments.\n    to_json(filename):\n        Export the current simulation configuration to a JSON file.\n    generate_crater(**kwargs):\n        Create a new Crater object and its corresponding Projectile.\n    generate_projectile(**kwargs):\n        Create a new Projectile object and its corresponding Crater.\n    emplace_crater(from_projectile=False, **kwargs):\n        Emplace a crater in the simulation, optionally based on a projectile.\n    \"\"\"\n\n    def __init__(self, \n                target: str | Target = \"Moon\",\n                material: str | Material | None = None,\n                pix: FloatLike | None = None,\n                reset_surface: bool = True,\n                simdir: os.PathLike | None = None, \n                scale: Scale | None = None,\n                morphology: Morphology | None = None,\n                *args: Any,\n                **kwargs: Any):\n        \"\"\"\n        Initialize the Simulation object.\n\n        Parameters\n        ----------\n        target: str or Target, optional, default \"Moon\"\n            Name of the target body or Target object for the simulation, default is \"Moon\".\n        material : str or Material, optional\n            Name of the material or Material object for the target body, if None is passed, the default material for the target body is used.\n        pix : float, optional\n            Pixel resolution for the mesh, default is None.\n        reset_surface : bool, optional\n            Flag to reset the surface elevation, default is True.\n        simdir: PathLike, optional\n            Path to the simulation directory, default is current working directory.\n        **kwargs : Any\n            Additional keyword arguments.\n        \"\"\"\n\n        if simdir is None:\n            simdir = os.getcwd() \n        if not os.path.isabs(simdir):\n            simdir = os.path.abspath(simdir)\n        if not os.path.exists(simdir):\n            os.makedirs(simdir) \n        self.simdir = simdir\n\n        if material:\n            if isinstance(material, str):\n                try:\n                    material = Material(material)\n                except:\n                    raise ValueError(f\"Invalid material name {material}\")\n            elif not isinstance(material, Material):\n                raise TypeError(\"materiat must be an instance of Material or a valid name of a material\")        \n\n        if not target:\n            if material:\n                target = Target(\"Moon\", material=material)\n            else:\n                target = Target(\"Moon\")\n        elif isinstance(target, str):\n            try:\n                if material:\n                    target = Target(target, material=material)\n                else:\n                    target = Target(target)\n            except:\n                raise ValueError(f\"Invalid target name {target}\")\n        elif isinstance(target, Target):\n            if material:\n                target.material = material\n        elif not isinstance(target, Target):\n            raise TypeError(\"target must be an instance of Target or a valid name of a target body\")\n\n        self.target = target\n\n        if pix is not None:\n            self.pix = np.float64(pix)\n        else:    \n            self.pix = np.sqrt(4 * np.pi * self.target.radius**2) * 1e-3  # Default mesh scale that is somewhat comparable to a 1000x1000 CTEM grid\n\n        self.initialize_surface(pix=self.pix, target=self.target, reset_surface=reset_surface, simdir=simdir, *args, **kwargs)\n\n        # Set some default values for the simulation parameters\n        self.time_function = kwargs.get('time_function', None)\n        self.tstart = kwargs.get('tstart', 0.0)  # Simulation start time (in y)\n        self.tstop = kwargs.get('tstop', 4.31e9)    # Simulation stop time (in y)\n\n        # Set some default values for the production function population\n        self.impactor_sfd  = kwargs.get('impactor_sfd', None)\n        self.impactor_velocity = kwargs.get('impactor_velocity', None)\n\n        # Set the random number generator seed\n        self.seed = kwargs.get('seed', None) \n        self.rng = default_rng(seed=self.seed)\n\n        self._crater = None\n        self._projectile = None\n\n        if scale is None:\n            self.scale = Scale(self.target, self.rng) \n        elif isinstance(scale, Scale):\n            self.scale = scale\n        else:\n            raise TypeError(\"scale must be an instance of Scale\") \n\n\n        if morphology is None or isinstance(morphology, Morphology):\n            self.morphology = morphology\n        else:\n            raise TypeError(\"morphology must be an instance of Morphology\")\n\n        return\n\n\n    def set_properties(self, **kwargs):\n        \"\"\"\n        Set properties of the current object based on the provided keyword arguments.\n\n        This function is a utility to update the properties of the current object. The actual implementation of the \n        property setting is handled by the `utils.set_properties` method.\n\n        Parameters\n        ----------\n        **kwargs : dict\n            A dictionary of keyword arguments that represent the properties to be set on the current object.\n\n        \"\"\"        \n        set_properties(self,**kwargs)\n        return \n\n\n    def to_json(self, filename):\n        \"\"\"\n        Export the current simulation configuration to a JSON file.\n\n        Parameters\n        ----------\n        filename : str\n            The file path where the JSON configuration will be saved.\n        \"\"\"        \n        #TODO: Re-do this once the dust settles a bit\n        # Get the simulation configuration into the correct structure\n        material_config = to_config(self.target.material)\n        target_config = {**to_config(self.target), 'material' : material_config}\n        sim_config = {**to_config(self),'target' : target_config} \n\n        # Write the combined configuration to a JSON file\n        with open(filename, 'w') as f:\n            json.dump(sim_config, f, indent=4)\n\n        return\n\n\n    def initialize_surface(self, *args, **kwargs):\n        \"\"\"\n        Initialize the surface mesh.\n\n        Parameters\n        ----------\n        *args : dict\n            Variable length argument list to pass to initialize_surface.\n        **kwargs : dict\n            Keyword arguments for initializing the surface mesh.\n        \"\"\"        \n        self.surf = initialize_surface(*args, **kwargs)\n        return\n\n\n    def generate_crater(self, **kwargs):\n        \"\"\"\n        Create a new Crater object and its corresponding Projectile.\n\n        Parameters\n        ----------\n        **kwargs : dict\n            Keyword arguments for initializing the Crater object.\n\n        Returns\n        -------\n        (Crater, Projectile)\n            A tuple containing the newly created Crater and Projectile objects.\n        \"\"\"        \n        # Create a new Crater object with the passed arguments and set it as the crater of this simulation\n        crater = Crater(target=self.target, morphology=self.morphology, scale=self.scale, rng=self.rng, **kwargs)\n        projectile = crater.scale.crater_to_projectile(crater)\n\n        return crater, projectile\n\n\n    def generate_projectile(self, **kwargs):\n        \"\"\"\n        Create a new Projectile object and its corresponding Crater.\n\n        Parameters\n        ----------\n        **kwargs : dict\n            Keyword arguments for initializing the Projectile object.\n\n        Returns\n        -------\n        (Projectile, Crater)\n            A tuple containing the newly created Projectile and Crater objects.\n        \"\"\"\n        projectile = Projectile(target=self.target, rng=self.rng, scale=self.scale, morphology=self.morphology, **kwargs)\n        crater = projectile.scale.projectile_to_crater(projectile, morphology=self.morphology)\n\n        return projectile, crater\n\n\n    def emplace_crater(self, from_projectile=False, **kwargs):\n        \"\"\"\n        Emplace a crater in the simulation, optionally based on a projectile.\n\n        Parameters\n        ----------\n        from_projectile : bool, optional\n            Flag to create a crater based on a projectile, default is False.\n        **kwargs : dict\n            Keyword arguments for initializing the Crater or Projectile object.\n        \"\"\"        \n        if from_projectile:\n            self.projectile, self.crater = self.generate_projectile(**kwargs)\n        else:\n            self.crater, self.projectile = self.generate_crater(**kwargs)\n        self.surf['crater_distance'] = self.surf.get_node_distance(self.crater.location)\n        self.surf['crater_bearing'] = self.surf.get_node_initial_bearing(self.crater.location)\n\n        # self.crater.average_surface_normal_vector = self.surf.get_average_surface(self.crater.location, self.crater.radius)\n        #self.crater.morphology.form_crater(self.surf)\n\n        return  \n\n\n    def save(self, *args, **kwargs):\n        \"\"\"\n        Save the current simulation state to a file.\n        \"\"\"\n        save_surface(self.surf, *args, **kwargs)\n\n        return\n\n\n    def export_vtk(self, \n                   out_dir: os.PathLike | None = None,\n                   *args, **kwargs\n                   ) -&gt; None:\n        \"\"\"\n        Export the surface mesh to a VTK file.\n\n        Parameters\n        ----------\n        out_dir : str, Default \"vtk_files\"\n            Directory to store the VTK files.\n        \"\"\"\n        if out_dir is None:\n            out_dir = os.path.join(self.simdir, \"vtk_files\")\n        ignore_time = \"time\" not in self.surf.dims\n\n        # Save the surface data to a combined netCDF file\n        with tempfile.TemporaryDirectory() as temp_dir:\n            self.save(combine_data_files=True, out_dir=temp_dir)\n\n            # Use elevation data to modify the mesh for visualization purposes\n            grid = xr.open_dataset(self.grid_file)\n\n            vert_vars = ['xVertex', 'yVertex', 'zVertex']\n\n            ds_new = elevation_to_cartesian(grid[vert_vars], self.surf['elevation'])\n            for var in vert_vars:\n                grid[var] = ds_new[var]\n\n            face_vars = ['xCell', 'yCell', 'zCell']\n            ds_new = elevation_to_cartesian(grid[face_vars], self.surf['elevation'].nodal_average())\n            for var in face_vars:\n                grid[var] = ds_new[var]\n\n            grid.to_netcdf(os.path.join(temp_dir, \"surface_mesh.nc\"))\n\n            # Combine the grid and data into one file\n            try:\n                extract_vtk(\n                    filename_pattern=os.path.join(temp_dir, \"*.nc\"),\n                    mesh_filename=os.path.join(temp_dir, \"surface_mesh.nc\"),\n                    variable_list=['allOnVertices', 'allOnCells'] , \n                    dimension_list=['maxEdges=','vertexDegree='], \n                    combine=True,\n                    include_mesh_vars=True,\n                    out_dir=out_dir, \n                    ignore_time=ignore_time, \n                    *args, **kwargs)\n            except:\n                raise RuntimeError(\"Error in mpas_tools.viz.paraview_extractor.extract_vtk. Cannot export VTK files\")\n\n        return\n\n\n    def apply_noise(self, \n                    model=\"turbulence\",\n                    noise_width=1000e3,\n                    noise_height=20e3,\n                    **kwargs,\n                    ) -&gt; None:\n        \"\"\"\n        Applies a specified noise model to the simulation's surface elevation.\n\n        This method adjusts the surface elevation of the simulation based on the chosen noise model. It supports various noise models, each with its own set of default and customizable parameters. The method also ensures that the applied noise is volume-conserving.\n\n        Parameters\n        ----------\n        model : str, optional\n            The noise model to apply. Supported models include 'turbulence', 'billowed', 'plaw', 'ridged', 'swiss', and 'jordan'. The default is 'turbulence'.\n        noise_width : float, optional\n            The width scale of the noise in meters. The default is 1000e3 (1000 km).\n        noise_height : float, optional\n            The height scale of the noise in meters. The default is 20e3 (20 km).\n        **kwargs :\n            Additional keyword arguments specific to the noise model. Common parameters include 'num_octaves' and 'anchor'. Model-specific parameters like 'freq', 'pers', 'slope', 'lacunarity', 'gain', etc., can also be set.\n\n        Returns\n        -------\n        None\n            This method modifies the simulation's surface elevation in-place and does not return a value.\n\n        Notes\n        -----\n        - The noise is scaled to be volume-conserving, ensuring the mean of the noise is zero.\n        - The method internally calculates normalized coordinates based on the target radius and scales the noise appropriately.\n        - Default values for noise parameters are set based on the chosen model.\n        - For details on thes noise models, see https://www.decarpentier.nl/scape-procedural-basics\n\n        Examples\n        --------\n        Apply default turbulence noise:\n\n        &gt;&gt;&gt; sim = cratermaker.Simulation()\n        &gt;&gt;&gt; sim.apply_noise()\n\n        Apply ridged noise with custom parameters:\n\n        &gt;&gt;&gt; sim.apply_noise(model=\"ridged\", noise_width=500e3, num_octaves=10, freq=1.5)\n        \"\"\"      \n        scale = self.target.radius / noise_width\n        num_octaves = kwargs.pop(\"num_octaves\", 12)\n        anchor = kwargs.pop(\"anchor\", self.rng.uniform(0.0,scale, size=(num_octaves, 3))) \n\n        # Set reasonable default values for the different models\n        if model == \"turbulence\" or model == \"billowed\" or model == \"plaw\" or model == \"ridged\":\n            kwargs.setdefault(\"noise_height\", noise_height)\n            kwargs.setdefault(\"freq\", 2.00)\n            kwargs.setdefault(\"pers\", 0.5)\n        if model == \"plaw\":\n            kwargs.setdefault(\"slope\", 2.0)\n        if model == \"swiss\" or model == \"jordan\":\n            kwargs.setdefault(\"lacunarity\", 2.00)\n            kwargs.setdefault(\"gain\", 0.5)\n            kwargs.setdefault(\"warp\", 0.35)\n        if model == \"jordan\":\n            kwargs.setdefault(\"gain0\", 0.8)\n            kwargs.setdefault(\"warp0\", 0.4)\n            kwargs.setdefault(\"damp0\", 1.0)\n            kwargs.setdefault(\"damp\", 0.8)\n            kwargs.setdefault(\"damp_scale\", 1.0) \n\n        if \"noise_height\" in kwargs:\n            kwargs[\"noise_height\"] = kwargs[\"noise_height\"] / self.target.radius\n\n        vars = ['node_x', 'node_y', 'node_z']\n        ds_norm = self.surf.uxgrid._ds[vars] * scale / self.target.radius\n        x = ds_norm[vars[0]].values\n        y = ds_norm[vars[1]].values\n        z = ds_norm[vars[2]].values\n        noise = apply_noise(model, x, y, z, num_octaves, anchor, **kwargs)\n\n        # Make sure the noise is volume-conserving (i.e., the mean is zero)\n        # TODO: Take into account the nodes are not uniformly distributed on the sphere\n        noise = noise - np.mean(noise)\n\n        if model ==\"swiss\" or model == \"jordan\":\n            self.surf['elevation'] += noise * noise_height\n        else:\n            self.surf['elevation'] += noise * self.target.radius \n\n        return\n\n\n    def set_elevation(self, *args, **kwargs) -&gt; None:\n        \"\"\"\n        Set the elevation on the surface. Delegates to the Surface object.\n\n        Parameters\n        ----------\n        *args: Variable length argument list to pass to self.surf.set_elevation.\n        **kwargs: Arbitrary keyword arguments to pass to self.surf.set_elevation.\n        \"\"\"\n        return self.surf.set_elevation(*args, **kwargs)   \n\n\n    @property\n    def data_dir(self):\n        return self.surf.data_dir\n\n    @property\n    def grid_file(self):\n        return self.surf.grid_file\n\n    @property\n    def elevation_file(self):\n        return self.surf.elevation_file\n\n    @property\n    def n_node(self):\n        return self.surf.uxgrid.n_node\n\n    @property\n    def n_face(self):\n        return self.surf.uxgrid.n_face\n</code></pre>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.__init__","title":"<code>__init__(target='Moon', material=None, pix=None, reset_surface=True, simdir=None, scale=None, morphology=None, *args, **kwargs)</code>","text":"<p>Initialize the Simulation object.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.__init__--parameters","title":"Parameters","text":"<p>target: str or Target, optional, default \"Moon\"     Name of the target body or Target object for the simulation, default is \"Moon\". material : str or Material, optional     Name of the material or Material object for the target body, if None is passed, the default material for the target body is used. pix : float, optional     Pixel resolution for the mesh, default is None. reset_surface : bool, optional     Flag to reset the surface elevation, default is True. simdir: PathLike, optional     Path to the simulation directory, default is current working directory. **kwargs : Any     Additional keyword arguments.</p> Source code in <code>cratermaker/core/simulation.py</code> <pre><code>def __init__(self, \n            target: str | Target = \"Moon\",\n            material: str | Material | None = None,\n            pix: FloatLike | None = None,\n            reset_surface: bool = True,\n            simdir: os.PathLike | None = None, \n            scale: Scale | None = None,\n            morphology: Morphology | None = None,\n            *args: Any,\n            **kwargs: Any):\n    \"\"\"\n    Initialize the Simulation object.\n\n    Parameters\n    ----------\n    target: str or Target, optional, default \"Moon\"\n        Name of the target body or Target object for the simulation, default is \"Moon\".\n    material : str or Material, optional\n        Name of the material or Material object for the target body, if None is passed, the default material for the target body is used.\n    pix : float, optional\n        Pixel resolution for the mesh, default is None.\n    reset_surface : bool, optional\n        Flag to reset the surface elevation, default is True.\n    simdir: PathLike, optional\n        Path to the simulation directory, default is current working directory.\n    **kwargs : Any\n        Additional keyword arguments.\n    \"\"\"\n\n    if simdir is None:\n        simdir = os.getcwd() \n    if not os.path.isabs(simdir):\n        simdir = os.path.abspath(simdir)\n    if not os.path.exists(simdir):\n        os.makedirs(simdir) \n    self.simdir = simdir\n\n    if material:\n        if isinstance(material, str):\n            try:\n                material = Material(material)\n            except:\n                raise ValueError(f\"Invalid material name {material}\")\n        elif not isinstance(material, Material):\n            raise TypeError(\"materiat must be an instance of Material or a valid name of a material\")        \n\n    if not target:\n        if material:\n            target = Target(\"Moon\", material=material)\n        else:\n            target = Target(\"Moon\")\n    elif isinstance(target, str):\n        try:\n            if material:\n                target = Target(target, material=material)\n            else:\n                target = Target(target)\n        except:\n            raise ValueError(f\"Invalid target name {target}\")\n    elif isinstance(target, Target):\n        if material:\n            target.material = material\n    elif not isinstance(target, Target):\n        raise TypeError(\"target must be an instance of Target or a valid name of a target body\")\n\n    self.target = target\n\n    if pix is not None:\n        self.pix = np.float64(pix)\n    else:    \n        self.pix = np.sqrt(4 * np.pi * self.target.radius**2) * 1e-3  # Default mesh scale that is somewhat comparable to a 1000x1000 CTEM grid\n\n    self.initialize_surface(pix=self.pix, target=self.target, reset_surface=reset_surface, simdir=simdir, *args, **kwargs)\n\n    # Set some default values for the simulation parameters\n    self.time_function = kwargs.get('time_function', None)\n    self.tstart = kwargs.get('tstart', 0.0)  # Simulation start time (in y)\n    self.tstop = kwargs.get('tstop', 4.31e9)    # Simulation stop time (in y)\n\n    # Set some default values for the production function population\n    self.impactor_sfd  = kwargs.get('impactor_sfd', None)\n    self.impactor_velocity = kwargs.get('impactor_velocity', None)\n\n    # Set the random number generator seed\n    self.seed = kwargs.get('seed', None) \n    self.rng = default_rng(seed=self.seed)\n\n    self._crater = None\n    self._projectile = None\n\n    if scale is None:\n        self.scale = Scale(self.target, self.rng) \n    elif isinstance(scale, Scale):\n        self.scale = scale\n    else:\n        raise TypeError(\"scale must be an instance of Scale\") \n\n\n    if morphology is None or isinstance(morphology, Morphology):\n        self.morphology = morphology\n    else:\n        raise TypeError(\"morphology must be an instance of Morphology\")\n\n    return\n</code></pre>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.apply_noise","title":"<code>apply_noise(model='turbulence', noise_width=1000000.0, noise_height=20000.0, **kwargs)</code>","text":"<p>Applies a specified noise model to the simulation's surface elevation.</p> <p>This method adjusts the surface elevation of the simulation based on the chosen noise model. It supports various noise models, each with its own set of default and customizable parameters. The method also ensures that the applied noise is volume-conserving.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.apply_noise--parameters","title":"Parameters","text":"<p>model : str, optional     The noise model to apply. Supported models include 'turbulence', 'billowed', 'plaw', 'ridged', 'swiss', and 'jordan'. The default is 'turbulence'. noise_width : float, optional     The width scale of the noise in meters. The default is 1000e3 (1000 km). noise_height : float, optional     The height scale of the noise in meters. The default is 20e3 (20 km). **kwargs :     Additional keyword arguments specific to the noise model. Common parameters include 'num_octaves' and 'anchor'. Model-specific parameters like 'freq', 'pers', 'slope', 'lacunarity', 'gain', etc., can also be set.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.apply_noise--returns","title":"Returns","text":"<p>None     This method modifies the simulation's surface elevation in-place and does not return a value.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.apply_noise--notes","title":"Notes","text":"<ul> <li>The noise is scaled to be volume-conserving, ensuring the mean of the noise is zero.</li> <li>The method internally calculates normalized coordinates based on the target radius and scales the noise appropriately.</li> <li>Default values for noise parameters are set based on the chosen model.</li> <li>For details on thes noise models, see https://www.decarpentier.nl/scape-procedural-basics</li> </ul>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.apply_noise--examples","title":"Examples","text":"<p>Apply default turbulence noise:</p> <p>sim = cratermaker.Simulation() sim.apply_noise()</p> <p>Apply ridged noise with custom parameters:</p> <p>sim.apply_noise(model=\"ridged\", noise_width=500e3, num_octaves=10, freq=1.5)</p> Source code in <code>cratermaker/core/simulation.py</code> <pre><code>def apply_noise(self, \n                model=\"turbulence\",\n                noise_width=1000e3,\n                noise_height=20e3,\n                **kwargs,\n                ) -&gt; None:\n    \"\"\"\n    Applies a specified noise model to the simulation's surface elevation.\n\n    This method adjusts the surface elevation of the simulation based on the chosen noise model. It supports various noise models, each with its own set of default and customizable parameters. The method also ensures that the applied noise is volume-conserving.\n\n    Parameters\n    ----------\n    model : str, optional\n        The noise model to apply. Supported models include 'turbulence', 'billowed', 'plaw', 'ridged', 'swiss', and 'jordan'. The default is 'turbulence'.\n    noise_width : float, optional\n        The width scale of the noise in meters. The default is 1000e3 (1000 km).\n    noise_height : float, optional\n        The height scale of the noise in meters. The default is 20e3 (20 km).\n    **kwargs :\n        Additional keyword arguments specific to the noise model. Common parameters include 'num_octaves' and 'anchor'. Model-specific parameters like 'freq', 'pers', 'slope', 'lacunarity', 'gain', etc., can also be set.\n\n    Returns\n    -------\n    None\n        This method modifies the simulation's surface elevation in-place and does not return a value.\n\n    Notes\n    -----\n    - The noise is scaled to be volume-conserving, ensuring the mean of the noise is zero.\n    - The method internally calculates normalized coordinates based on the target radius and scales the noise appropriately.\n    - Default values for noise parameters are set based on the chosen model.\n    - For details on thes noise models, see https://www.decarpentier.nl/scape-procedural-basics\n\n    Examples\n    --------\n    Apply default turbulence noise:\n\n    &gt;&gt;&gt; sim = cratermaker.Simulation()\n    &gt;&gt;&gt; sim.apply_noise()\n\n    Apply ridged noise with custom parameters:\n\n    &gt;&gt;&gt; sim.apply_noise(model=\"ridged\", noise_width=500e3, num_octaves=10, freq=1.5)\n    \"\"\"      \n    scale = self.target.radius / noise_width\n    num_octaves = kwargs.pop(\"num_octaves\", 12)\n    anchor = kwargs.pop(\"anchor\", self.rng.uniform(0.0,scale, size=(num_octaves, 3))) \n\n    # Set reasonable default values for the different models\n    if model == \"turbulence\" or model == \"billowed\" or model == \"plaw\" or model == \"ridged\":\n        kwargs.setdefault(\"noise_height\", noise_height)\n        kwargs.setdefault(\"freq\", 2.00)\n        kwargs.setdefault(\"pers\", 0.5)\n    if model == \"plaw\":\n        kwargs.setdefault(\"slope\", 2.0)\n    if model == \"swiss\" or model == \"jordan\":\n        kwargs.setdefault(\"lacunarity\", 2.00)\n        kwargs.setdefault(\"gain\", 0.5)\n        kwargs.setdefault(\"warp\", 0.35)\n    if model == \"jordan\":\n        kwargs.setdefault(\"gain0\", 0.8)\n        kwargs.setdefault(\"warp0\", 0.4)\n        kwargs.setdefault(\"damp0\", 1.0)\n        kwargs.setdefault(\"damp\", 0.8)\n        kwargs.setdefault(\"damp_scale\", 1.0) \n\n    if \"noise_height\" in kwargs:\n        kwargs[\"noise_height\"] = kwargs[\"noise_height\"] / self.target.radius\n\n    vars = ['node_x', 'node_y', 'node_z']\n    ds_norm = self.surf.uxgrid._ds[vars] * scale / self.target.radius\n    x = ds_norm[vars[0]].values\n    y = ds_norm[vars[1]].values\n    z = ds_norm[vars[2]].values\n    noise = apply_noise(model, x, y, z, num_octaves, anchor, **kwargs)\n\n    # Make sure the noise is volume-conserving (i.e., the mean is zero)\n    # TODO: Take into account the nodes are not uniformly distributed on the sphere\n    noise = noise - np.mean(noise)\n\n    if model ==\"swiss\" or model == \"jordan\":\n        self.surf['elevation'] += noise * noise_height\n    else:\n        self.surf['elevation'] += noise * self.target.radius \n\n    return\n</code></pre>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.emplace_crater","title":"<code>emplace_crater(from_projectile=False, **kwargs)</code>","text":"<p>Emplace a crater in the simulation, optionally based on a projectile.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.emplace_crater--parameters","title":"Parameters","text":"<p>from_projectile : bool, optional     Flag to create a crater based on a projectile, default is False. **kwargs : dict     Keyword arguments for initializing the Crater or Projectile object.</p> Source code in <code>cratermaker/core/simulation.py</code> <pre><code>def emplace_crater(self, from_projectile=False, **kwargs):\n    \"\"\"\n    Emplace a crater in the simulation, optionally based on a projectile.\n\n    Parameters\n    ----------\n    from_projectile : bool, optional\n        Flag to create a crater based on a projectile, default is False.\n    **kwargs : dict\n        Keyword arguments for initializing the Crater or Projectile object.\n    \"\"\"        \n    if from_projectile:\n        self.projectile, self.crater = self.generate_projectile(**kwargs)\n    else:\n        self.crater, self.projectile = self.generate_crater(**kwargs)\n    self.surf['crater_distance'] = self.surf.get_node_distance(self.crater.location)\n    self.surf['crater_bearing'] = self.surf.get_node_initial_bearing(self.crater.location)\n\n    # self.crater.average_surface_normal_vector = self.surf.get_average_surface(self.crater.location, self.crater.radius)\n    #self.crater.morphology.form_crater(self.surf)\n\n    return  \n</code></pre>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.export_vtk","title":"<code>export_vtk(out_dir=None, *args, **kwargs)</code>","text":"<p>Export the surface mesh to a VTK file.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.export_vtk--parameters","title":"Parameters","text":"<p>out_dir : str, Default \"vtk_files\"     Directory to store the VTK files.</p> Source code in <code>cratermaker/core/simulation.py</code> <pre><code>def export_vtk(self, \n               out_dir: os.PathLike | None = None,\n               *args, **kwargs\n               ) -&gt; None:\n    \"\"\"\n    Export the surface mesh to a VTK file.\n\n    Parameters\n    ----------\n    out_dir : str, Default \"vtk_files\"\n        Directory to store the VTK files.\n    \"\"\"\n    if out_dir is None:\n        out_dir = os.path.join(self.simdir, \"vtk_files\")\n    ignore_time = \"time\" not in self.surf.dims\n\n    # Save the surface data to a combined netCDF file\n    with tempfile.TemporaryDirectory() as temp_dir:\n        self.save(combine_data_files=True, out_dir=temp_dir)\n\n        # Use elevation data to modify the mesh for visualization purposes\n        grid = xr.open_dataset(self.grid_file)\n\n        vert_vars = ['xVertex', 'yVertex', 'zVertex']\n\n        ds_new = elevation_to_cartesian(grid[vert_vars], self.surf['elevation'])\n        for var in vert_vars:\n            grid[var] = ds_new[var]\n\n        face_vars = ['xCell', 'yCell', 'zCell']\n        ds_new = elevation_to_cartesian(grid[face_vars], self.surf['elevation'].nodal_average())\n        for var in face_vars:\n            grid[var] = ds_new[var]\n\n        grid.to_netcdf(os.path.join(temp_dir, \"surface_mesh.nc\"))\n\n        # Combine the grid and data into one file\n        try:\n            extract_vtk(\n                filename_pattern=os.path.join(temp_dir, \"*.nc\"),\n                mesh_filename=os.path.join(temp_dir, \"surface_mesh.nc\"),\n                variable_list=['allOnVertices', 'allOnCells'] , \n                dimension_list=['maxEdges=','vertexDegree='], \n                combine=True,\n                include_mesh_vars=True,\n                out_dir=out_dir, \n                ignore_time=ignore_time, \n                *args, **kwargs)\n        except:\n            raise RuntimeError(\"Error in mpas_tools.viz.paraview_extractor.extract_vtk. Cannot export VTK files\")\n\n    return\n</code></pre>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.generate_crater","title":"<code>generate_crater(**kwargs)</code>","text":"<p>Create a new Crater object and its corresponding Projectile.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.generate_crater--parameters","title":"Parameters","text":"<p>**kwargs : dict     Keyword arguments for initializing the Crater object.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.generate_crater--returns","title":"Returns","text":"<p>(Crater, Projectile)     A tuple containing the newly created Crater and Projectile objects.</p> Source code in <code>cratermaker/core/simulation.py</code> <pre><code>def generate_crater(self, **kwargs):\n    \"\"\"\n    Create a new Crater object and its corresponding Projectile.\n\n    Parameters\n    ----------\n    **kwargs : dict\n        Keyword arguments for initializing the Crater object.\n\n    Returns\n    -------\n    (Crater, Projectile)\n        A tuple containing the newly created Crater and Projectile objects.\n    \"\"\"        \n    # Create a new Crater object with the passed arguments and set it as the crater of this simulation\n    crater = Crater(target=self.target, morphology=self.morphology, scale=self.scale, rng=self.rng, **kwargs)\n    projectile = crater.scale.crater_to_projectile(crater)\n\n    return crater, projectile\n</code></pre>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.generate_projectile","title":"<code>generate_projectile(**kwargs)</code>","text":"<p>Create a new Projectile object and its corresponding Crater.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.generate_projectile--parameters","title":"Parameters","text":"<p>**kwargs : dict     Keyword arguments for initializing the Projectile object.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.generate_projectile--returns","title":"Returns","text":"<p>(Projectile, Crater)     A tuple containing the newly created Projectile and Crater objects.</p> Source code in <code>cratermaker/core/simulation.py</code> <pre><code>def generate_projectile(self, **kwargs):\n    \"\"\"\n    Create a new Projectile object and its corresponding Crater.\n\n    Parameters\n    ----------\n    **kwargs : dict\n        Keyword arguments for initializing the Projectile object.\n\n    Returns\n    -------\n    (Projectile, Crater)\n        A tuple containing the newly created Projectile and Crater objects.\n    \"\"\"\n    projectile = Projectile(target=self.target, rng=self.rng, scale=self.scale, morphology=self.morphology, **kwargs)\n    crater = projectile.scale.projectile_to_crater(projectile, morphology=self.morphology)\n\n    return projectile, crater\n</code></pre>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.initialize_surface","title":"<code>initialize_surface(*args, **kwargs)</code>","text":"<p>Initialize the surface mesh.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.initialize_surface--parameters","title":"Parameters","text":"<p>args : dict     Variable length argument list to pass to initialize_surface. *kwargs : dict     Keyword arguments for initializing the surface mesh.</p> Source code in <code>cratermaker/core/simulation.py</code> <pre><code>def initialize_surface(self, *args, **kwargs):\n    \"\"\"\n    Initialize the surface mesh.\n\n    Parameters\n    ----------\n    *args : dict\n        Variable length argument list to pass to initialize_surface.\n    **kwargs : dict\n        Keyword arguments for initializing the surface mesh.\n    \"\"\"        \n    self.surf = initialize_surface(*args, **kwargs)\n    return\n</code></pre>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.save","title":"<code>save(*args, **kwargs)</code>","text":"<p>Save the current simulation state to a file.</p> Source code in <code>cratermaker/core/simulation.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"\n    Save the current simulation state to a file.\n    \"\"\"\n    save_surface(self.surf, *args, **kwargs)\n\n    return\n</code></pre>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.set_elevation","title":"<code>set_elevation(*args, **kwargs)</code>","text":"<p>Set the elevation on the surface. Delegates to the Surface object.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.set_elevation--parameters","title":"Parameters","text":"<p>args: Variable length argument list to pass to self.surf.set_elevation. *kwargs: Arbitrary keyword arguments to pass to self.surf.set_elevation.</p> Source code in <code>cratermaker/core/simulation.py</code> <pre><code>def set_elevation(self, *args, **kwargs) -&gt; None:\n    \"\"\"\n    Set the elevation on the surface. Delegates to the Surface object.\n\n    Parameters\n    ----------\n    *args: Variable length argument list to pass to self.surf.set_elevation.\n    **kwargs: Arbitrary keyword arguments to pass to self.surf.set_elevation.\n    \"\"\"\n    return self.surf.set_elevation(*args, **kwargs)   \n</code></pre>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.set_properties","title":"<code>set_properties(**kwargs)</code>","text":"<p>Set properties of the current object based on the provided keyword arguments.</p> <p>This function is a utility to update the properties of the current object. The actual implementation of the  property setting is handled by the <code>utils.set_properties</code> method.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.set_properties--parameters","title":"Parameters","text":"<p>**kwargs : dict     A dictionary of keyword arguments that represent the properties to be set on the current object.</p> Source code in <code>cratermaker/core/simulation.py</code> <pre><code>def set_properties(self, **kwargs):\n    \"\"\"\n    Set properties of the current object based on the provided keyword arguments.\n\n    This function is a utility to update the properties of the current object. The actual implementation of the \n    property setting is handled by the `utils.set_properties` method.\n\n    Parameters\n    ----------\n    **kwargs : dict\n        A dictionary of keyword arguments that represent the properties to be set on the current object.\n\n    \"\"\"        \n    set_properties(self,**kwargs)\n    return \n</code></pre>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.to_json","title":"<code>to_json(filename)</code>","text":"<p>Export the current simulation configuration to a JSON file.</p>"},{"location":"api/simulation/#cratermaker.core.simulation.Simulation.to_json--parameters","title":"Parameters","text":"<p>filename : str     The file path where the JSON configuration will be saved.</p> Source code in <code>cratermaker/core/simulation.py</code> <pre><code>def to_json(self, filename):\n    \"\"\"\n    Export the current simulation configuration to a JSON file.\n\n    Parameters\n    ----------\n    filename : str\n        The file path where the JSON configuration will be saved.\n    \"\"\"        \n    #TODO: Re-do this once the dust settles a bit\n    # Get the simulation configuration into the correct structure\n    material_config = to_config(self.target.material)\n    target_config = {**to_config(self.target), 'material' : material_config}\n    sim_config = {**to_config(self),'target' : target_config} \n\n    # Write the combined configuration to a JSON file\n    with open(filename, 'w') as f:\n        json.dump(sim_config, f, indent=4)\n\n    return\n</code></pre>"},{"location":"api/surface/","title":"Surface Module","text":""},{"location":"api/surface/#cratermaker.core.surface.Surface","title":"<code>Surface</code>","text":"<p>             Bases: <code>UxDataset</code></p> <p>Surface class that extends UxDataset for cratermaker project.</p> <p>This class is used for handling surface-related data and operations in the  cratermaker project. It provides functionalities for setting elevation data,  calculating distances and bearings, and other surface-related computations.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface--attributes","title":"Attributes","text":"<p>grid_temp_dir : str     Directory for temporary grid files. data_dir : str     Directory for data files. grid_file : str     Path to the grid file. elevation_file : str     Path to the node elevation file. target_radius : str     Radius of the target body. pix : FloatLike     Approximate pixel size or resolution used to generate the mesh. grid_type : str     Type of the grid used.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface--methods","title":"Methods","text":"<p>set_elevation(new_elev=None)     Set elevation data for the target's surface mesh. calculate_haversine_distance(lon1, lat1, lon2, lat2, radius)     Calculate the great circle distance between two points on a sphere. get_face_distance(location)     Computes the distances between cell centers and a given location. get_node_distance(location)     Computes the distances between nodes and a given location. calculate_initial_bearing(lon1, lat1, lon2, lat2)     Calculate the initial bearing from one point to another on the surface of a sphere. get_face_initial_bearing(location)     Computes the initial bearing between cell centers and a given location. get_node_initial_bearing(location)     Computes the initial bearing between nodes and a given location. get_average_surface(location, radius)     Calculate the orientation of a hemispherical cap that represents the average surface within a given region.</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>class Surface(UxDataset):\n    \"\"\"\n    Surface class that extends UxDataset for cratermaker project.\n\n    This class is used for handling surface-related data and operations in the \n    cratermaker project. It provides functionalities for setting elevation data, \n    calculating distances and bearings, and other surface-related computations.\n\n    Attributes\n    ----------\n    grid_temp_dir : str\n        Directory for temporary grid files.\n    data_dir : str\n        Directory for data files.\n    grid_file : str\n        Path to the grid file.\n    elevation_file : str\n        Path to the node elevation file.\n    target_radius : str\n        Radius of the target body.\n    pix : FloatLike\n        Approximate pixel size or resolution used to generate the mesh.\n    grid_type : str\n        Type of the grid used.\n\n    Methods\n    -------\n    set_elevation(new_elev=None)\n        Set elevation data for the target's surface mesh.\n    calculate_haversine_distance(lon1, lat1, lon2, lat2, radius)\n        Calculate the great circle distance between two points on a sphere.\n    get_face_distance(location)\n        Computes the distances between cell centers and a given location.\n    get_node_distance(location)\n        Computes the distances between nodes and a given location.\n    calculate_initial_bearing(lon1, lat1, lon2, lat2)\n        Calculate the initial bearing from one point to another on the surface of a sphere.\n    get_face_initial_bearing(location)\n        Computes the initial bearing between cell centers and a given location.\n    get_node_initial_bearing(location)\n        Computes the initial bearing between nodes and a given location.\n    get_average_surface(location, radius)\n        Calculate the orientation of a hemispherical cap that represents the average surface within a given region.\n    \"\"\"   \n    __slots__ = UxDataset.__slots__ + ('_name', '_description','grid_temp_dir','data_dir','grid_file','elevation_file','target_radius', 'pix', 'grid_type')\n\n    \"\"\"Surface class for cratermaker\"\"\"\n    def __init__(self, *args, **kwargs):\n\n        # Call the super class constructor with the dataset\n        super().__init__(*args, **kwargs)\n\n        # Additional initialization for Surface\n        self._name = \"Surface\"\n        self._description = \"Surface class for cratermaker\"\n\n\n\n    def set_elevation(self, \n                      new_elev: NDArray[np.float64] | List[FloatLike] | None = None,\n                      save_to_file: bool = False, \n                      ) -&gt; None:\n        \"\"\"\n        Set elevation data for the target's surface mesh.\n\n        Parameters\n        ----------\n        new_elev : array_like, optional\n            New elevation data to be set. If None, the elevation is set to zero. \n        save_to_file : bool, default False\n            If True, save the elevation data to the elevation file.\n        \"\"\"\n        if new_elev is None or np.isscalar(new_elev) or new_elev.size == self.uxgrid.n_node:\n            self['elevation'] = generate_data(grid_file=self.grid_file,\n                                                           data_file=self.elevation_file,\n                                                           data=new_elev, \n                                                           name=\"elevation\",\n                                                           long_name=\"elevation of nodes\",\n                                                           isfacedata=False,\n                                                           save_to_file=save_to_file)            \n        else:\n            raise ValueError(\"new_elev must be None, a scalar, or an array with the same size as the number of nodes in the grid\")\n\n        return \n\n\n    @staticmethod\n    def calculate_haversine_distance(lon1: FloatLike, \n                    lat1: FloatLike, \n                    lon2: FloatLike, \n                    lat2: FloatLike,\n                    radius: FloatLike = 1.0) -&gt; np.float64:\n        \"\"\"\n        Calculate the great circle distance between two points on a sphere.\n\n        Parameters\n        ----------\n        lon1 : FloatLike\n            Longitude of the first point in radians.\n        lat1 : FloatLike\n            Latitude of the first point in radians.\n        lon2 : FloatLike\n            Longitude of the second point in radians.\n        lat2 : FloatLike\n            Latitude of the second point in radians.\n        radius : FloatLike\n            Radius of the sphere in meters.\n\n        Returns\n        -------\n        np.float64\n            Great circle distance between the two points in meters.\n        \"\"\"\n        # Calculate differences in coordinates\n        dlon = lon2 - lon1\n        dlat = lat2 - lat1\n\n        # Haversine formula\n        a = np.sin(dlat/2.0)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon/2.0)**2\n        c = 2 * np.arcsin(np.sqrt(a))\n        return radius * c\n\n\n    def get_face_distance(self, \n                        location: Tuple[np.float64, np.float64]) -&gt; uxr.UxDataArray:\n        \"\"\"\n        Computes the distances between cell centers and a given location.\n\n        Parameters\n        ----------\n        location : Tuple[np.float64, np.float64]\n            Tuple containing the longitude and latitude of the location in radians.\n\n        Returns\n        -------\n        UxArray.UxDataArray\n            DataArray of distances for each cell in meters.\n        \"\"\"\n        lon1 = np.deg2rad(location[0])\n        lat1 = np.deg2rad(location[1])\n        lon2 = np.deg2rad(self.uxgrid.face_lon)\n        lat2 = np.deg2rad(self.uxgrid.face_lat)\n        return self.calculate_haversine_distance(lon1,lat1,lon2,lat2,self.target_radius)\n\n\n    def get_node_distance(self, \n                        location: Tuple[np.float64, np.float64]) -&gt; uxr.UxDataArray:\n        \"\"\"\n        Computes the distances between nodes and a given location.\n\n        Parameters\n        ----------\n        location : Tuple[np.float64, np.float64]\n            Tuple containing the longitude and latitude of the location in radians.\n\n        Returns\n        -------\n        UxArray.UxDataArray\n            DataArray of distances for each cell in meters.\n        \"\"\"\n        lon1 = np.deg2rad(location[0])\n        lat1 = np.deg2rad(location[1])\n        lon2 = np.deg2rad(self.uxgrid.node_lon)\n        lat2 = np.deg2rad(self.uxgrid.node_lat)        \n        return self.calculate_haversine_distance(lon1,lat1,lon2,lat2,self.target_radius)\n\n\n    @staticmethod\n    def calculate_initial_bearing(lon1: FloatLike, \n                                lat1: FloatLike, \n                                lon2: FloatLike, \n                                lat2: FloatLike) -&gt; np.float64:\n        \"\"\"\n        Calculate the initial bearing from one point to another on the surface of a sphere.\n\n        Parameters\n        ----------\n        lon1 : FloatLike\n            Longitude of the first point in radians.\n        lat1 : FloatLike\n            Latitude of the first point in radians.\n        lon2 : FloatLike\n            Longitude of the second point in radians.\n        lat2 : FloatLike\n            Latitude of the second point in radians.\n\n        Returns\n        -------\n        np.float64\n            Initial bearing from the first point to the second point in radians.\n        \"\"\"\n        # Calculate differences in coordinates\n        dlon = np.mod(lon2 - lon1 + np.pi, 2 * np.pi) - np.pi\n\n        # Haversine formula calculations\n        x = np.sin(dlon) * np.cos(lat2)\n        y = np.cos(lat1) * np.sin(lat2) - np.sin(lat1) * np.cos(lat2) * np.cos(dlon)\n        initial_bearing = np.arctan2(x, y)\n\n        # Normalize bearing to 0 to 2*pi\n        initial_bearing = (initial_bearing + 2 * np.pi) % (2 * np.pi)\n\n        return initial_bearing\n\n\n    def get_face_initial_bearing(self, location: Tuple[np.float64, np.float64]) -&gt; uxr.UxDataArray:\n        \"\"\"\n        Computes the initial bearing between cell centers and a given location.\n\n        Parameters\n        ----------\n        location : Tuple[np.float64, np.float64]\n            Tuple containing the longitude and latitude of the location in radians.\n\n        Returns\n        -------\n        xarray.DataArray\n            DataArray of initial bearings for each cell in radians.\n        \"\"\"\n        lon1 = np.deg2rad(location[0])\n        lat1 = np.deg2rad(location[1])\n        lon2 = np.deg2rad(self.uxgrid.face_lon)\n        lat2 = np.deg2rad(self.uxgrid.face_lat)        \n        return self.calculate_initial_bearing(lon1,lat1,lon2,lat2)\n\n\n    def get_node_initial_bearing(self, location: Tuple[np.float64, np.float64]) -&gt; uxr.UxDataArray:\n        \"\"\"\n        Computes the initial bearing between nodes and a given location.\n\n        Parameters\n        ----------\n        location : Tuple[np.float64, np.float64]\n            Tuple containing the longitude and latitude of the location in radians.\n\n        Returns\n        -------\n        xarray.DataArray\n            DataArray of initial bearings for each cell in radians.\n        \"\"\"\n        lon1 = np.deg2rad(location[0])\n        lat1 = np.deg2rad(location[1])\n        lon2 = np.deg2rad(self.uxgrid.node_lon)\n        lat2 = np.deg2rad(self.uxgrid.node_lat)             \n        return self.calculate_initial_bearing(lon1,lat1,lon2,lat2)  \n\n\n    # Function to find nearest cell index\n    def find_nearest_node_index(self,point):\n        \"\"\"\n        Find the index of the nearest node to a given point.\n\n        This method calculates the Haversine distance from the given point to each node in the grid,\n        and returns the index of the node with the minimum distance.\n\n        Parameters\n        ----------\n        point : tuple\n            A tuple containing two elements: (longitude, latitude) in degrees.\n\n        Returns\n        -------\n        int\n            The index of the nearest node in the grid to the given point.\n\n        Notes\n        -----\n        The method converts the longitude and latitude values from degrees to radians before\n        calculating distances. The Haversine formula is used to compute the distances on the\n        surface of a sphere with a radius of 1.0 unit.\n        \"\"\"        \n        lon1 = np.deg2rad(point[0])\n        lat1 = np.deg2rad(point[1])\n        lon2 = np.deg2rad(self.uxgrid.node_lon)\n        lat2 = np.deg2rad(self.uxgrid.node_lat)        \n        distances = self.calculate_haversine_distance(lon1,lat1,lon2,lat2,radius=1.0)\n        return np.argmin(distances.data)    \n\n\n    def find_nearest_face_index(self,point):\n        \"\"\"\n        Find the index of the nearest face to a given point.\n\n        This method calculates the Haversine distance from the given point to each face in the grid,\n        and returns the index of the face with the minimum distance.\n\n        Parameters\n        ----------\n        point : tuple\n            A tuple containing two elements: (longitude, latitude) in degrees.\n\n        Returns\n        -------\n        int\n            The index of the nearest face in the grid to the given point.\n\n        Notes\n        -----\n        The method converts the longitude and latitude values from degrees to radians before\n        calculating distances. The Haversine formula is used to compute the distances on the\n        surface of a sphere with a radius of 1.0 unit. This method differs from `find_nearest_node_index`\n        in that it considers the grid's faces instead of its nodes.\n        \"\"\"        \n        lon1 = np.deg2rad(point[0])\n        lat1 = np.deg2rad(point[1])\n        lon2 = np.deg2rad(self.uxgrid.face_lon)\n        lat2 = np.deg2rad(self.uxgrid.face_lat)        \n        distances = self.calculate_haversine_distance(lon1,lat1,lon2,lat2,radius=1.0)\n        return np.argmin(distances.data)   \n\n\n    def get_average_surface(self,\n                            location: Tuple[FloatLike, FloatLike], \n                            radius: np.float64) -&gt; Tuple[np.float64, np.float64]:\n        \"\"\"\n        Calculate the orientation of a hemispherical cap that represents the average surface within a given region.\n\n        Parameters\n        ----------\n        location : Tuple[float, float]\n            Tuple containing the longitude and latitude of the reference location in radians.\n        radius : float\n            The reference radius of to compute the average over in meters.\n\n        Returns\n        -------\n        center_vector : ndarray\n            The vector pointing to the center of the cap from the sphere's center.\n        radius : float\n            The radius of the cap.\n        \"\"\"\n\n        # Find cells within the crater radius\n        # cells_within_radius = data['crater_distance'] &lt;= radius\n\n        # bearings = data['crater_bearing'].where(cells_within_radius, drop=True)\n        # distances = data['crater_distance'].where(cells_within_radius, drop=True)\n\n        # # Convert bearings to vector components\n        # # Bearing is angle from north, positive clockwise, but we need standard mathematical angle, positive counter-clockwise\n        # angles = np.deg2rad(90) - bearings  # Convert bearing to angle in radians\n        # x_components = np.cos(angles) * distances\n        # y_components = np.sin(angles) * distances\n\n        # # Calculate the weighted average vector components\n        # # Weight by the area of each cell to give more importance to larger cells\n        # cell_areas = mesh['areaCell'].where(cells_within_radius, drop=True)\n        # weighted_x = (x_components * cell_areas).sum() / cell_areas.sum()\n        # weighted_y = (y_components * cell_areas).sum() / cell_areas.sum()\n\n        # # Calculate the weighted mean elevation to get the z-component\n        # elevation_values = data['elevation'].where(cells_within_radius, drop=True)\n        # weighted_z = (elevation_values * cell_areas).sum() / cell_areas.sum()\n\n        # # Combine components to form the cap center vector\n        # center_vector = -np.array([weighted_x.item(), weighted_y.item(), weighted_z.item()])\n\n        # # The radius of the cap is the length of the cap center vector\n        # radius = np.linalg.norm(center_vector)\n        center_vector = None\n        return center_vector \n</code></pre>"},{"location":"api/surface/#cratermaker.core.surface.Surface.__slots__","title":"<code>__slots__ = UxDataset.__slots__ + ('_name', '_description', 'grid_temp_dir', 'data_dir', 'grid_file', 'elevation_file', 'target_radius', 'pix', 'grid_type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Surface class for cratermaker</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.calculate_haversine_distance","title":"<code>calculate_haversine_distance(lon1, lat1, lon2, lat2, radius=1.0)</code>  <code>staticmethod</code>","text":"<p>Calculate the great circle distance between two points on a sphere.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.calculate_haversine_distance--parameters","title":"Parameters","text":"<p>lon1 : FloatLike     Longitude of the first point in radians. lat1 : FloatLike     Latitude of the first point in radians. lon2 : FloatLike     Longitude of the second point in radians. lat2 : FloatLike     Latitude of the second point in radians. radius : FloatLike     Radius of the sphere in meters.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.calculate_haversine_distance--returns","title":"Returns","text":"<p>np.float64     Great circle distance between the two points in meters.</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>@staticmethod\ndef calculate_haversine_distance(lon1: FloatLike, \n                lat1: FloatLike, \n                lon2: FloatLike, \n                lat2: FloatLike,\n                radius: FloatLike = 1.0) -&gt; np.float64:\n    \"\"\"\n    Calculate the great circle distance between two points on a sphere.\n\n    Parameters\n    ----------\n    lon1 : FloatLike\n        Longitude of the first point in radians.\n    lat1 : FloatLike\n        Latitude of the first point in radians.\n    lon2 : FloatLike\n        Longitude of the second point in radians.\n    lat2 : FloatLike\n        Latitude of the second point in radians.\n    radius : FloatLike\n        Radius of the sphere in meters.\n\n    Returns\n    -------\n    np.float64\n        Great circle distance between the two points in meters.\n    \"\"\"\n    # Calculate differences in coordinates\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    # Haversine formula\n    a = np.sin(dlat/2.0)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon/2.0)**2\n    c = 2 * np.arcsin(np.sqrt(a))\n    return radius * c\n</code></pre>"},{"location":"api/surface/#cratermaker.core.surface.Surface.calculate_initial_bearing","title":"<code>calculate_initial_bearing(lon1, lat1, lon2, lat2)</code>  <code>staticmethod</code>","text":"<p>Calculate the initial bearing from one point to another on the surface of a sphere.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.calculate_initial_bearing--parameters","title":"Parameters","text":"<p>lon1 : FloatLike     Longitude of the first point in radians. lat1 : FloatLike     Latitude of the first point in radians. lon2 : FloatLike     Longitude of the second point in radians. lat2 : FloatLike     Latitude of the second point in radians.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.calculate_initial_bearing--returns","title":"Returns","text":"<p>np.float64     Initial bearing from the first point to the second point in radians.</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>@staticmethod\ndef calculate_initial_bearing(lon1: FloatLike, \n                            lat1: FloatLike, \n                            lon2: FloatLike, \n                            lat2: FloatLike) -&gt; np.float64:\n    \"\"\"\n    Calculate the initial bearing from one point to another on the surface of a sphere.\n\n    Parameters\n    ----------\n    lon1 : FloatLike\n        Longitude of the first point in radians.\n    lat1 : FloatLike\n        Latitude of the first point in radians.\n    lon2 : FloatLike\n        Longitude of the second point in radians.\n    lat2 : FloatLike\n        Latitude of the second point in radians.\n\n    Returns\n    -------\n    np.float64\n        Initial bearing from the first point to the second point in radians.\n    \"\"\"\n    # Calculate differences in coordinates\n    dlon = np.mod(lon2 - lon1 + np.pi, 2 * np.pi) - np.pi\n\n    # Haversine formula calculations\n    x = np.sin(dlon) * np.cos(lat2)\n    y = np.cos(lat1) * np.sin(lat2) - np.sin(lat1) * np.cos(lat2) * np.cos(dlon)\n    initial_bearing = np.arctan2(x, y)\n\n    # Normalize bearing to 0 to 2*pi\n    initial_bearing = (initial_bearing + 2 * np.pi) % (2 * np.pi)\n\n    return initial_bearing\n</code></pre>"},{"location":"api/surface/#cratermaker.core.surface.Surface.find_nearest_face_index","title":"<code>find_nearest_face_index(point)</code>","text":"<p>Find the index of the nearest face to a given point.</p> <p>This method calculates the Haversine distance from the given point to each face in the grid, and returns the index of the face with the minimum distance.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.find_nearest_face_index--parameters","title":"Parameters","text":"<p>point : tuple     A tuple containing two elements: (longitude, latitude) in degrees.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.find_nearest_face_index--returns","title":"Returns","text":"<p>int     The index of the nearest face in the grid to the given point.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.find_nearest_face_index--notes","title":"Notes","text":"<p>The method converts the longitude and latitude values from degrees to radians before calculating distances. The Haversine formula is used to compute the distances on the surface of a sphere with a radius of 1.0 unit. This method differs from <code>find_nearest_node_index</code> in that it considers the grid's faces instead of its nodes.</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>def find_nearest_face_index(self,point):\n    \"\"\"\n    Find the index of the nearest face to a given point.\n\n    This method calculates the Haversine distance from the given point to each face in the grid,\n    and returns the index of the face with the minimum distance.\n\n    Parameters\n    ----------\n    point : tuple\n        A tuple containing two elements: (longitude, latitude) in degrees.\n\n    Returns\n    -------\n    int\n        The index of the nearest face in the grid to the given point.\n\n    Notes\n    -----\n    The method converts the longitude and latitude values from degrees to radians before\n    calculating distances. The Haversine formula is used to compute the distances on the\n    surface of a sphere with a radius of 1.0 unit. This method differs from `find_nearest_node_index`\n    in that it considers the grid's faces instead of its nodes.\n    \"\"\"        \n    lon1 = np.deg2rad(point[0])\n    lat1 = np.deg2rad(point[1])\n    lon2 = np.deg2rad(self.uxgrid.face_lon)\n    lat2 = np.deg2rad(self.uxgrid.face_lat)        \n    distances = self.calculate_haversine_distance(lon1,lat1,lon2,lat2,radius=1.0)\n    return np.argmin(distances.data)   \n</code></pre>"},{"location":"api/surface/#cratermaker.core.surface.Surface.find_nearest_node_index","title":"<code>find_nearest_node_index(point)</code>","text":"<p>Find the index of the nearest node to a given point.</p> <p>This method calculates the Haversine distance from the given point to each node in the grid, and returns the index of the node with the minimum distance.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.find_nearest_node_index--parameters","title":"Parameters","text":"<p>point : tuple     A tuple containing two elements: (longitude, latitude) in degrees.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.find_nearest_node_index--returns","title":"Returns","text":"<p>int     The index of the nearest node in the grid to the given point.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.find_nearest_node_index--notes","title":"Notes","text":"<p>The method converts the longitude and latitude values from degrees to radians before calculating distances. The Haversine formula is used to compute the distances on the surface of a sphere with a radius of 1.0 unit.</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>def find_nearest_node_index(self,point):\n    \"\"\"\n    Find the index of the nearest node to a given point.\n\n    This method calculates the Haversine distance from the given point to each node in the grid,\n    and returns the index of the node with the minimum distance.\n\n    Parameters\n    ----------\n    point : tuple\n        A tuple containing two elements: (longitude, latitude) in degrees.\n\n    Returns\n    -------\n    int\n        The index of the nearest node in the grid to the given point.\n\n    Notes\n    -----\n    The method converts the longitude and latitude values from degrees to radians before\n    calculating distances. The Haversine formula is used to compute the distances on the\n    surface of a sphere with a radius of 1.0 unit.\n    \"\"\"        \n    lon1 = np.deg2rad(point[0])\n    lat1 = np.deg2rad(point[1])\n    lon2 = np.deg2rad(self.uxgrid.node_lon)\n    lat2 = np.deg2rad(self.uxgrid.node_lat)        \n    distances = self.calculate_haversine_distance(lon1,lat1,lon2,lat2,radius=1.0)\n    return np.argmin(distances.data)    \n</code></pre>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_average_surface","title":"<code>get_average_surface(location, radius)</code>","text":"<p>Calculate the orientation of a hemispherical cap that represents the average surface within a given region.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_average_surface--parameters","title":"Parameters","text":"<p>location : Tuple[float, float]     Tuple containing the longitude and latitude of the reference location in radians. radius : float     The reference radius of to compute the average over in meters.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_average_surface--returns","title":"Returns","text":"<p>center_vector : ndarray     The vector pointing to the center of the cap from the sphere's center. radius : float     The radius of the cap.</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>def get_average_surface(self,\n                        location: Tuple[FloatLike, FloatLike], \n                        radius: np.float64) -&gt; Tuple[np.float64, np.float64]:\n    \"\"\"\n    Calculate the orientation of a hemispherical cap that represents the average surface within a given region.\n\n    Parameters\n    ----------\n    location : Tuple[float, float]\n        Tuple containing the longitude and latitude of the reference location in radians.\n    radius : float\n        The reference radius of to compute the average over in meters.\n\n    Returns\n    -------\n    center_vector : ndarray\n        The vector pointing to the center of the cap from the sphere's center.\n    radius : float\n        The radius of the cap.\n    \"\"\"\n\n    # Find cells within the crater radius\n    # cells_within_radius = data['crater_distance'] &lt;= radius\n\n    # bearings = data['crater_bearing'].where(cells_within_radius, drop=True)\n    # distances = data['crater_distance'].where(cells_within_radius, drop=True)\n\n    # # Convert bearings to vector components\n    # # Bearing is angle from north, positive clockwise, but we need standard mathematical angle, positive counter-clockwise\n    # angles = np.deg2rad(90) - bearings  # Convert bearing to angle in radians\n    # x_components = np.cos(angles) * distances\n    # y_components = np.sin(angles) * distances\n\n    # # Calculate the weighted average vector components\n    # # Weight by the area of each cell to give more importance to larger cells\n    # cell_areas = mesh['areaCell'].where(cells_within_radius, drop=True)\n    # weighted_x = (x_components * cell_areas).sum() / cell_areas.sum()\n    # weighted_y = (y_components * cell_areas).sum() / cell_areas.sum()\n\n    # # Calculate the weighted mean elevation to get the z-component\n    # elevation_values = data['elevation'].where(cells_within_radius, drop=True)\n    # weighted_z = (elevation_values * cell_areas).sum() / cell_areas.sum()\n\n    # # Combine components to form the cap center vector\n    # center_vector = -np.array([weighted_x.item(), weighted_y.item(), weighted_z.item()])\n\n    # # The radius of the cap is the length of the cap center vector\n    # radius = np.linalg.norm(center_vector)\n    center_vector = None\n    return center_vector \n</code></pre>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_face_distance","title":"<code>get_face_distance(location)</code>","text":"<p>Computes the distances between cell centers and a given location.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_face_distance--parameters","title":"Parameters","text":"<p>location : Tuple[np.float64, np.float64]     Tuple containing the longitude and latitude of the location in radians.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_face_distance--returns","title":"Returns","text":"<p>UxArray.UxDataArray     DataArray of distances for each cell in meters.</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>def get_face_distance(self, \n                    location: Tuple[np.float64, np.float64]) -&gt; uxr.UxDataArray:\n    \"\"\"\n    Computes the distances between cell centers and a given location.\n\n    Parameters\n    ----------\n    location : Tuple[np.float64, np.float64]\n        Tuple containing the longitude and latitude of the location in radians.\n\n    Returns\n    -------\n    UxArray.UxDataArray\n        DataArray of distances for each cell in meters.\n    \"\"\"\n    lon1 = np.deg2rad(location[0])\n    lat1 = np.deg2rad(location[1])\n    lon2 = np.deg2rad(self.uxgrid.face_lon)\n    lat2 = np.deg2rad(self.uxgrid.face_lat)\n    return self.calculate_haversine_distance(lon1,lat1,lon2,lat2,self.target_radius)\n</code></pre>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_face_initial_bearing","title":"<code>get_face_initial_bearing(location)</code>","text":"<p>Computes the initial bearing between cell centers and a given location.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_face_initial_bearing--parameters","title":"Parameters","text":"<p>location : Tuple[np.float64, np.float64]     Tuple containing the longitude and latitude of the location in radians.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_face_initial_bearing--returns","title":"Returns","text":"<p>xarray.DataArray     DataArray of initial bearings for each cell in radians.</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>def get_face_initial_bearing(self, location: Tuple[np.float64, np.float64]) -&gt; uxr.UxDataArray:\n    \"\"\"\n    Computes the initial bearing between cell centers and a given location.\n\n    Parameters\n    ----------\n    location : Tuple[np.float64, np.float64]\n        Tuple containing the longitude and latitude of the location in radians.\n\n    Returns\n    -------\n    xarray.DataArray\n        DataArray of initial bearings for each cell in radians.\n    \"\"\"\n    lon1 = np.deg2rad(location[0])\n    lat1 = np.deg2rad(location[1])\n    lon2 = np.deg2rad(self.uxgrid.face_lon)\n    lat2 = np.deg2rad(self.uxgrid.face_lat)        \n    return self.calculate_initial_bearing(lon1,lat1,lon2,lat2)\n</code></pre>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_node_distance","title":"<code>get_node_distance(location)</code>","text":"<p>Computes the distances between nodes and a given location.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_node_distance--parameters","title":"Parameters","text":"<p>location : Tuple[np.float64, np.float64]     Tuple containing the longitude and latitude of the location in radians.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_node_distance--returns","title":"Returns","text":"<p>UxArray.UxDataArray     DataArray of distances for each cell in meters.</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>def get_node_distance(self, \n                    location: Tuple[np.float64, np.float64]) -&gt; uxr.UxDataArray:\n    \"\"\"\n    Computes the distances between nodes and a given location.\n\n    Parameters\n    ----------\n    location : Tuple[np.float64, np.float64]\n        Tuple containing the longitude and latitude of the location in radians.\n\n    Returns\n    -------\n    UxArray.UxDataArray\n        DataArray of distances for each cell in meters.\n    \"\"\"\n    lon1 = np.deg2rad(location[0])\n    lat1 = np.deg2rad(location[1])\n    lon2 = np.deg2rad(self.uxgrid.node_lon)\n    lat2 = np.deg2rad(self.uxgrid.node_lat)        \n    return self.calculate_haversine_distance(lon1,lat1,lon2,lat2,self.target_radius)\n</code></pre>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_node_initial_bearing","title":"<code>get_node_initial_bearing(location)</code>","text":"<p>Computes the initial bearing between nodes and a given location.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_node_initial_bearing--parameters","title":"Parameters","text":"<p>location : Tuple[np.float64, np.float64]     Tuple containing the longitude and latitude of the location in radians.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.get_node_initial_bearing--returns","title":"Returns","text":"<p>xarray.DataArray     DataArray of initial bearings for each cell in radians.</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>def get_node_initial_bearing(self, location: Tuple[np.float64, np.float64]) -&gt; uxr.UxDataArray:\n    \"\"\"\n    Computes the initial bearing between nodes and a given location.\n\n    Parameters\n    ----------\n    location : Tuple[np.float64, np.float64]\n        Tuple containing the longitude and latitude of the location in radians.\n\n    Returns\n    -------\n    xarray.DataArray\n        DataArray of initial bearings for each cell in radians.\n    \"\"\"\n    lon1 = np.deg2rad(location[0])\n    lat1 = np.deg2rad(location[1])\n    lon2 = np.deg2rad(self.uxgrid.node_lon)\n    lat2 = np.deg2rad(self.uxgrid.node_lat)             \n    return self.calculate_initial_bearing(lon1,lat1,lon2,lat2)  \n</code></pre>"},{"location":"api/surface/#cratermaker.core.surface.Surface.set_elevation","title":"<code>set_elevation(new_elev=None, save_to_file=False)</code>","text":"<p>Set elevation data for the target's surface mesh.</p>"},{"location":"api/surface/#cratermaker.core.surface.Surface.set_elevation--parameters","title":"Parameters","text":"<p>new_elev : array_like, optional     New elevation data to be set. If None, the elevation is set to zero.  save_to_file : bool, default False     If True, save the elevation data to the elevation file.</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>def set_elevation(self, \n                  new_elev: NDArray[np.float64] | List[FloatLike] | None = None,\n                  save_to_file: bool = False, \n                  ) -&gt; None:\n    \"\"\"\n    Set elevation data for the target's surface mesh.\n\n    Parameters\n    ----------\n    new_elev : array_like, optional\n        New elevation data to be set. If None, the elevation is set to zero. \n    save_to_file : bool, default False\n        If True, save the elevation data to the elevation file.\n    \"\"\"\n    if new_elev is None or np.isscalar(new_elev) or new_elev.size == self.uxgrid.n_node:\n        self['elevation'] = generate_data(grid_file=self.grid_file,\n                                                       data_file=self.elevation_file,\n                                                       data=new_elev, \n                                                       name=\"elevation\",\n                                                       long_name=\"elevation of nodes\",\n                                                       isfacedata=False,\n                                                       save_to_file=save_to_file)            \n    else:\n        raise ValueError(\"new_elev must be None, a scalar, or an array with the same size as the number of nodes in the grid\")\n\n    return \n</code></pre>"},{"location":"api/surface/#cratermaker.core.surface.generate_data","title":"<code>generate_data(grid_file, data_file, name, long_name=None, data=None, isfacedata=True, save_to_file=False)</code>","text":"<p>Generate a NetCDF data file using the provided grid file and save it to the specified path.</p>"},{"location":"api/surface/#cratermaker.core.surface.generate_data--parameters","title":"Parameters","text":"<p>data_file : os.PathLike     Path where the grid file will be saved. grid_file : os.PathLike     Path where the grid file can be found. name : str     Name of the data variable. long_name : str, optional     Long name of the data variable that will be saved as an attribute. data : scalar or array-like     Data file to be saved. If data is a scalar, then the data file will be filled with that value. If data is an array, then the data file will be filled with the array values. The data array must have the same size as the number of faces or nodes in the grid. isfacedata : bool, optional     Flag to indicate whether the data is face data or node data. Default is True. save_to_file: bool, optional     Specify whether the data should be saved to a file. Default is False. Returns</p> <p>None</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>def generate_data(grid_file: os.PathLike,\n                  data_file: os.PathLike,\n                  name: str,\n                  long_name: str | None = None,\n                  data: FloatLike | NDArray | None = None,\n                  isfacedata: bool = True,\n                  save_to_file: bool = False,\n                  ) -&gt; None:\n    \"\"\"\n    Generate a NetCDF data file using the provided grid file and save it to the specified path.\n\n\n    Parameters\n    ----------\n    data_file : os.PathLike\n        Path where the grid file will be saved.\n    grid_file : os.PathLike\n        Path where the grid file can be found.\n    name : str\n        Name of the data variable.\n    long_name : str, optional\n        Long name of the data variable that will be saved as an attribute.\n    data : scalar or array-like\n        Data file to be saved. If data is a scalar, then the data file will be filled with that value. If data is an array, then the data file will be filled with the array values. The data array must have the same size as the number of faces or nodes in the grid.\n    isfacedata : bool, optional\n        Flag to indicate whether the data is face data or node data. Default is True.\n    save_to_file: bool, optional\n        Specify whether the data should be saved to a file. Default is False.\n    Returns\n    -------\n    None\n    \"\"\"    \n    uxgrid = uxr.open_grid(grid_file,latlon=True,use_dual=False)\n    if isfacedata: \n        dims = [\"n_face\"]\n        size = uxgrid.n_face\n        dim_map = {'n_face': 'nCells'}\n    else:\n        dims = [\"n_node\"]\n        size = uxgrid.n_node\n        dim_map = {'n_node': 'nVertices'}\n\n    if data is None:\n        data = np.zeros(size,dtype=np.float64) \n    elif np.isscalar(data):\n        data = np.full(size,data)\n    else:\n        if data.size != size:\n            raise ValueError(\"data must have the same size as the number of faces or nodes in the grid\") \n    uxda = uxr.UxDataArray(\n            data=data,\n            dims=dims,\n            attrs=None if long_name is None else {\"long_name\": long_name},\n            name=name,\n            uxgrid=uxgrid\n            ) \n    if save_to_file:\n        uxda.rename(dim_map).to_netcdf(data_file) \n        uxda.close()\n    return uxda \n</code></pre>"},{"location":"api/surface/#cratermaker.core.surface.generate_grid","title":"<code>generate_grid(target, pix, grid_file, grid_temp_dir)</code>","text":"<p>Generate a tessellated mesh of a sphere using the jigsaw-based mesh builder in MPAS-tools.</p> <p>This function generates temporary files in the <code>grid_temp_dir</code> directory and saves the final mesh to <code>grid_file</code>.</p>"},{"location":"api/surface/#cratermaker.core.surface.generate_grid--parameters","title":"Parameters","text":"<p>target : str or Target     Name of target body or a Target object pix : FloatLike     Desired cell size for the mesh. grid_file : os.PathLike     Path where the grid file will be saved. grid_temp_dir : os.PathLike     Path to the directory for storing temporary grid files.</p>"},{"location":"api/surface/#cratermaker.core.surface.generate_grid--returns","title":"Returns","text":"<p>A cratermaker Surface object with the generated grid as the uxgrid attribute and with an elevation variable set to zero.</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>def generate_grid(target: Target | str, \n                pix: FloatLike, \n                grid_file: os.PathLike,\n                grid_temp_dir: os.PathLike)  -&gt; Surface:\n    \"\"\"\n    Generate a tessellated mesh of a sphere using the jigsaw-based mesh builder in MPAS-tools.\n\n    This function generates temporary files in the `grid_temp_dir` directory and saves the final mesh to `grid_file`.\n\n    Parameters\n    ----------\n    target : str or Target\n        Name of target body or a Target object\n    pix : FloatLike\n        Desired cell size for the mesh.\n    grid_file : os.PathLike\n        Path where the grid file will be saved.\n    grid_temp_dir : os.PathLike\n        Path to the directory for storing temporary grid files.\n\n    Returns\n    -------\n    A cratermaker Surface object with the generated grid as the uxgrid attribute and with an elevation variable set to zero.\n    \"\"\"\n    if isinstance(target, str):\n        try:\n            target = Target(target)\n        except:\n            raise ValueError(f\"Invalid target name {target}\")\n    elif not isinstance(target, Target):\n        raise TypeError(\"target must be an instance of Target or a valid name of a target body\")\n\n    cellWidth, lon, lat = _make_uniform_face_size(pix)\n    orig_dir = os.getcwd()\n    os.chdir(grid_temp_dir)\n    # Configure logger to suppress output\n    logger = logging.getLogger(\"mpas_logger\")\n    file_handler = logging.FileHandler('mesh.log')\n    logger.addHandler(file_handler)\n    logger.setLevel(logging.INFO)     \n\n    print(\"Building grid with jigsaw...\")\n    try:\n        build_spherical_mesh(cellWidth, lon, lat, out_filename=str(grid_file), earth_radius=target.radius, plot_cellWidth=False, logger=logger)\n    except:\n        print(\"Error building grid with jigsaw. See mesh.log for details.\")\n        raise\n    os.chdir(orig_dir)\n    print(\"Done\")\n\n    # Create the attribute dictionary that will enable the grid to be identified in case it needs to be regridded \n    with xr.open_dataset(grid_file) as ds:\n        ds = ds.assign_attrs(pix=pix, grid_type=\"uniform\") \n\n    # Create a temporary file\n    temp_file = tempfile.NamedTemporaryFile(delete=False)\n    # Write to the temporary file\n    ds.to_netcdf(temp_file.name)\n\n    # Replace the original file only if writing succeeded\n    shutil.move(temp_file.name,grid_file)    \n\n    return \n</code></pre>"},{"location":"api/surface/#cratermaker.core.surface.initialize_surface","title":"<code>initialize_surface(make_new_grid=False, reset_surface=True, pix=None, target=None, simdir=None, *args, **kwargs)</code>","text":"<p>Initialize a Surface object with specified parameters and directory structure.</p> <p>This function creates necessary directories, generates grid and surface DEM if required, and initializes a Surface object with the loaded data.</p>"},{"location":"api/surface/#cratermaker.core.surface.initialize_surface--parameters","title":"Parameters","text":"<p>make_new_grid : bool, default False     If True, generate a new grid. reset_surface : bool, default True     If True, reset the surface data. pix : FloatLike | None, optional     Pixel size or resolution of the grid. target : Target | str | None, optional     The target body for the surface, either as a Target object or a string name. args     Variable length argument list for additional parameters. *kwargs     Arbitrary keyword arguments.</p>"},{"location":"api/surface/#cratermaker.core.surface.initialize_surface--returns","title":"Returns","text":"<p>Surface     An initialized Surface object.</p>"},{"location":"api/surface/#cratermaker.core.surface.initialize_surface--raises","title":"Raises","text":"<p>ValueError     If the provided target name is invalid. TypeError     If the target is neither a Target instance nor a valid string name.</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>def initialize_surface(make_new_grid: bool = False,\n         reset_surface: bool = True,\n         pix: FloatLike | None = None,\n         target: Target | str | None = None,\n         simdir: os.PathLike | None = None,\n         *args, **kwargs) -&gt; Surface:\n    \"\"\"\n    Initialize a Surface object with specified parameters and directory structure.\n\n    This function creates necessary directories, generates grid and surface DEM if required,\n    and initializes a Surface object with the loaded data.\n\n    Parameters\n    ----------\n    make_new_grid : bool, default False\n        If True, generate a new grid.\n    reset_surface : bool, default True\n        If True, reset the surface data.\n    pix : FloatLike | None, optional\n        Pixel size or resolution of the grid.\n    target : Target | str | None, optional\n        The target body for the surface, either as a Target object or a string name.\n    *args\n        Variable length argument list for additional parameters.\n    **kwargs\n        Arbitrary keyword arguments.\n\n    Returns\n    -------\n    Surface\n        An initialized Surface object.\n\n    Raises\n    ------\n    ValueError\n        If the provided target name is invalid.\n    TypeError\n        If the target is neither a Target instance nor a valid string name.\n    \"\"\"\n\n    if simdir is None:\n        simdir = os.getcwd()\n    if not target:\n        target = Target(\"Moon\")\n    elif isinstance(target, str):\n        try:\n            target = Target(target)\n        except:\n            raise ValueError(f\"Invalid target name {target}\")\n    elif not isinstance(target, Target):\n        raise TypeError(\"target must be an instance of Target or a valid name of a target body\")\n\n    # Verify directory structure exists and create it if not\n    grid_temp_dir_path = os.path.join(simdir, _GRID_TEMP_DIR) \n    if not os.path.exists(grid_temp_dir_path):\n        os.mkdir(grid_temp_dir_path)\n\n    data_dir_path = os.path.join(simdir, _DATA_DIR)     \n    if not os.path.exists(data_dir_path):\n        os.mkdir(data_dir_path)\n\n    grid_file_path = os.path.join(data_dir_path,_GRID_FILE_NAME)\n\n    # Check to see if the grid is correct for this particular set of parameters. If not, then delete it and regrid\n    make_new_grid = make_new_grid or not os.path.exists(grid_file_path)\n    if not make_new_grid:\n        uxgrid = uxr.open_grid(grid_file_path) \n        if \"pix\" not in uxgrid.parsed_attrs or uxgrid.parsed_attrs[\"pix\"] != pix:\n            make_new_grid = True\n        elif \"grid_type\" not in uxgrid.parsed_attrs or uxgrid.parsed_attrs[\"grid_type\"] != \"uniform\": # this will need to be updated when other grid types are added\n            make_new_grid = True\n\n    if make_new_grid:\n        reset_surface = True\n        generate_grid(target=target,\n                      pix=pix,\n                      grid_file=grid_file_path,\n                      grid_temp_dir=grid_temp_dir_path)\n\n    # Now redo the elevation data files if necessary \n    elevation_file_path = os.path.join(data_dir_path,_ELEVATION_FILE_NAME)\n\n    # Load the grid and data files\n    data_file_list = glob(os.path.join(data_dir_path, \"*.nc\"))\n    if grid_file_path in data_file_list:\n        data_file_list.remove(grid_file_path)\n\n    # Generate a new surface if either it is explicitly requested via parameter or a data file doesn't yet exist \n    reset_surface = reset_surface or not os.path.exists(elevation_file_path) or make_new_grid  \n\n    # If reset_surface is True, delete all data files except the grid file \n    if reset_surface:\n        for f in data_file_list:\n            os.remove(f)\n        data_file_list = []\n        generate_data(grid_file=grid_file_path,\n                      data_file=elevation_file_path,\n                      name=\"elevation\",\n                      long_name=\"elevation of nodes\",\n                      save_to_file = True,\n                      isfacedata=False,\n                      )\n\n    if elevation_file_path not in data_file_list:\n        data_file_list.append(elevation_file_path)\n\n    # Initialize UxDataset with the loaded data\n    try:\n        surf = uxr.open_mfdataset(grid_file_path, data_file_list, latlon=True, use_dual=False)\n    except:\n        raise ValueError(\"Error loading grid and data files\")\n    surf = Surface(surf,uxgrid=surf.uxgrid,source_datasets=surf.source_datasets) \n\n    surf.grid_temp_dir = grid_temp_dir_path\n    surf.data_dir = data_dir_path\n    surf.grid_file = grid_file_path\n    surf.elevation_file = elevation_file_path\n    surf.target_radius = target.radius\n\n    return surf\n</code></pre>"},{"location":"api/surface/#cratermaker.core.surface.save_surface","title":"<code>save_surface(surf, out_dir=None, combine_data_files=False, *args, **kwargs)</code>","text":"<p>Save the surface data to the specified directory. Each data variable is saved to a separate NetCDF file.</p>"},{"location":"api/surface/#cratermaker.core.surface.save_surface--parameters","title":"Parameters","text":"<p>surface : Surface     The surface object to be saved.  out_dir : str, optional     Directory to save the surface data. If None, the data is saved to the current working directory.</p> Source code in <code>cratermaker/core/surface.py</code> <pre><code>def save_surface(surf: Surface, \n                 out_dir: os.PathLike | None = None,\n                 combine_data_files: bool = False,\n                 *args, **kwargs, \n                 ) -&gt; None:\n    \"\"\"\n    Save the surface data to the specified directory. Each data variable is saved to a separate NetCDF file.\n\n    Parameters\n    ----------\n    surface : Surface\n        The surface object to be saved. \n    out_dir : str, optional\n        Directory to save the surface data. If None, the data is saved to the current working directory.\n    \"\"\"\n    if out_dir is None:\n        out_dir = surf.data_dir\n\n    if not os.path.exists(out_dir):\n        os.makedirs(out_dir)         \n\n    surf.close()\n\n    if combine_data_files:\n        with tempfile.TemporaryDirectory() as temp_dir:\n            outpath = os.path.join(temp_dir, _COMBINED_DATA_FILE_NAME)\n            dim_map = {k: _DIM_MAP[k] for k in surf.dims if k in _DIM_MAP}\n            surf.rename(dim_map).to_netcdf(outpath)\n            shutil.move(outpath,os.path.join(out_dir, _COMBINED_DATA_FILE_NAME)) \n    else: \n        with tempfile.TemporaryDirectory() as temp_dir:\n            for var in surf.data_vars:\n                dim_map = {k: _DIM_MAP[k] for k in surf[var].dims if k in _DIM_MAP}  # only map dimensions that are in the variable\n                outname = var + \".nc\" \n                outpath =os.path.join(temp_dir, outname)\n                surf[var].rename(dim_map).to_netcdf(outpath)\n                shutil.move(outpath,os.path.join(out_dir, outname))\n\n    return\n</code></pre>"},{"location":"api/target/","title":"Target Module","text":""},{"location":"api/target/#cratermaker.core.target.Material","title":"<code>Material</code>  <code>dataclass</code>","text":"<p>Represents the material properties relevant to the crater simulation.</p> <p>This class defines various physical properties of the material involved in the cratering process.</p>"},{"location":"api/target/#cratermaker.core.target.Material--attributes","title":"Attributes","text":"<p>name : str     The name of the material. If the material is matched to one that is present in the catalogue, the rest of the properties will be retrieved for it unless specified. If the name is not known from the catalogue, then all other properties must be supplied and in order to build a custom material. Ybar : float     The strength of the material, typically defined in Pa.  other_properties : dict     Other relevant properties of the material.</p>"},{"location":"api/target/#cratermaker.core.target.Material--methods","title":"Methods","text":"<p>set_properties(name, **kwargs):     Add a custom property to the material.</p> Source code in <code>cratermaker/core/target.py</code> <pre><code>@dataclass\nclass Material:\n    \"\"\"\n    Represents the material properties relevant to the crater simulation.\n\n    This class defines various physical properties of the material involved in the cratering process.\n\n\n    Attributes\n    ----------\n    name : str\n        The name of the material. If the material is matched to one that is present in the catalogue, the rest of the properties will be retrieved for it unless specified. If the name is not known from the catalogue, then all other properties must be supplied and in order to build a custom material.\n    Ybar : float\n        The strength of the material, typically defined in Pa. \n    other_properties : dict\n        Other relevant properties of the material.\n\n    Methods\n    -------\n    set_properties(name, **kwargs):\n        Add a custom property to the material.\n\n    \"\"\"\n\n    # Define all valid properties for the Target object\n    name: str | None = None\n    K1: FloatLike | None = None\n    mu: FloatLike | None = None\n    Ybar: FloatLike | None = None\n    density: FloatLike | None = None\n    catalogue: dict | None = None\n\n    config_ignore = ['catalogue']  # Instance variables to ignore when saving to file\n    def __post_init__(self):\n        # Define some default crater scaling relationship terms (see Richardson 2009, Table 1, and Kraus et al. 2011 for Ice) \n        material_properties = [\n            \"name\",       \"K1\",     \"mu\",   \"Ybar\",     \"density\" \n        ]\n        material_values = [\n            (\"Water\",     2.30,     0.55,   0.0,        1000.0),\n            (\"Sand\",      0.24,     0.41,   0.0,        1750.0),\n            (\"Dry Soil\",  0.24,     0.41,   0.18e6,     1500.0),\n            (\"Wet Soil\",  0.20,     0.55,   1.14e6,     2000.0),\n            (\"Soft Rock\", 0.20,     0.55,   7.60e6,     2250.0),\n            (\"Hard Rock\", 0.20,     0.55,   18.0e6,     2500.0),\n            (\"Ice\",       15.625,   0.48,   0.0,        900.0), \n        ]        \n\n        if self.catalogue is None: \n            self.catalogue = create_catalogue(material_properties, material_values)\n\n        # Set properties for the Material object based on the catalogue value)\n        self.set_properties(**asdict(self))\n\n        # Check to make sure all required properties are set \n        check_properties(self)\n\n        # Ensure types are cast correctly\n        self.K1 = np.float64(self.K1)\n        self.mu = np.float64(self.mu)\n        self.Ybar = np.float64(self.Ybar)\n        self.density = np.float64(self.density)\n\n        return    \n\n    def set_properties(self, **kwargs):\n        \"\"\"\n        Set properties of the current object based on the provided keyword arguments.\n\n        This function is a utility to update the properties of the current object. The actual implementation of the \n        property setting is handled by the `util.set_properties` method.\n\n        Parameters\n        ----------\n        **kwargs : dict\n            A dictionary of keyword arguments that represent the properties to be set on the current object.\n\n        Returns\n        -------\n        None\n            The function does not return a value.\n        \"\"\"         \n        set_properties(self,**kwargs)\n        return\n</code></pre>"},{"location":"api/target/#cratermaker.core.target.Material.set_properties","title":"<code>set_properties(**kwargs)</code>","text":"<p>Set properties of the current object based on the provided keyword arguments.</p> <p>This function is a utility to update the properties of the current object. The actual implementation of the  property setting is handled by the <code>util.set_properties</code> method.</p>"},{"location":"api/target/#cratermaker.core.target.Material.set_properties--parameters","title":"Parameters","text":"<p>**kwargs : dict     A dictionary of keyword arguments that represent the properties to be set on the current object.</p>"},{"location":"api/target/#cratermaker.core.target.Material.set_properties--returns","title":"Returns","text":"<p>None     The function does not return a value.</p> Source code in <code>cratermaker/core/target.py</code> <pre><code>def set_properties(self, **kwargs):\n    \"\"\"\n    Set properties of the current object based on the provided keyword arguments.\n\n    This function is a utility to update the properties of the current object. The actual implementation of the \n    property setting is handled by the `util.set_properties` method.\n\n    Parameters\n    ----------\n    **kwargs : dict\n        A dictionary of keyword arguments that represent the properties to be set on the current object.\n\n    Returns\n    -------\n    None\n        The function does not return a value.\n    \"\"\"         \n    set_properties(self,**kwargs)\n    return\n</code></pre>"},{"location":"api/target/#cratermaker.core.target.Target","title":"<code>Target</code>  <code>dataclass</code>","text":"<p>Represents the target body in a crater simulation.</p> <p>This class encapsulates the properties of the target that is impacted, including its material composition, size, and other relevant physical characteristics.</p>"},{"location":"api/target/#cratermaker.core.target.Target--attributes","title":"Attributes","text":"<p>name : str or None     Name of the target body. radius : FloatLike or None     Radius of the target body in meters. diameter : FloatLike or None     Diameter of the target body in meters. gravity : FloatLike or None     Surface gravity of the target body in m/s^2. material_name : str or None     Name of the material composition of the target body. material : Material or None     Material composition of the target body. mean_impact_velocity : FloatLike or None     Mean impact velocity in m/s. transition_scale_type : str or None     Simple-to-complex transition scaling to use for the surface (either \"silicate\" or \"ice\"). catalogue : dict or None     Optional input of catalogue solar system targets to replace the built-in catalogue.</p> Source code in <code>cratermaker/core/target.py</code> <pre><code>@dataclass\nclass Target:\n    \"\"\"\n    Represents the target body in a crater simulation.\n\n    This class encapsulates the properties of the target that is impacted, including\n    its material composition, size, and other relevant physical characteristics.\n\n    Attributes\n    ----------\n    name : str or None\n        Name of the target body.\n    radius : FloatLike or None\n        Radius of the target body in meters.\n    diameter : FloatLike or None\n        Diameter of the target body in meters.\n    gravity : FloatLike or None\n        Surface gravity of the target body in m/s^2.\n    material_name : str or None\n        Name of the material composition of the target body.\n    material : Material or None\n        Material composition of the target body.\n    mean_impact_velocity : FloatLike or None\n        Mean impact velocity in m/s.\n    transition_scale_type : str or None\n        Simple-to-complex transition scaling to use for the surface (either \"silicate\" or \"ice\").\n    catalogue : dict or None\n        Optional input of catalogue solar system targets to replace the built-in catalogue.\n    \"\"\"\n\n    # Set up instance variables\n    name: str | None = None\n    radius: FloatLike | None = None\n    diameter: FloatLike | None = None\n    gravity: FloatLike | None = None\n    material_name: str | None = None\n    material: Material | None = None\n    mean_impact_velocity: FloatLike | None = None\n    transition_scale_type: str | None = None\n    catalogue: dict | None = None\n\n    config_ignore = ['catalogue','material']  # Instance variables to ignore when saving to file\n    def __post_init__(self):\n        \"\"\"\n        Initialize the target object, setting properties from the provided arguments,\n        and creating a catalogue of known solar system targets if not provided.\n        \"\"\"    \n\n        # Define some built-in catalogue values for known solar system targets of interest\n        gEarth = np.float64(9.80665) # 1 g in SI units\n\n        body_properties = [\n            \"name\",    \"radius\",   \"gravity\",      \"material_name\", \"mean_impact_velocity\", \"transition_scale_type\"\n        ]\n        body_values = [\n            (\"Mercury\", 2440.0e3,  0.377 * gEarth, \"Soft Rock\", 41100.0, \"silicate\"),\n            (\"Venus\",   6051.84e3, 0.905 * gEarth, \"Hard Rock\", 29100.0, \"silicate\"),\n            (\"Earth\",   6371.01e3, 1.000 * gEarth, \"Wet Soil\" , 24600.0, \"silicate\"),\n            (\"Moon\",    1737.53e3, 0.1657* gEarth, \"Soft Rock\", 22100.0, \"silicate\"),\n            (\"Mars\",    3389.92e3, 0.379 * gEarth, \"Soft Rock\", 10700.0, \"silicate\"),\n            (\"Ceres\",   469.7e3,   0.029 * gEarth, \"Ice\"      , 5300.0,  \"ice\"),\n            (\"Vesta\",   262.7e3,   0.025 * gEarth, \"Soft Rock\", 5300.0,  \"silicate\"),\n        ]      \n        # Mean velocities for terrestrial planets based on analysis of simulations from Minton &amp; Malhotra (2010) of main belt-derived asteroid\n        # Mean velocities for the asteroids are from Bottke et al. (1994)\n\n        if self.catalogue is None: \n            self.catalogue = create_catalogue(body_properties, body_values)\n\n        # ensure that only either diamter of radius is passed\n        values_set = sum(x is not None for x in [self.diameter, self.radius])\n        if values_set &gt; 1:\n            raise ValueError(\"Only one of diameter, radius may be set\")\n        elif values_set == 1:\n            # Be sure to perform the conversion here before the catalogue gets evaluated, in case of potential overrides (e.g. passing diameter as an argument to override a catalogue radius value)\n            if self.diameter is not None:\n                self.diameter = np.float64(self.diameter)\n                self.radius = self.diameter / 2\n            elif self.radius is not None:\n                self.radius = np.float64(self.radius)\n                self.diameter = self.radius * 2 \n\n        # Set properties for the Target object based on the arguments passed to the function\n        self.set_properties(**asdict(self))        \n        self.material = Material(name=self.material_name)\n\n        # Check to make sure diameter and radius conversion happens when catalogue values are used\n        if self.diameter is not None:\n            self.diameter = np.float64(self.diameter)\n            self.radius = self.diameter / 2\n        elif self.radius is not None:\n            self.radius = np.float64(self.radius)\n            self.diameter = self.radius * 2       \n        if self.radius is not None:\n            self.radius = np.float64(self.radius)\n        if self.gravity is not None:\n            self.gravity = np.float64(self.gravity)\n        if self.mean_impact_velocity is not None:\n            self.mean_impact_velocity = np.float64(self.mean_impact_velocity)\n\n        valid_transition_scale_types = [\"silicate\", \"ice\"]\n        if self.transition_scale_type is not None:\n            if not isinstance(self.transition_scale_type, str):\n                raise ValueError(f\"Transition scale type must be a string and one of {valid_transition_scale_types}\")\n            self.transition_scale_type = self.transition_scale_type.lower()\n            if self.transition_scale_type not in valid_transition_scale_types:\n                raise ValueError(f\"{self.transition_scale_type} is not a valid transition_scale_type. Must be one of {valid_transition_scale_types}\")\n\n        # Check to make sure all required properties are set \n        check_properties(self)\n\n        return\n\n    def set_properties(self, **kwargs):\n        \"\"\"\n        Set properties of the current object based on the provided keyword arguments.\n\n        This function is a utility to update the properties of the current object. The actual implementation of the \n        property setting is handled by the `util.set_properties` method.\n\n        Parameters\n        ----------\n        **kwargs : dict\n            A dictionary of keyword arguments that represent the properties to be set on the current object.\n\n        Returns\n        -------\n        None\n            The function does not return a value.\n        \"\"\"         \n        set_properties(self,**kwargs)\n        return\n\n\n    @property\n    def escape_velocity(self):\n        \"\"\"\n        Calculate the escape velocity for the target body.\n\n        Returns\n        -------\n        np.float64\n            Escape velocity in m/s.\n        \"\"\"        \n        return np.sqrt(2 * self.radius * self.gravity)\n</code></pre>"},{"location":"api/target/#cratermaker.core.target.Target.escape_velocity","title":"<code>escape_velocity</code>  <code>property</code>","text":"<p>Calculate the escape velocity for the target body.</p>"},{"location":"api/target/#cratermaker.core.target.Target.escape_velocity--returns","title":"Returns","text":"<p>np.float64     Escape velocity in m/s.</p>"},{"location":"api/target/#cratermaker.core.target.Target.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Initialize the target object, setting properties from the provided arguments, and creating a catalogue of known solar system targets if not provided.</p> Source code in <code>cratermaker/core/target.py</code> <pre><code>def __post_init__(self):\n    \"\"\"\n    Initialize the target object, setting properties from the provided arguments,\n    and creating a catalogue of known solar system targets if not provided.\n    \"\"\"    \n\n    # Define some built-in catalogue values for known solar system targets of interest\n    gEarth = np.float64(9.80665) # 1 g in SI units\n\n    body_properties = [\n        \"name\",    \"radius\",   \"gravity\",      \"material_name\", \"mean_impact_velocity\", \"transition_scale_type\"\n    ]\n    body_values = [\n        (\"Mercury\", 2440.0e3,  0.377 * gEarth, \"Soft Rock\", 41100.0, \"silicate\"),\n        (\"Venus\",   6051.84e3, 0.905 * gEarth, \"Hard Rock\", 29100.0, \"silicate\"),\n        (\"Earth\",   6371.01e3, 1.000 * gEarth, \"Wet Soil\" , 24600.0, \"silicate\"),\n        (\"Moon\",    1737.53e3, 0.1657* gEarth, \"Soft Rock\", 22100.0, \"silicate\"),\n        (\"Mars\",    3389.92e3, 0.379 * gEarth, \"Soft Rock\", 10700.0, \"silicate\"),\n        (\"Ceres\",   469.7e3,   0.029 * gEarth, \"Ice\"      , 5300.0,  \"ice\"),\n        (\"Vesta\",   262.7e3,   0.025 * gEarth, \"Soft Rock\", 5300.0,  \"silicate\"),\n    ]      \n    # Mean velocities for terrestrial planets based on analysis of simulations from Minton &amp; Malhotra (2010) of main belt-derived asteroid\n    # Mean velocities for the asteroids are from Bottke et al. (1994)\n\n    if self.catalogue is None: \n        self.catalogue = create_catalogue(body_properties, body_values)\n\n    # ensure that only either diamter of radius is passed\n    values_set = sum(x is not None for x in [self.diameter, self.radius])\n    if values_set &gt; 1:\n        raise ValueError(\"Only one of diameter, radius may be set\")\n    elif values_set == 1:\n        # Be sure to perform the conversion here before the catalogue gets evaluated, in case of potential overrides (e.g. passing diameter as an argument to override a catalogue radius value)\n        if self.diameter is not None:\n            self.diameter = np.float64(self.diameter)\n            self.radius = self.diameter / 2\n        elif self.radius is not None:\n            self.radius = np.float64(self.radius)\n            self.diameter = self.radius * 2 \n\n    # Set properties for the Target object based on the arguments passed to the function\n    self.set_properties(**asdict(self))        \n    self.material = Material(name=self.material_name)\n\n    # Check to make sure diameter and radius conversion happens when catalogue values are used\n    if self.diameter is not None:\n        self.diameter = np.float64(self.diameter)\n        self.radius = self.diameter / 2\n    elif self.radius is not None:\n        self.radius = np.float64(self.radius)\n        self.diameter = self.radius * 2       \n    if self.radius is not None:\n        self.radius = np.float64(self.radius)\n    if self.gravity is not None:\n        self.gravity = np.float64(self.gravity)\n    if self.mean_impact_velocity is not None:\n        self.mean_impact_velocity = np.float64(self.mean_impact_velocity)\n\n    valid_transition_scale_types = [\"silicate\", \"ice\"]\n    if self.transition_scale_type is not None:\n        if not isinstance(self.transition_scale_type, str):\n            raise ValueError(f\"Transition scale type must be a string and one of {valid_transition_scale_types}\")\n        self.transition_scale_type = self.transition_scale_type.lower()\n        if self.transition_scale_type not in valid_transition_scale_types:\n            raise ValueError(f\"{self.transition_scale_type} is not a valid transition_scale_type. Must be one of {valid_transition_scale_types}\")\n\n    # Check to make sure all required properties are set \n    check_properties(self)\n\n    return\n</code></pre>"},{"location":"api/target/#cratermaker.core.target.Target.set_properties","title":"<code>set_properties(**kwargs)</code>","text":"<p>Set properties of the current object based on the provided keyword arguments.</p> <p>This function is a utility to update the properties of the current object. The actual implementation of the  property setting is handled by the <code>util.set_properties</code> method.</p>"},{"location":"api/target/#cratermaker.core.target.Target.set_properties--parameters","title":"Parameters","text":"<p>**kwargs : dict     A dictionary of keyword arguments that represent the properties to be set on the current object.</p>"},{"location":"api/target/#cratermaker.core.target.Target.set_properties--returns","title":"Returns","text":"<p>None     The function does not return a value.</p> Source code in <code>cratermaker/core/target.py</code> <pre><code>def set_properties(self, **kwargs):\n    \"\"\"\n    Set properties of the current object based on the provided keyword arguments.\n\n    This function is a utility to update the properties of the current object. The actual implementation of the \n    property setting is handled by the `util.set_properties` method.\n\n    Parameters\n    ----------\n    **kwargs : dict\n        A dictionary of keyword arguments that represent the properties to be set on the current object.\n\n    Returns\n    -------\n    None\n        The function does not return a value.\n    \"\"\"         \n    set_properties(self,**kwargs)\n    return\n</code></pre>"}]}