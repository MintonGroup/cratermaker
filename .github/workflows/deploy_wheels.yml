name: deploy_cratermaker

on:
  workflow_dispatch:
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - uses: actions/setup-python@v5
        with:
          python-version: '>=3.10'

      - name: Set version
        shell: bash
        run: |
          python buildscripts/set_version.py

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: dist/*.whl
          retention-days: 1

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - uses: actions/setup-python@v5
        with:
          python-version: '>=3.10'

      - name: Set version
        shell: bash
        run: |
          python buildscripts/set_version.py

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz              
          retention-days: 1 

  test_wheels:
    name: Testing wheels on ${{ matrix.os }}
    needs: build_wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '>=3.10'

      - uses: actions/download-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: dist/

      - name: pytest
        shell: bash
        run: |
          set -e
          python3 -m venv .venv
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          # If on aarch64, install vtk RC version, as this is the first version with support for it
          if [[ "$(uname -m)" == "aarch64" ]]; then
            pip install --pre '.[aarch64]'
          fi
          PYTAG=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          pip install --upgrade pip
          pip install dist/*${PYTAG}-${PYTAG}-*.whl
          pip install pytest
          pytest

  upload_pypi:
    needs: [test_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: 
      name: pypi
      url: https://pypi.org/p/cratermaker
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
